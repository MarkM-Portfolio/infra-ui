/* ***************************************************************** */
/*                                                                   */
/* IBM Confidential                                                  */
/*                                                                   */
/* OCO Source Materials                                              */
/*                                                                   */
/* Copyright IBM Corp. 2006, 2015                                    */
/*                                                                   */
/* The source code for this program is not published or otherwise    */
/* divested of its trade secrets, irrespective of what has been      */
/* deposited with the U.S. Copyright Office.                         */
/*                                                                   */
/* ***************************************************************** */

dojo.provide("lconn.core.WidgetPlacementMM");
// all requires are handled by lconn.core.WidgetPlacement
dojo.requireLocalization("lconn.core", "widgets"); // Has content from communities UI strings
dojo.requireLocalization("lconn.core.config", "widgetbundles"); // Generated by administrator configuration
dojo.requireLocalization("lconn.core", "strings");

dojo.deprecated("lconn.core.WidgetPlacementMM", "Will be replaced with OpenSocial container logic", "3.5");

(function() {

   if (typeof(dojo.global.WidgetPlacementConfig) == "undefined") dojo.global.WidgetPlacementConfig = {
      debug: false,
      appStartupDate: ""
   };

   var messages = dojo.i18n.getLocalization("lconn.core", "widgets");
   var widgetMessages = dojo.i18n.getLocalization("lconn.core.config", "widgetbundles");
   var coreMessages = dojo.i18n.getLocalization("lconn.core", "strings");
   lconn.core.WidgetPlacementMM.debug = WidgetPlacementConfig.debug; //FIXME: use dojo.config.isDebug
   //keeps a list of all the widget-containers avaiable. format: [containerDOMId, (true | false)]
   lconn.core.WidgetPlacementMM.uiLocations = new Object();
   lconn.core.WidgetPlacementMM.dropZoneObjects = new Object();

   //** common private functions */
   var getDisplayedUserInfo = function() {
         var displayedUserInfo = null;
         if (WidgetPlacementConfig.isProfilesEnv) {
            if (profilesData.displayedUser != null) {
               if (profilesData.displayedUser.profileType == null || profilesData.displayedUser.profileType == "") profilesData.displayedUser.profileType = "default";
            }
            displayedUserInfo = profilesData.displayedUser;
         }
         return displayedUserInfo;
      };

   var getWidgetConfigAttrs = function(attributesMap, widgetDefinitionNode, widgetInstanceNode, widgetData) {
         if (attributesMap == null) {
            attributesMap = [];
         } else if (attributesMap.length > 1) {
            return attributesMap;
         }

         var widgetId = widgetDefinitionNode.getAttribute("defId");
         var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + widgetId + "']/tns:configData/tns:attr";
         var nodes = lconn.core.xpath.selectNodes(exp3, widgetData);
         for (var i = 0; nodes.length != null && i < nodes.length; i++) {
            var value = nodes[i].getAttribute("value");
            value = lconn.core.i18nOverrider.replaceParams(value, WidgetPlacementConfig.params);
            attributesMap.push({
               entryName: nodes[i].getAttribute("key"),
               entryValue: value
            });
         }

         exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + widgetId + "']/tns:itemSet/tns:item";
         nodes = lconn.core.xpath.selectNodes(exp3, widgetData);
         for (var i = 0; nodes.length != null && i < nodes.length; i++) {
            var value = nodes[i].getAttribute("value");
            value = lconn.core.i18nOverrider.replaceParams(value, WidgetPlacementConfig.params);
            attributesMap.push({
               entryName: nodes[i].getAttribute("name"),
               entryValue: value
            });
         }

         if (widgetInstanceNode != null) {
            var widgetInstanceId = widgetInstanceNode.getAttribute("instanceId");
            WidgetPlacementConfig.params['widgetInstanceId'] = widgetInstanceId;
            var exp4 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" + widgetInstanceId + "']/tns:itemSet/tns:item";
            nodes = lconn.core.xpath.selectNodes(exp4, widgetData);
            for (var i = 0; nodes.length != null && i < nodes.length; i++) {
               var value = nodes[i].getAttribute("value");
               value = lconn.core.i18nOverrider.replaceParams(value, WidgetPlacementConfig.params);
               attributesMap.push({
                  entryName: nodes[i].getAttribute("name"),
                  entryValue: value
               });
            }
         }
         return attributesMap;
      };

   //
   // Returns node displaying the widget.
   // NULL if unable to get widget info from server.
   //
   lconn.core.WidgetPlacementMM.getWidgetDocAndRenderWidget = function(widgetDefId, widgetDefinitionNode, widgetInstanceId, uiLocation, widgetMode, skinType, addToNavBar, addDropZone, attributesMap) {
      var temp = function(response, ioArgs) {
            var widgetNode = loaded(response, ioArgs);
            if (widgetNode == null) { // Unable to load widget
               lconn.core.WidgetPlacementMM.showWidgetErrorInHeadline(messages["errorDefaultMsg"], false);
               // Unhide the message area
               dojo.style("contentArea", {
                  display: "inline",
                  visibility: "visible"
               });
            }
         };

      var loaded = function(response, ioArgs) {
            var widgetData = response;
            WidgetPlacementConfig.widgetConfigXMLDocument = widgetData;
            var widgetInstanceNode = null;

            if (widgetDefId == null && widgetDefinitionNode != null) widgetDefId = widgetDefinitionNode.getAttribute("defId");

            if (widgetDefinitionNode == null) {
               var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + widgetDefId + "']";
               widgetDefinitionNode = lconn.core.xpath.selectSingleNode(exp3, widgetData);
               if (widgetDefinitionNode == null) {
                  console.log("Unable to find widget definition for: " + widgetDefId);
                  return (null);
               }
               widgetDefId = widgetDefinitionNode.getAttribute("defId");
            }

            if (widgetInstanceId == null) {
               widgetInstanceId = widgetDefId;
            } else {
               var exp4 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" + widgetInstanceId + "']";
               widgetInstanceNode = lconn.core.xpath.selectSingleNode(exp4, widgetData);
            }

            if (widgetInstanceNode == null) {
               widgetInstanceNode = widgetData.createElement("widgetInstance");
               widgetInstanceNode.setAttribute("uiLocation", uiLocation);
               widgetInstanceNode.setAttribute("defIdRef", widgetDefId);
               widgetInstanceNode.setAttribute("instanceId", widgetInstanceId);
            }

            if (skinType == null) skinType = widgetDefinitionNode.getAttribute("skinType");

            var htmlcontent = null;
            var htmlParentNode = null;

            var uiLocationElementId = "widget-container-" + uiLocation;
            var uiLocationElement = dojo.byId(uiLocationElementId)
            var dropZone = dojo.byId(uiLocation + "DropZone");
            if (dropZone == null) {
               // create drop-zone element if drop zones are supported and a drop zone does not exist for this uiLocation SPR#NZSG8CN6AH
               if (lconn.dboard && lconn.dboard.dnd) {
                  var dropZoneDOMId = uiLocation + "DropZone";
                  var dropZone = document.createElement("div");
                  dropZone.setAttribute('id', dropZoneDOMId);
                  if (uiLocationElement) {
                     uiLocationElement.appendChild(dropZone);
                  } else {
                     dropZone = null;
                  }
               } else {
                  dropZone = dojo.byId(uiLocationElementId); // if no drop zone support, mimic the current uiLocation as the drop-zone. SPR#AVEI8DNT2Z
               }
            }
            htmlParentNode = dropZone;

            if (widgetMode == "fullpage") {
               var displayedUserInfo = null;
               var url = widgetDefinitionNode.getAttribute("url");
               attributesMap = getWidgetConfigAttrs(attributesMap, widgetDefinitionNode, widgetInstanceNode, widgetData);
               htmlParentNode.innerHTML += AddiWidgetMicroformat(widgetInstanceId, url, getDisplayedUserInfo(), attributesMap, widgetMode, getEscapedWidgetName(widgetDefinitionNode, widgetInstanceNode));
               lconn.core.mumOverride.renderSingleWidget(widgetInstanceId);
               //lconn.core.utilities.processUntilElementIsFound(widgetInstanceId + "Section", function(){dojo.parser.parse(dojo.byId(widgetInstanceId + "Section"));});
            } else {
               var newParentNode = document.createElement("div");

               //if(dropZone != null && addDropZone != null)
               //{
               //newParentNode.style.display = "inline";
               //newParentNode.id = uiLocation + "DropZone";
               //newParentNode.className = "target";
               //}
               var htmlContent = GetCompleteWidgetHTMLContent(widgetDefinitionNode, widgetInstanceNode, getDisplayedUserInfo(), widgetData, true, skinType, widgetMode, addToNavBar, attributesMap);

               newParentNode.innerHTML = htmlContent;
               if (htmlParentNode) {
                  htmlParentNode.appendChild(newParentNode.firstChild);
               }

               var dropZoneDOMId = uiLocation + "DropZone";
               if (addDropZone == null && uiLocationElement) {  // need to check uiLocationElement since the widget may have been added to another page
                  // if(dropZone == null)// the dropZone has not been created, create it now
                  if (lconn.core.WidgetPlacementMM.dropZoneObjects[dropZoneDOMId] == null) lconn.core.utilities.processUntilElementIsFound(dropZoneDOMId, parseDojoWidgetsAndRegisterNewDNDDropZone, null, {
                     uiLocation: uiLocation,
                     dropZoneDOMId: dropZoneDOMId
                  });
                  else // use exising dropzone object
                  lconn.core.utilities.processUntilElementIsFound(widgetInstanceId + 'Section', parseDojoWidgetsAndAddDNDItem, null, {
                     dropZoneDOMId: dropZoneDOMId,
                     widgetInstanceId: widgetInstanceId
                  });
               }
               lconn.core.mumOverride.renderSingleWidget(widgetInstanceId);
               lconn.core.utilities.processUntilElementIsFound(widgetInstanceId + "Section", function() {
                  dojo.parser.parse(dojo.byId(widgetInstanceId + "Section"));
               }, null, null, false);
            }

            return (widgetDefinitionNode);
         };

      if (WidgetPlacementConfig.widgetConfigXMLDocument != null && !dojo.global.staleXMLConfig) {
         temp(WidgetPlacementConfig.widgetConfigXMLDocument);
      } else {
         var url = WidgetPlacementConfig.layoutInfoUrl;
         if (!dojo.global.staleXMLConfig) {
            url += "&lastMod=" + WidgetPlacementConfig.lastMod;
         }
         dojo.xhrGet({
            url: url,
            error: lconn.core.errorhandling.DefaultXHRErrorHandler,
            handleAs: "xml",
            sync: true,
            load: temp
         });
         dojo.global.staleXMLConfig = false;
      }
   };

   var parseDojoWidgetsAndRegisterNewDNDDropZone = function(dropZoneDOMNode, parameters) {
         dojo.parser.parse(dropZoneDOMNode);
         var dropZoneObject = createDropZoneObject(parameters.uiLocation, dropZoneDOMNode);
         lconn.core.WidgetPlacementMM.dropZoneObjects[parameters.dropZoneDOMId] = dropZoneObject;
      };

   var parseDojoWidgetsAndAddDNDItem = function(widgetSectionDOMNode, parameters) {
         dojo.parser.parse(widgetSectionDOMNode);
         var dropZoneObject = lconn.core.WidgetPlacementMM.dropZoneObjects[parameters.dropZoneDOMId];
         dropZoneObject.setItem(widgetSectionDOMNode.id, {
            node: widgetSectionDOMNode,
            id: widgetSectionDOMNode.id,
            data: parameters.widgetInstanceId,
            type: "widget"
         });
         //dropZoneObject.setItem(widgetInstanceId+'Section', {data: widgetInstanceId, type: "widget"});
         //dropZoneObject.insertNodes(false, [{id: widgetInstanceId+'Section', data: widgetInstanceId, type: "widget", node: dojo.byId(widgetInstanceId+'Section')}]);
      };

   var createDropZoneObject = function(uiLocation, dropZoneDOMNode) {
         var params = {
            jsId: uiLocation,
            accept: "widget",
            withhandles: true,
            skipForm: true
         };
         var dropZoneObject = new lconn.dboard.dnd.Source(dropZoneDOMNode, params);
         return dropZoneObject;
      };

   var getMMItemMarkup = function(key, value) {
         return "<a class='mm_Item' type='string' style='display: none;' href='#" + key + "'>" + lconn.core.HTMLUtil.escapeText(value) + "</a>";
      };

   var AddiWidgetMicroformat = function(widgetInstanceId, url, displayedUserInfo, attributesMap, widgetMode, computedWidgetTitle) {
         WidgetPlacementConfig.params['widgetInstanceId'] = widgetInstanceId;
         url = lconn.core.i18nOverrider.replaceParams(url, WidgetPlacementConfig.params);
         var htmlContent = "<div id='" + widgetInstanceId + "' class='mm_iWidget'><a class='mm_Definition' style='display: none;visibility:hidden;' href='" + url + "' ></a>";

         if (widgetMode != null) {
            htmlContent += '<div class="mm_ItemSet" title="idescriptor" style="display: none;">' + '<a class="mm_Item" href="#mode" style="visibility:hidden">' + widgetMode + '</a>' + '</div>';
         }

         htmlContent += "<div class='mm_ItemSet' title='attributes' style='display: none;'>";

         if (WidgetPlacementConfig.isProfilesEnv) {
            if (displayedUserInfo.uid != null) htmlContent += getMMItemMarkup("profileDisplayedUserUID", displayedUserInfo.uid);
            if (displayedUserInfo.key != null) htmlContent += getMMItemMarkup("profileDisplayedUserKey", displayedUserInfo.key);
         }
         if (WidgetPlacementConfig.resourceId != null) htmlContent += getMMItemMarkup("resourceId", WidgetPlacementConfig.resourceId);
         if (WidgetPlacementConfig.parentResourceId != null) htmlContent += getMMItemMarkup("parentResourceId", WidgetPlacementConfig.parentResourceId);
         if (WidgetPlacementConfig.resourceType != null) htmlContent += getMMItemMarkup("resourceType", WidgetPlacementConfig.resourceType);
         if (WidgetPlacementConfig.resourceName) htmlContent += getMMItemMarkup("resourceName", WidgetPlacementConfig.resourceName);
         if (computedWidgetTitle) htmlContent += getMMItemMarkup("computedWidgetTitle", computedWidgetTitle);
         for (var i = 0; attributesMap != null && i < attributesMap.length; i++)
         htmlContent += getMMItemMarkup(attributesMap[i].entryName, attributesMap[i].entryValue);

         htmlContent += "</div>" + "</div>";

         WidgetPlacementConfig.widgetInstanceId = widgetInstanceId;
         return htmlContent;
      };

   var getNavBar = function() {
         var lotusNavBar = dojo.byId("lotusProfileNavBar");
         if (lotusNavBar == null) lotusNavBar = dojo.byId("lotusNavBar");
         return lotusNavBar;
      };

   //FIXME: this needs to be refactored to be in a package, or part of a container service
   lconn.core.WidgetPlacementMM.destroyWidget = function(widgetInstanceId, uiLocation, destroyDropDownMenu, destroySubArea) {
         var temp333 = dijit.byId(widgetInstanceId + "moreActions");
		 if (temp333 != null && (destroyDropDownMenu == true)) temp333.destroy();

		 var temp3344 = dijit.byId(widgetInstanceId + "_toggleAction");
		 if (temp3344 != null && (destroyDropDownMenu == true)) temp3344.destroy();
		 lconn.core.mumOverride.destroyWidget(widgetInstanceId);

		 var widgetDOmSubAreaElm = null;

		 if (destroySubArea != null || destroySubArea == true) widgetDOmSubAreaElm = document.getElementById(widgetInstanceId + "SubArea");

		 if (widgetDOmSubAreaElm != null) widgetDOmSubAreaElm.innerHTML = "";
   };

   lconn.core.WidgetPlacementMM.closeFullPageWidgetIfOpen = function() {
      if (lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId != null) {
	      lconn.core.WidgetPlacementMM.destroyWidget(lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId, null, false, true);
	      lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId = null;
	  }
   }

   lconn.core.WidgetPlacementMM.closeSwitchView = function() {
      if (lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId != null) lconn.core.WidgetPlacementMM.destroyWidget(lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId, null, false);
      lconn.core.utilities.hide("widget-container-fullpage", false, true);
      destroyWidgetContainer("fullpage");
      lconn.core.WidgetPlacementMM.isInWidgetFullpageMode = true;
   }

   // Define as local only until needed


   function getWidgetNameFromNode(widgetDefinitionNode) {
      return window.getResourcedStringForItem(widgetDefinitionNode, "defId");
   }

   // For a node being inserted into nav bar - find child node after which it should be inserted.
   // This insertion node will be the last item in the nav bar with the same column number.
   //
   lconn.core.WidgetPlacementMM.getInsertionPoint = function(lotusNavBar, li) {
	var result = null;
	var liLocation = li.getAttribute("uiLocation");

	if (liLocation == "col2") {
		// Get all col2 widgets, find last one to insert after.
		var navBarWidgets = dojo.query("li[uilocation='col2']", lotusNavBar);
		if (navBarWidgets.length > 0) {
			result = navBarWidgets[navBarWidgets.length - 1];
		} else {
			result = lotusNavBar.children[lotusNavBar.children.length - 1];
		}
	}
	else { // Not "col2".  Add to end of nav bar.
		result = lotusNavBar.children[lotusNavBar.children.length - 1];
	}

	return(result);
   };

   var GetCompleteWidgetHTMLContent = function(widgetDefinitionNode, widgetInstanceNode, displayedUserInfo, widgetData, canPersonalize, skinType, widgetMode, addToNavBarBoolean, attributesMap) {
         if (typeof(widgetDefinitionNode) == "undefined") return "";

         var url = widgetDefinitionNode.getAttribute("url");
         var modes = widgetDefinitionNode.getAttribute("modes");
         var widgetInstanceId = widgetInstanceNode.getAttribute("instanceId");
         var widgetDefId = widgetDefinitionNode.getAttribute("defId");
         var widgetInstanceHide = widgetInstanceNode.getAttribute("hidden");
         var navBarLinkText = widgetDefinitionNode.getAttribute("navBarLinkText");
         var navBarLink = widgetDefinitionNode.getAttribute("navBarLink");
         var helpLink = widgetDefinitionNode.getAttribute("helpLink");
         var fixedPosition = widgetDefinitionNode.getAttribute("fixedPosition");
         var isDisplayLoginRequired = widgetDefinitionNode.getAttribute("displayLoginRequired");
         var isShowFullWidgetDeleteConfirmation = widgetDefinitionNode.getAttribute("showFullWidgetDeleteConfirmation");
         var removeOrDeleteLabel = (widgetDefId == "FeaturedSurvey" || widgetDefId == "LinkedQuickrCommunityLib"
             || isShowFullWidgetDeleteConfirmation === 'false') ? messages['link.remove'] : messages['delete'];
         var substitutedHelpLink = null;
         if (helpLink != null && helpLink != "") substitutedHelpLink = lconn.core.i18nOverrider.replaceParams(helpLink, WidgetPlacementConfig.params);
         var isOptionalWidget = false;
         var additionalHTML = "";

         var lcWidgets = dojo.i18n.getLocalization("lconn.core", "widgets");

         if (widgetInstanceId != null) isOptionalWidget = true;

         if (widgetInstanceId == null) widgetInstanceId = widgetDefId;
         var webInstanceId = widgetInstanceId;
         if (widgetMode == "edit") {
            webInstanceId += "edit";
         }
         if (addToNavBarBoolean == null || addToNavBarBoolean == true) {
            var selected = false;
            if (WidgetPlacementConfig.NavBarSelectedMenuItem != null) {
               var selectedWidget = WidgetPlacementConfig.NavBarSelectedMenuItem;
               var idx = selectedWidget.indexOf('_');
               if (idx > 0) {
                  selectedWidget = selectedWidget.substring(0, idx);
               }
               if (selectedWidget == widgetDefId) {
                  selected = true;
                  if (WidgetPlacementConfig.navBarOverViewElementId != null) {
                     var navBarItem = dojo.byId(WidgetPlacementConfig.navBarOverViewElementId);
                     if (navBarItem != null) {
                        dojo.removeClass(navBarItem, 'lotusSelected');
                     }
                  }
               }
            }
            addToNavBar(widgetDefinitionNode, widgetInstanceNode, displayedUserInfo, selected, navBarLink, true, navBarLinkText);
         }

         var isWidgetNeedRefresh = true;
         if (!WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired == "true") {
            isWidgetNeedRefresh = false;
         }
         var widgetName = window.getEscapedWidgetName(widgetDefinitionNode, widgetInstanceNode);
         var htmlContent = null;
         var cookieName = widgetDefId + "-isMinimized";
         var isMinimized = dojo.cookie(cookieName);

         if (skinType == null || skinType == "") skinType = "use25OneUISkin";


         if (skinType == "use25OneUISkin") {
            var widgetStateString = "Open";
            if (isMinimized != "true") widgetStateString = "Close";

            var dndContent = "";
            var cursor = "";
            if (canPersonalize && isOptionalWidget) dndContent = ' dojoDndItem" dndType="widget" skipForm="true" dndData="' + widgetInstanceId;
            else cursor = 'style="cursor: default"';

            var hiddenClass = ((widgetInstanceHide == "true")?" lotusHidden ":"");

            htmlContent = '<div id="' + webInstanceId + 'Section" class="lotusWidget2' + hiddenClass + dndContent + '" widgetId="' + widgetInstanceId + '" role="region" aria-labelledby="' + widgetInstanceId + 'Id" >';

            var actionsAlt = messages['actions_alt'] || "Actions for: ${0}";
            actionsAlt = dojo.string.substitute(actionsAlt, [widgetName]);

            htmlContent += '<h2 class="ibmDndDragHandle" ' + cursor + '>' + '<span class="lotusLeft" style="cursor: default" id="' + widgetInstanceId + 'Id">' + widgetName + '</span>' + '<a id="widgetActionsMenu' + widgetInstanceId + '" class="lotusIcon lotusActionMenu" href="javascript:void(0);" onclick="lconn.core.WidgetPlacementMM.openMenu(event, \'' + widgetInstanceId + '\',\'widgetActionsMenu' + widgetInstanceId + '\');" title="' + actionsAlt + '" role="button" aria-haspopup="true" aria-label="' + actionsAlt + '">' + '<img src="' + dijit._Widget.prototype._blankGif + '" alt=""/>' + '<span class="lotusAltText">' + actionsAlt + '</span>' + '</a>' + '</h2>';

            htmlContent += '<div dojoType="dijit.Menu" id="' + webInstanceId + 'moreActions" style="display: none;">';
            //'<div dojoType="dijit.MenuItem" label="Toggle" onclick=""></div>';
            if (isMinimized != "true") htmlContent += '<div id="' + webInstanceId + '_toggleAction" dojoType="dijit.MenuItem" label="' + messages['widgets_Min'] + '" onclick="lconn.core.WidgetPlacementMM.minimizeWidget(this,\'' + widgetInstanceId + '\', \'' + widgetDefId + '\');"></div>';
            else htmlContent += '<div id="' + webInstanceId + '_toggleAction" dojoType="dijit.MenuItem" label="' + messages['widgets_Max'] + '" onclick="lconn.core.WidgetPlacementMM.minimizeWidget(this,\'' + widgetInstanceId + '\', \'' + widgetDefId + '\');"></div>';

            if (isWidgetNeedRefresh) {
               htmlContent += '<div dojoType="dijit.MenuItem" label="' + messages['refresh'] + '" onclick="lconn.core.WidgetPlacementMM.fetchAndRefresh(\'' + widgetInstanceId + '\');"></div>';
            } else {
               //htmlContent += '<div dojoType="dijit.MenuItem" label="'+messages['refresh']+'" onclick="lconn.core.WidgetPlacementMM.refresh(\''+widgetInstanceId+'\'); disabled=\'true\'"></div>';
               //skip refresh item
            }
            if (modes != null && modes.indexOf("edit") != -1 && canPersonalize) htmlContent += '<div class="edit_button" dojoType="dijit.MenuItem" label="' + messages['edit'] + '" onclick="lconn.core.utilities.hide(\'' + widgetInstanceId + 'moreActions' + '\', true, true);_' + widgetInstanceId + '_iContext.iEvents.fireEvent(\'onModeChanged\',\'\',\'{\\\'newMode\\\':\\\'edit\\\'}\');"></div>';
            if (modes != null && modes.indexOf("view") != -1 && canPersonalize) htmlContent += '<div class="view_button" dojoType="dijit.MenuItem" label="' + messages['view'] + '" onclick="lconn.core.utilities.hide(\'' + widgetInstanceId + 'moreActions' + '\', true, true);_' + widgetInstanceId + '_iContext.iEvents.fireEvent(\'onModeChanged\',\'\',\'{\\\'newMode\\\':\\\'view\\\'}\');"></div>';
            if (substitutedHelpLink != null) htmlContent += '<div dojoType="dijit.MenuItem" label="' + messages['help'] + '" onclick="lconn.core.utilities.hide(\'' + widgetInstanceId + 'moreActions' + '\', true, true);lconn.core.WidgetPlacementMM.openHelpWindow(\'' + substitutedHelpLink + '\');"></div>';
            if (isOptionalWidget && canPersonalize) {
               var uiLocation = widgetInstanceNode.getAttribute("uiLocation");
               if (!fixedPosition) {
                  htmlContent += '<div class="moveup_button" dojoType="dijit.MenuItem" label="' + messages['widgets_MoveUp'] + '" onclick="lconn.core.WidgetPlacementMM.moveUp(\'' + widgetInstanceId + '\',\'' + uiLocation + '\');"></div>';
                  htmlContent += '<div class="movedown_button" dojoType="dijit.MenuItem" label="' + messages['widgets_MoveDown'] + '" onclick="lconn.core.WidgetPlacementMM.moveDown(\'' + widgetInstanceId + '\',\'' + uiLocation + '\');"></div>';
               }
               htmlContent += '<div dojoType="dijit.MenuItem" label="' + messages['hide'] + '" onclick="lconn.core.WidgetPlacementMM.removeWidget(\'' + widgetInstanceId + '\', false);"></div>';
               htmlContent += '<div dojoType="dijit.MenuItem" label="' + removeOrDeleteLabel + '" onclick="lconn.core.WidgetPlacementMM.removeWidget(\'' + widgetInstanceId + '\', true);"></div>';
            }
            htmlContent += '</div>';

            if (isMinimized != "true") {
               if (!WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired == "true") {
                  htmlContent += "<div id='" + webInstanceId + "SubArea' widgetloaded='false' widgetneedrefresh='false'>" + lcWidgets["msg.loginRequired"];
               } else {
                  //style='padding: 5px; margin-top: 15px'
                  htmlContent += "<div id='" + webInstanceId + "SubArea' widgetloaded='true' widgetneedrefresh='false'>";
                  attributesMap = getWidgetConfigAttrs(attributesMap, widgetDefinitionNode, widgetInstanceNode, widgetData);
                  htmlContent += AddiWidgetMicroformat(widgetInstanceId, url, displayedUserInfo, attributesMap, widgetMode, getEscapedWidgetName(widgetDefinitionNode, widgetInstanceNode));
               }
            } else {
               htmlContent += "<div id='" + webInstanceId + "SubArea' style='display: none;' widgetloaded='false'"; //padding: 5px; margin-top: 15px;
               if (!WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired == "true") {
                  htmlContent += " widgetneedrefresh='false' >" + lcWidgets["msg.loginRequired"];
               } else {
                  htmlContent += " widgetneedrefresh='true' >";
               }
            }

            htmlContent += "</div>"; //end subArea
            htmlContent += "</div>"; //end section";
         } else if (skinType == "skinless") {
            //style='min-width: 160px;'
            htmlContent = "<div id='" + webInstanceId + "Section'>";

            if (!WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired == "true") {
               htmlContent += "<div id='" + webInstanceId + "SubArea' widgetloaded='false' >";
               htmlContent += lcWidgets["msg.loginRequired"];
            } else {
               htmlContent += "<div id='" + webInstanceId + "SubArea' widgetloaded='true' >";
               attributesMap = getWidgetConfigAttrs(attributesMap, widgetDefinitionNode, widgetInstanceNode, widgetData);
               htmlContent += AddiWidgetMicroformat(widgetInstanceId, url, displayedUserInfo, attributesMap, widgetMode, getEscapedWidgetName(widgetDefinitionNode, widgetInstanceNode));
            }

            htmlContent += "</div>"; //end subArea
            htmlContent += "</div>"; //end section";
         }
         return htmlContent;
      };

   lconn.core.WidgetPlacementMM.openHelpWindow = function(url) {
      // Strip off lang parameter as launchHelp will add one
      var langPos = url.indexOf("&lang");
	  if (langPos > 0) {
	  	  url = url.substr(0, langPos);
      }
      lconn.core.help.launchHelp(url);
   };
    lconn.core.WidgetPlacementMM.checkWidgetLocation= function(widgetInstanceId, uiLocation){
	  var dropZoneNode = dojo.byId(uiLocation + "DropZone");

	  if (dropZoneNode){
		  var childNodes = dropZoneNode.childNodes;
		  for (var currentIndex = 0; currentIndex < childNodes.length; currentIndex++) {
			 var currentWidgetId = childNodes[currentIndex].getAttribute("widgetid");

			 if (childNodes.length == 1){
				return "alone";
			 }

			 if (currentWidgetId == widgetInstanceId) {
				if(currentIndex == 0){
					return "top";
				}
				else if (currentIndex >= childNodes.length - 1){
					return "bottom";
				}
				else{
					return "middle";
				}
			}

		}

	}
}
   lconn.core.WidgetPlacementMM.getUILocation = function(widgetInstanceId){
		var nav_item = dojo.byId(widgetInstanceId + "_navItem");
		if (nav_item){
			uiLocation = nav_item.getAttribute("uilocation");
			if(uiLocation){
				return uiLocation;
			}
		}
		else{
			var loadOrders = lconn.core.WidgetPlacement.loadOrder;

			for (var i =0; loadOrders && loadOrders.length > 0; i++){
				if (loadOrders[i] != null && loadOrders[i].instanceId == widgetInstanceId){
					return loadOrders[i].uiLocation;
				}
			}

		}
		return "";


   }
   lconn.core.WidgetPlacementMM.updateMoreActions = function(widgetInstanceId){

		//update move up and move down button
		var widgetsMoreActionID = widgetInstanceId + "moreActions"
		var uiLocation = lconn.core.WidgetPlacementMM.getUILocation(widgetInstanceId);
		if(uiLocation){
			var widgetLocation = lconn.core.WidgetPlacementMM.checkWidgetLocation(widgetInstanceId,uiLocation);
			if (widgetLocation){
				var moveup = dojo.query('#'+widgetsMoreActionID+'>tbody>tr.moveup_button');
				var movedown = dojo.query('#'+widgetsMoreActionID+'>tbody>tr.movedown_button');


				if(moveup && movedown){
					switch(widgetLocation){
						case 'alone':
							moveup.style('display','none');
							movedown.style('display','none');
							break;
						case 'top':
							moveup.style('display','none');
							movedown.removeAttr('style');
							movedown.style('-moz-user-select','none');

							break;
						case 'bottom':
							moveup.removeAttr('style');
							moveup.style('-moz-user-select','none');
							movedown.style('display','none');
							break;
						case 'middle':
							movedown.removeAttr('style');
							movedown.style('-moz-user-select','none');
							moveup.removeAttr('style');
							moveup.style('-moz-user-select','none');
							break;
						default:
							break;
					}
				}
			}
			var edit = dojo.query('#'+widgetsMoreActionID+'>tbody>tr.edit_button');
			var view = dojo.query('#'+widgetsMoreActionID+'>tbody>tr.view_button');
			var mm_widget = eval('(typeof(_'+ widgetInstanceId +'_iContext))');
			if (mm_widget == 'object'){
				if(edit && view){
					var mode = eval('_'+ widgetInstanceId +"_iContext.scope.iContext.getiDescriptor().getItemValue('mode')");
					switch(mode){
						case 'edit':
							view.removeAttr('style');
							edit.style('display','none');
							break;
						case 'view':
							edit.removeAttr('style');
							view.style('display','none');
							break;
					}
				}
			}
		}

		return;


   };
   lconn.core.WidgetPlacementMM.openMenu = function(event, widgetId, id) {
      var dojoWidgetId = widgetId + 'moreActions';
      var dojoWidget = dijit.byId(dojoWidgetId);
	  lconn.core.WidgetPlacementMM.updateMoreActions(widgetId);
      if (dojoWidget == null) {
         if (WidgetPlacementConfig.debug) console.log("lconn.core.WidgetPlacementMM.openMenu: dojoWidgetId '" + dojoWidgetId + "' don't have a dojoWidget instance, creating one");
         dojo.parser.parse((dojo.byId(dojoWidgetId).parentNode? dojo.byId(dojoWidgetId).parentNode : dojo.byId(dojoWidgetId)));
         dojoWidget = dijit.byId(dojoWidgetId);
      }

      if (dojoWidget != null) {
         if (id != null) {
            var elem = document.getElementById(id);
            if (elem != null) {
               dojo.attr(elem,'aria-expanded','true');
               dojo.attr(elem, "aria-owns", id + "_dropdown");
               var onCloseHandler = dojo.connect(dojoWidget, "onClose", function() {
                  dojo.attr(elem,'aria-expanded','false');
                  dojo.removeAttr(elem, "aria-owns");
                  dojo.disconnect(onCloseHandler);
               });
            }
         }
         menuUtility.openMenu(event, dojoWidgetId);
      } else if (WidgetPlacementConfig.debug) console.log("lconn.core.WidgetPlacementMM.openMenu: skipping open menu, can not find widget with id " + dojoWidgetId);
   };


   var loadNavItemsOnly = function(addToNavBarBoolean, canPersonalize, displayedUserInfo) {
         var loadContentFunction = function(response, ioArgs) {
               var data = response;
               WidgetPlacementConfig.widgetConfigXMLDocument = data;
               var exp1 = null;
               exp1 = "/tns:widgets/tns:layout/tns:page[@pageId='" + WidgetPlacementConfig.defaultPageId + "']/tns:widgetInstance";
               var nodes = lconn.core.xpath.selectNodes(exp1, data);
               if (typeof(nodes) != "undefined" && typeof(nodes.length) != "undefined") {
                  for (var i = 0; nodes.length != null && i < nodes.length; i++) {
                     var widgetInstanceNode = nodes[i];
                     var enabled = widgetInstanceNode.getAttribute("enabled");
                     if (enabled == null || enabled != "false") {
                        var defIdRef = widgetInstanceNode.getAttribute("defIdRef");
                        var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + defIdRef + "']";
                        var widgetDefinitionNode = lconn.core.xpath.selectSingleNode(exp3, data);

                        if (canAddWidget(widgetDefinitionNode, WidgetPlacementConfig, canPersonalize, widgetInstanceNode)) {
                           var navBarLinkText = widgetDefinitionNode.getAttribute("navBarLinkText");

                           var navBarLink = widgetDefinitionNode.getAttribute("navBarLink");
                           var selected = false;
                           if (WidgetPlacementConfig.NavBarSelectedMenuItem != null && WidgetPlacementConfig.NavBarSelectedMenuItem == defIdRef) {
                              selected = true;
                           }
                           addToNavBar(widgetDefinitionNode, widgetInstanceNode, displayedUserInfo, selected, navBarLink, false, navBarLinkText);
                        }
                     }
                  }
               }
            };

         var lotusNavBar = getNavBar();
         if (lotusNavBar != null) {
            try {
               new lconn.core.WidgetPlacementMM.aria.Toolbar(lotusNavBar.id);
            } catch (ee) {
               new lconn.core.aria.Toolbar(lotusNavBar.id);
            }
         }

         if (WidgetPlacementConfig.widgetConfigXMLDocument == null) dojo.xhrGet({
            url: WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + WidgetPlacementConfig.lastMod,
            error: lconn.core.errorhandling.DefaultXHRErrorHandler,
            handleAs: "xml",
            sync: true,
            load: loadContentFunction
         });
         else loadContentFunction(WidgetPlacementConfig.widgetConfigXMLDocument);
      }

      //** end of common private functions */

	  // Returns widget nodes sorted by column number so that col2 widgets appear first in the node array.
	  // Needed because XMl nodes have 'col2' and 'col3' widgets listed in sorted order, it may have 'col2' and 'col3' widgets intermixed.
	  //
	  lconn.core.WidgetPlacementMM.sortWidgetNodes = function(nodes) {
		var col2Widgets = new Array();
		var col3Widgets = new Array();
		var result = new Array();

		for (var i=0; i<nodes.length; i++) {
			var n = nodes[i];
			var uiLoc = n.getAttribute("uiLocation");
			if (uiLoc == "col2") {
				col2Widgets.push(n);
			}
			else if (uiLoc == "col3") {
			// Member widget is in column3, but is fixed so put it at the start of the result array.
				if (n.getAttribute("defIdRef") != "Members") {
					col3Widgets.push(n);
				}
				else { // Members widget
					result.push(n);
				}
			}
			else {
				result.push(n);
			}
		}
		for (var i=0; i<col2Widgets.length; i++) {
			result.push(col2Widgets[i]);
		}
		for (var i=0; i<col3Widgets.length; i++) {
			result.push(col3Widgets[i]);
		}
		return(result);
	  };

      lconn.core.WidgetPlacementMM.placeWidgetMetadata = function(addToNavBarBoolean) {
         lconn.core.WidgetPlacementMM.initialLoad = true;
         //fix for SPR DJOS7UNT5B
         if (dojo.dnd != null && lconn.dboard && lconn.dboard.dnd) // fix for SPR JMGE7XESJJ
         lconn.dboard.dnd.Source.prototype.onSelectStart = function() {};

         //** internal functions */
         var addAllWidgets = function(pageId, displayedUserInfo, data, canPersonalize, addToNavBarBoolean) {
               var widgetContainer = null;
               var htmlContentArray = new Object();

               try {
                  var exp = null;
                  var exp1 = null;
                  var exp2 = null;
                  var nodes = null;

                  if (WidgetPlacementConfig.isProfilesEnv) {
                     var profileType = (displayedUserInfo && typeof(displayedUserInfo.profileType) == "string" && dojo.trim(displayedUserInfo.profileType).length > 0 ? displayedUserInfo.profileType : "default");
                     exp1 = "/tns:widgets/tns:layout[@resourceSubType='" + profileType + "']/tns:page[@pageId='" + pageId + "']/tns:widgetInstance";
                     exp2 = "/tns:widgets/tns:layout[@resourceSubType='default']/tns:page[@pageId='" + pageId + "']/tns:widgetInstance";
                     nodes = lconn.core.xpath.selectNodes(exp1, data);
                     if (nodes == null || !nodes.length) { // fall back to default layout when there is no layout for current profile type
                        nodes = lconn.core.xpath.selectNodes(exp2, data);
                        if (WidgetPlacementConfig.debug) console.log("\nNo widget layout for profile type [" + profileType + "] defined.  Falling back to default layout.");
                     }
                  } else {
                     exp1 = "/tns:widgets/tns:layout/tns:page[@pageId='" + pageId + "']/tns:widgetInstance";
                     nodes = lconn.core.xpath.selectNodes(exp1, data);
					 nodes = lconn.core.WidgetPlacementMM.sortWidgetNodes(nodes);
                  }


                  var uiContent = "";
                  if (typeof(nodes) != "undefined" && typeof(nodes.length) != "undefined") {
                     for (var i = 0; nodes.length != null && i < nodes.length; i++) {
                        var widgetInstanceNode = nodes[i];
                        var defIdRef = widgetInstanceNode.getAttribute("defIdRef");
                        var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + defIdRef + "']";
                        var widgetDefinitionNode = lconn.core.xpath.selectSingleNode(exp3, data);

                        if (canAddWidget(widgetDefinitionNode, WidgetPlacementConfig, canPersonalize, widgetInstanceNode)) {
                           var skinType = widgetDefinitionNode.getAttribute("skinType");
                           var uiLocation = widgetInstanceNode.getAttribute("uiLocation");
                           if (htmlContentArray[uiLocation] == null) htmlContentArray[uiLocation] = "";

                           var instanceId = widgetInstanceNode.getAttribute("instanceId");
                           if (instanceId != null && htmlContentArray[uiLocation + "dnd"] == null && canPersonalize) {
                              htmlContentArray[uiLocation] += '<div style="display: inline" id="' + uiLocation + 'DropZone" class="target">';
                              htmlContentArray[uiLocation + "dnd"] = true;
                           }

                           if (instanceId == null) instanceId = defIdRef;

                           if (lconn.core.WidgetPlacementMM.loadOrder == null) lconn.core.WidgetPlacementMM.loadOrder = new Array();

                           lconn.core.WidgetPlacementMM.loadOrder[lconn.core.WidgetPlacementMM.loadOrder.length] = {
                              instanceId: instanceId,
                              uiLocation: uiLocation
                           };
                           htmlContentArray[uiLocation] += GetCompleteWidgetHTMLContent(widgetDefinitionNode, widgetInstanceNode, displayedUserInfo, data, canPersonalize, skinType, null, addToNavBarBoolean);
                           lconn.core.WidgetPlacementMM.uiLocations[uiLocation] = true;
                        }
                     }
                  }

                  for (uiLocation in htmlContentArray) {
                     var tempWidgContElem = dojo.byId("widget-container-" + uiLocation);
                     if (tempWidgContElem != null) {
                        var temp = (htmlContentArray[uiLocation + "dnd"] == true ? "</div>" : "");
                        tempWidgContElem.innerHTML = htmlContentArray[uiLocation] + temp;
                     }
                  }

                  if (typeof(nodes) != "undefined" && typeof(nodes.length) != "undefined") {
                     for (var i = 0; nodes.length != null && i < nodes.length; i++) {
                        var menuId = "widgetActionsMenu" + nodes[i].getAttribute("instanceId");
                        var widgetMenu = dojo.byId(menuId);
                        if (widgetMenu != null) {
                            dojo.attr(widgetMenu, 'aria-expanded', 'false');
                        }
                     }
                  }
               } catch (exception) {
                  lconn.core.errorhandling.DefaultErrorHandler("lconn.core.WidgetPlacementMM.addAllWidgets", exception);
               }
            };

         var loadContentFunction = function(response, ioArgs) {
               var widgetData = response;
               WidgetPlacementConfig.widgetConfigXMLDocument = widgetData;
               if (WidgetPlacementConfig.pageId == "fullPageWidgetView") {
                  try {
                     var displayedUserInfo = ioArgs.args.displayedUserInfo;
                     var widgetContainer = dojo.byId("widgetContainer");
                     if (widgetContainer == null) widgetContainer = dojo.byId("widget-container-fullpage");
                     var widgetId = common_getParam("widgetId");
                     var widgetDef = lconn.core.xpath.selectSingleNode("/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + widgetId + "']", widgetData);
                     var url = widgetDef.getAttribute("url");
                     addToNavBar(widgetDef, null, displayedUserInfo, null, null, true, null);

                     var attributesMap = [{
                        entryName: "state",
                        entryValue: "maximize"
                     }];
                     attributesMap = getWidgetConfigAttrs(attributesMap, widgetDef, null, widgetData);
                     widgetContainer.innerHTML = AddiWidgetMicroformat(widgetId, url, displayedUserInfo, attributesMap, "fullpage");

                     if (lconn.core.WidgetPlacementMM.loadOrder == null) lconn.core.WidgetPlacementMM.loadOrder = new Array();

                     lconn.core.WidgetPlacementMM.loadOrder[lconn.core.WidgetPlacementMM.loadOrder.length] = {
                        instanceId: widgetId,
                        uiLocation: "fullpage"
                     };

                  } catch (exception) {
                     lconn.core.errorhandling.DefaultErrorHandler("WidgetMgmt.loadWidgets", exception, "widgetContainer");
                  }
               } else {
                  var displayedUserInfo = ioArgs.args.displayedUserInfo;
                  addAllWidgets(WidgetPlacementConfig.pageId, displayedUserInfo, widgetData, canPersonalize, ioArgs.args.addToNavBarBoolean);
               }
            }; /** end of internal functions */

         //lconn.core.xpath.debug = true;
         //lconn.core.WidgetPlacementMM.debug = false;
         var displayedUserInfo = null;
         var canPersonalize = null;

         if (WidgetPlacementConfig.pageId == null) {
            if (addToNavBarBoolean != false) {
               if (canPersonalize == null) canPersonalize = getUserProfileOverrideProperty("canPersonalize") == "true";

               if (displayedUserInfo == null) displayedUserInfo = getDisplayedUserInfo();

               loadNavItemsOnly(addToNavBarBoolean, canPersonalize, displayedUserInfo);
            }
            return;
         }

         if (canPersonalize == null) canPersonalize = getUserProfileOverrideProperty("canPersonalize") == "true";

         if (displayedUserInfo == null) displayedUserInfo = getDisplayedUserInfo();

         if (WidgetPlacementConfig.debug) console.info("Using URL:" + WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + WidgetPlacementConfig.lastMod);

         if (WidgetPlacementConfig.widgetConfigXMLDocument == null) dojo.xhrGet({
            addToNavBarBoolean: addToNavBarBoolean,
            displayedUserInfo: displayedUserInfo,
            url: WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + WidgetPlacementConfig.lastMod,
            error: lconn.core.errorhandling.DefaultXHRErrorHandler,
            handleAs: "xml",
            sync: true,
            load: loadContentFunction
         });
         else loadContentFunction(WidgetPlacementConfig.widgetConfigXMLDocument, {
            args: {
               addToNavBarBoolean: addToNavBarBoolean,
               displayedUserInfo: displayedUserInfo
            }
         });

         if (dojo.dnd != null) {
            var manager = dojo.dnd.manager();

            manager.makeAvatar = function() {
               return new lconn.dboard.dnd.avatar(this);
            };

            dojo.subscribe("/dnd/drop", lconn.core.WidgetPlacementMM.onDropHandler);
            dojo.subscribe("/dnd/start", function(source, nodes, iscopy) {
               for (var i = 0; i < nodes.length; i++) {
                  lconn.core.utilities.hide(nodes[i], false, true);
                  lconn.core.WidgetPlacementMM.currentNode = nodes[i];
               }
            });
            dojo.subscribe("/dnd/cancel", function() {
               if (lconn.core.WidgetPlacementMM.currentNode != null) {
                  lconn.core.utilities.show(lconn.core.WidgetPlacementMM.currentNode, false, false, true);
                  lconn.core.WidgetPlacementMM.currentNode = null;
               }
            });
         }

         var parseAllWidgets = function() {
               var parseArea = dojo.byId("lotusFrame");
               if (parseArea == null) {
                  var frameDivs = dojo.query(".lotusFrame");
                  if (frameDivs != null && frameDivs.length > 0) {
                     parseArea = frameDivs[0];
                  } else {
                     parseArea = document.body;
                  }
               }
               dojo.parser.parse(parseArea);
            };
         setTimeout(parseAllWidgets, 2000);

         if (dojo.dnd != null) {
            var createAllDropzones = function() {
                  for (uiLocation in lconn.core.WidgetPlacementMM.uiLocations) {
                     var dropZoneDOMId = uiLocation + "DropZone";
                     var dropZone = dojo.byId(dropZoneDOMId);
                     if (dropZone != null) {
                        var dropZoneObject = createDropZoneObject(uiLocation, dropZone);
                        lconn.core.WidgetPlacementMM.dropZoneObjects[dropZoneDOMId] = dropZoneObject;
                     }
                  }
               };
            setTimeout(createAllDropzones, 2000);
         }

         lconn.core.WidgetPlacementMM.initialLoad = false;

      };

   lconn.core.WidgetPlacementMM.onDropHandler = function(source, nodes, iscopy) {
      var target = dojo.dnd.manager().target;
      var currentNode = null
      for (var i = 0; i < nodes.length; i++) {
         currentNode = nodes[i];
         lconn.core.utilities.show(currentNode, false, false, true);
         break;
      }

      if (lconn.core.WidgetPlacementMM.currentNode != null) {
         lconn.core.utilities.show(lconn.core.WidgetPlacementMM.currentNode, false, false, true);
         lconn.core.WidgetPlacementMM.currentNode = null;
      }

      var saveMove = function() {
            var childNodes = target.getAllNodes();
            for (var i = 0; i < childNodes.length; i++) {
               var widgetId = currentNode.getAttribute("widgetId");
               if (childNodes[i].getAttribute("widgetId") == widgetId) {
                  var previousId = null;
                  if (i == 0) previousId = null;
                  else previousId = childNodes[i - 1].getAttribute("widgetId");

                  moveWidgetTemp(widgetId, target.jsId, previousId, target, source);

                  break;
               }
            }
         };
      setTimeout(saveMove, 300);
   };

   //
   // Returns widget instance id to use as previous id for widgets moved to top of column 3
   //
   lconn.core.WidgetPlacementMM.getColumn3Anchor = function() {
	// Returns widget instance id to use as previous id for widgets moved to top of column 3
		var anchor = null;
      var col2Nodes = lconn.core.WidgetPlacement.getColumnWidgetNodes("col2");
      if (col2Nodes.length > 0) {
         anchor = col2Nodes[col2Nodes.length - 1].getAttribute("widgetId");
      }
      return (anchor);
   };

   // Returns widget instance id to use as previous id for widgets moved to top of column 2
   //
   lconn.core.WidgetPlacementMM.getColumn2Anchor = function() {
      return ("top");
   };


   var moveWidgetTemp = function(widgetId, newUILocation, previousWidgetId, target, source) {
         var dataUrl = WidgetPlacementConfig.applicationContext + "/moveWidget.do?resourceId=" + WidgetPlacementConfig.resourceId + "&widgetInstanceId=" + widgetId + "&newUiLocation=" + newUILocation;

         // Adjusts the id of the previous widget to use to place a widget.
         // Accounts for moving to beginning of column3, and useing last widget in column 2 as previous for that case
         // so navigator keeps column 3 widgets after column 2 widgets.
         //
         if (previousWidgetId == null) {
            previousWidgetId = lconn.core.WidgetPlacementMM.getColumn2Anchor();
            if (newUILocation == "col3") {
               previousWidgetId = lconn.core.WidgetPlacementMM.getColumn3Anchor();
            }
         }

         if (previousWidgetId != null) dataUrl += "&afterWidgetInstanceId=" + previousWidgetId;

         dojo.xhrPost({
            url: dataUrl,
            handleAs: "xml",
            load: function(resp, ioArgs) {
               var timestamp = new Date().getTime();
               WidgetPlacementConfig.lastMod = timestamp;
               //dojo.xhrGet({url: WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + timestamp, error: lconn.core.errorhandling.DefaultXHRErrorHandler});//prime the cache
               if (target != null && source != null && target != source) lconn.core.WidgetPlacementMM.refresh(widgetId);
            },
            error: lconn.core.errorhandling.DefaultXHRErrorHandler
         });
      }

	lconn.core.WidgetPlacementMM.unhideWidget = function(widgetId) {
		dojo.query("[widgetid='" + widgetId + "']").forEach(function(node){
			if (dojo.hasClass(node, "lotusHidden")) {
				dojo.removeClass(node, "lotusHidden");
			}
		});
	};

   lconn.core.WidgetPlacementMM.renderWidgets = function() {
      //livetextService._loadTags();
      if (lconn.core.WidgetPlacementMM.loadOrder != null) {
         for (var i = 0; i < lconn.core.WidgetPlacementMM.loadOrder.length; i++)
         //for (var i = lconn.core.WidgetPlacementMM.loadOrder.length; i != null && i > 0; i--)
         {
            var NodeId = lconn.core.WidgetPlacementMM.loadOrder[i];
            if (NodeId != null) {
               lconn.core.mumOverride.renderSingleWidget(NodeId.instanceId);

               // SPR#SUNN87HSRR - display the hidden widget containers when widgets are added to it
               if (NodeId.uiLocation == "col3" && dojo.byId("profilePaneRight") != null && dojo.hasClass("profilePaneRight", "lotusHidden")) dojo.removeClass("profilePaneRight", "lotusHidden");
               else if (NodeId.uiLocation == "col1" && dojo.byId("profilePaneLeft") != null && dojo.hasClass("profilePaneLeft", "lotusHidden")) dojo.removeClass("profilePaneLeft", "lotusHidden");
            }
         }
      }
   };

   lconn.core.WidgetPlacementMM.loadWidgetFullPage = function(widgetId, additionalParameters) {
/*
      var url = WidgetPlacementConfig.fullPageContainerUrl + widgetId;

      for (var i = 0; additionalParameters != null && i < additionalParameters.length; i++)
         url += "&" + additionalParameters[i].name + "=" + additionalParameters[i].value;

      lconn.core.utilities.gotoURL(url);
      */
      lconn.core.WidgetPlacementMM.loadFullpageView(widgetId, additionalParameters, true, true);
   };

   lconn.core.WidgetPlacementMM.loadFullpageView = function(instanceId, additionalParameters, addState, overrideOverViewLink, dontRegisterCloseView) {
      var exp4 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" + instanceId + "']";
      var widgetInstanceNode = lconn.core.xpath.selectSingleNode(exp4, WidgetPlacementConfig.widgetConfigXMLDocument);
      var defIdRef = null;
      if (widgetInstanceNode != null) defIdRef = widgetInstanceNode.getAttribute("defIdRef");
      else defIdRef = instanceId;
      var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + defIdRef + "']";
      var widgetDefinitionNode = lconn.core.xpath.selectSingleNode(exp3, WidgetPlacementConfig.widgetConfigXMLDocument);
      if (additionalParameters == null) additionalParameters = [{
         name: "resourceId",
         value: WidgetPlacementConfig.resourceId
      }];
      else additionalParameters[additionalParameters.length] = {
         name: "resourceId",
         value: WidgetPlacementConfig.resourceId
      }

      switchView(widgetDefinitionNode, instanceId, additionalParameters, overrideOverViewLink, addState);
   }

   lconn.core.WidgetPlacementMM.reloadOverviewPage = function() {
      closeOtherViews();
      if (WidgetPlacementConfig.debug) console.log("lconn.core.WidgetPlacementMM.reloadOverviewPage called");

      //remove references to fullpage widget
      if (lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId != null) {
         lconn.core.WidgetPlacementMM.destroyWidget(lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId, null, false, true);
         lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId = null;
      }

      if (lconn.core.WidgetPlacementMM.onlyFullPageWidgetLoaded) {
         lconn.core.WidgetPlacementMM.placeWidgetMetadata(false);
         lconn.core.WidgetPlacementMM.renderWidgets();
         lconn.core.WidgetPlacementMM.onlyFullPageWidgetLoaded = false;
      }

      if (WidgetPlacementConfig.hideElements != null) for (var i = 0; WidgetPlacementConfig.hideElements != null && i < WidgetPlacementConfig.hideElements.length; i++) {
         lconn.core.utilities.show(WidgetPlacementConfig.hideElements[i], false, false, true);

         try {
            dijit.byId(WidgetPlacementConfig.hideElements[i]).show();
         } catch (exception1) {
            //do nothing
         }
      }

      destroyWidgetContainer("fullpage");

      //lconn.core.WidgetPlacementMM.placeWidgetMetadata(false);
      //livetextService.parseDom();
      for (uiLocation in lconn.core.WidgetPlacementMM.uiLocations) {
         lconn.core.utilities.show("widget-container-" + uiLocation, false, false, true);
      }

      highlightOverviewLink()

      for (var i = 0; lconn.core.WidgetPlacementMM.loadOrder != null && i < lconn.core.WidgetPlacementMM.loadOrder.length; i++) {
         var NodeId = lconn.core.WidgetPlacementMM.loadOrder[i];
         if (NodeId != null) lconn.core.WidgetPlacementMM.refresh(NodeId.instanceId);
      }
      return false;
   };
   lconn.core.WidgetPlacementMM.getWidgetDefId = function(instanceId,widgetDataDoc){
		var widgetData = null;
		if (widgetDataDoc == null) widgetData = WidgetPlacementConfig.widgetConfigXMLDocument;
		else widgetData = widgetDataDoc;
		var exp4 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" + instanceId + "']";
        var widgetInstanceNode = lconn.core.xpath.selectSingleNode(exp4, widgetData);
		var widgetInstanceNode = lconn.core.xpath.selectSingleNode(exp4, widgetData);
		var defIdRef = null;
		var widgetName = null;
		if (widgetInstanceNode != null) {
		 defIdRef = widgetInstanceNode.getAttribute("defIdRef");
		} else defIdRef = instanceId;

		return defIdRef;
   }

   lconn.core.WidgetPlacementMM.refresh = function(instanceId, widgetDataDoc, grabFocus) {
      lconn.core.utilities.hide(instanceId + 'moreActions', true, true);
      lconn.core.WidgetPlacementMM.destroyWidget(instanceId, null, false);
      var widgetData = null;
      if (widgetDataDoc == null) widgetData = WidgetPlacementConfig.widgetConfigXMLDocument;
      else widgetData = widgetDataDoc;
      var exp4 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" + instanceId + "']";
      var widgetInstanceNode = lconn.core.xpath.selectSingleNode(exp4, widgetData);
      var defIdRef = null;
      var widgetName = null;
      if (widgetInstanceNode != null) {
         defIdRef = widgetInstanceNode.getAttribute("defIdRef");
         widgetName = getWidgetName(widgetDefinitionNode, widgetInstanceNode)
      } else defIdRef = instanceId;
      var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + defIdRef + "']";
      var widgetDefinitionNode = lconn.core.xpath.selectSingleNode(exp3, WidgetPlacementConfig.widgetConfigXMLDocument);
      var attributesMap = getWidgetConfigAttrs(null, widgetDefinitionNode, widgetInstanceNode, widgetData);
      var tempdsdifosdifsdf = dojo.byId(instanceId + "SubArea");
      if (tempdsdifosdifsdf != null) {
         tempdsdifosdifsdf.innerHTML = AddiWidgetMicroformat(instanceId, widgetDefinitionNode.getAttribute("url"), getDisplayedUserInfo(), attributesMap, "view", widgetName);
         tempdsdifosdifsdf.setAttribute("widgetloaded", "true");
      }
      if (window.refreshInfoHolder == null) window.refreshInfoHolder = {};

      window.refreshInfoHolder[instanceId] = true;
      lconn.core.mumOverride.renderSingleWidget(instanceId);

      if (widgetName) {
         var dndSpan = dojo.byId(instanceId + 'Id');
         if (dndSpan) {
            if (dndSpan.textContent) {
               dndSpan.textContent = widgetName;
            } else {
               dndSpan.innerText = widgetName;
            }
         }

         var navItem = dojo.byId(instanceId + "_navItem");
         if (navItem) {
            var navLink = navItem.children[0];
            if (navLink.textContent) {
               navLink.textContent = widgetName;
            } else {
               navLink.innerText = widgetName;
            }
         }
      }

      setTimeout(function() {
         window.refreshInfoHolder[instanceId] = null;
      }, 2000);

	  if (grabFocus) {
        window.setTimeout("lconn.core.WidgetPlacementMM.setFocus('" + instanceId + "', 'widgetActionsMenu" + instanceId + "');", 0);
	  }

   }
	lconn.core.WidgetPlacementMM.refreshTitleAndMicroformat = function(instanceId, widgetData, objectArray)
	{
	   var exp4 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '"+instanceId+"']";
	   var widgetInstanceNode = lconn.core.xpath.selectSingleNode(exp4,widgetData);
	   var defIdRef = null;
	   var widgetName = null;
	   if(widgetInstanceNode != null) {
	      defIdRef = widgetInstanceNode.getAttribute("defIdRef");
	      widgetName = getWidgetName(widgetDefinitionNode, widgetInstanceNode)
	   } else
	      defIdRef = instanceId;
	   var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '"+defIdRef+"']";
	   var widgetDefinitionNode = lconn.core.xpath.selectSingleNode(exp3,WidgetPlacementConfig.widgetConfigXMLDocument);
	   getWidgetConfigAttrs(null, widgetDefinitionNode, widgetInstanceNode, widgetData);

       // _saveMicroformat leaves a span of attributes with old values - get rid of it here
       dojo.query('div#' + instanceId + ' > span[title="attributes"]').orphan();

	   if (widgetName) {
		  if (!objectArray["computedWidgetTitle"])
			  objectArray["computedWidgetTitle"] = new Object();
	      objectArray["computedWidgetTitle"].value=widgetName;

  	      var dndSpan = dojo.byId(instanceId +'Id');
	      if (dndSpan) {
	    	if (dndSpan.textContent) {
  	          dndSpan.textContent = widgetName;
	    	} else {
	  	      dndSpan.innerText = widgetName;
	    	}
	      }

	      var navItem = dojo.byId(instanceId + "_navItem");
	      if (navItem) {
	    	var navLink = navItem.children[0];
		    if (navLink.textContent) {
 	          navLink.textContent = widgetName;
   	        } else {
   		      navLink.innerText = widgetName;
  	        }
         }
	   }
	}


   lconn.core.WidgetPlacementMM.fetchAndRefresh = function(instanceId) {

		var temp = function(response, ioArgs)
		{
			lconn.core.WidgetPlacementMM.refresh(instanceId, response);
		};

		dojo.xhrGet(
		{
		url: WidgetPlacementConfig.layoutInfoUrl,
		error: lconn.core.errorhandling.DefaultXHRErrorHandler,
		handleAs: "xml", sync: true,
		load: temp
		});
   }


   lconn.core.WidgetPlacementMM.moveDown = function(widgetInstanceId, uiLocation) {
      var dropZoneNode = dojo.byId(uiLocation + "DropZone");

      var childNodes = dropZoneNode.childNodes;
      for (var currentIndex = 0; currentIndex < childNodes.length; currentIndex++) {
         var currentWidgetId = childNodes[currentIndex].getAttribute("widgetid");

         if (currentWidgetId == widgetInstanceId) {
            var calculatedIndex = currentIndex + 1;

            if (calculatedIndex > childNodes.length) calculatedIndex = childNodes.length - 1;

            if (calculatedIndex == childNodes.length) // we cannot move the last item on the list
            break;

            var previousId = childNodes[calculatedIndex].getAttribute("widgetid");

            moveWidgetTemp(widgetInstanceId, uiLocation, previousId);
            try {
               dropZoneNode.insertBefore(childNodes[currentIndex], childNodes[calculatedIndex + 1]);
            } catch (exception) {
               //IE issue
               dropZoneNode.appendChild(childNodes[currentIndex]);
            }
            break;
         }
      }
      lconn.core.utilities.hide(widgetInstanceId + 'moreActions', true, true);
      var actionBar = dojo.byId('widgetActionsMenu' + widgetInstanceId);
      if (actionBar != null) actionBar.focus();

   }
   lconn.core.WidgetPlacementMM.moveUp = function(widgetInstanceId, uiLocation) {
      var dropZoneNode = dojo.byId(uiLocation + "DropZone");

      var childNodes = dropZoneNode.childNodes;
      for (var currentIndex = 0; currentIndex < childNodes.length; currentIndex++) {
         var currentWidgetId = childNodes[currentIndex].getAttribute("widgetid");

         if (currentWidgetId == widgetInstanceId) {
            if (currentIndex == 0) // we cannot move the first item on the list
            break;

            var calculatedIndex = currentIndex - 1;

            var previousId = null;

            if (calculatedIndex != 0) previousId = childNodes[calculatedIndex - 1].getAttribute("widgetid");

            moveWidgetTemp(widgetInstanceId, uiLocation, previousId);
            dropZoneNode.insertBefore(childNodes[currentIndex], childNodes[calculatedIndex]);
            break;
         }
      }
      lconn.core.utilities.hide(widgetInstanceId + 'moreActions', true, true);
      var actionBar = dojo.byId('widgetActionsMenu' + widgetInstanceId);
      if (actionBar != null) actionBar.focus();

   }

   var getDialog = function() {
         if (window.dialog1 == null) {
            var dialog1Container = document.getElementById("dialog1Container");
            if (dialog1Container == null) {
               dialog1Container = document.createElement("div");
               dialog1Container.id = "dialog1Container";
               dojo.byId("lotusContent").appendChild(dialog1Container);
            }
            //id: "dialog1",refocus:false
            window.dialog1 = new dijit.Dialog({
               id: "dialog1",
               style: "width: 500px"
            }, dialog1Container);
         }
         return window.dialog1;
      }

/*
    * @deprecated This method will be removed in 4.0 with a different dialog method
    */
      lconn.core.WidgetPlacementMM.displayDialog = function(dialogContent) {
         var dialog1 = getDialog();
         dialog1.setContent(dialogContent);

         try {
            dialog1.titleBar.style.display = "none";
         } catch (error1) {
            console.log(error1);
         }

         dialog1.show();
         var dialog1Button = dojo.byId("dialog1.button");
         if (dialog1Button != null) dialog1Button.focus();
         //alert("displayDialog");
      }

      // Returns NodeList - one for each widget in column, in the order of their display.
      // column = "col2" or "col3"
      //
      lconn.core.WidgetPlacementMM.getColumnWidgetNodes = function(column) {
         var widgetContainerId = "col2Wrapper";
         if (column == "col3") {
            widgetContainerId = "widget-container-col3";
         }
         return (dojo.query(".lotusWidget2", dojo.byId(widgetContainerId)));
      };

   // Move widget to end of widget list in column 2
   //
   lconn.core.WidgetPlacementMM.moveWidgetToEnd = function(widgetInstanceId, column) {
      var widgetNodes = lconn.core.WidgetPlacementMM.getColumnWidgetNodes(column);
      if (widgetNodes.length > 0) {
         var lastWidgetId = dojo.attr(widgetNodes[widgetNodes.length - 1], "widgetid");
         if (lastWidgetId != widgetInstanceId) { // If it's not the last widget in the UI, move it after the current last widget
            moveWidgetTemp(widgetInstanceId, column, lastWidgetId, null, null);
         } else { // Widget is last one in UI, but we need to ensure the DB is updated to reflect that
            if (widgetNodes.length > 1) {
               lastWidgetId = dojo.attr(widgetNodes[widgetNodes.length - 2], "widgetid");
               moveWidgetTemp(widgetInstanceId, column, lastWidgetId, null, null);
            }
         }
      }
   };

   // Returns true iff the widget should show the full delete confirmation dialogue.
   //
   lconn.core.WidgetPlacementMM.showFullWidgetDeleteConfirmation = function(defId) {
	var result = true;
	var nodes = lconn.core.xpath.selectNodes("/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + defId + "']", dojo.global.WidgetPlacementConfig.widgetConfigXMLDocument);
	if (nodes != null) {
		var showFullWidgetDeleteConfirmation = nodes[0].getAttribute("showFullWidgetDeleteConfirmation");
		if (showFullWidgetDeleteConfirmation == "false") {
			result = false;
		}
	}

	return(result);
   };



   lconn.core.WidgetPlacementMM.removeWidget = function(widgetInstanceId, removeWidgetData, prompt) {
      if (WidgetPlacementConfig.debug) console.log("lconn.core.WidgetPlacementMM.removeWidget: widgetInstanceId=" + widgetInstanceId + ", removeWidgetData=" + removeWidgetData + ", prompt=" + prompt);

      var exp1 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" + widgetInstanceId + "']";
      var widgetInstanceNode = lconn.core.xpath.selectSingleNode(exp1, WidgetPlacementConfig.widgetConfigXMLDocument);

      if (widgetInstanceNode != null) {
         // If removing the files widget, make sure the media gallery widget is not present
         if (removeWidgetData == true) {
            var delDefId = widgetInstanceNode.getAttribute("defIdRef");
            if (delDefId == "Files") {
               var exp2 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@defIdRef = 'MediaGallery']";
               var mediaInstanceNode = lconn.core.xpath.selectSingleNode(exp2, WidgetPlacementConfig.widgetConfigXMLDocument);

               if (mediaInstanceNode != null) {
                  console.log("lconn.core.WidgetPlacementMM.removeWidget: Skipping removal of Files widget since MediaGallery widget is present.");
                  return;
               }
            }
         }
      } else {
         console.log("lconn.core.WidgetPlacementMM.removeWidget: Unable to find widget instance for instanceId = " + widgetInstanceId);
      }

      if (prompt == null) {
         var stringContent = null;

         if (removeWidgetData == true) {
            // Show simple confirmation dialog for sub-community widget.
            //
			var defId = widgetInstanceNode.getAttribute("defIdRef");

            if (defId == "FeaturedSurvey" || defId == "LinkedQuickrCommunityLib" || (lconn.core.WidgetPlacementMM.showFullWidgetDeleteConfirmation(defId) == false)) {
               var deleteWidgetFunction = dojo.partial(deleteWidgetCallback, widgetInstanceId);
               lconn.core.DialogUtil.prompt(messages["deleteWidget"], messages["confirmDeleteWidget"], coreMessages["rs_ok"], messages["cancel"], deleteWidgetFunction, null);
            } else {
               // Show delete or hide confirmation dialog with callback.
               //
               var deleteWidgetFunction = dojo.partial(deleteOrHideWidgetCallback, widgetInstanceId);
               var dlg = new lconn.communities.bizCard.dialogs.deleteConfirmWidget({
                  "communityTitle": widgetInstanceNode.getAttribute("title"),
                  "callback": deleteWidgetFunction,
                  "userName": communityActionData.userName
               });
               lconn.core.WidgetPlacementMM.removeWidgetInProgress = true;
               dlg.show();
            }
         } else {
            stringContent = '<div class="lotusDialogBorder"><form class="lotusDialog lotusForm" onSubmit="return false;" role="dialog" aria-labelledby="hideTitle" aria-describedby="hideContent">' + '<div class="lotusDialogHeader">' + '  <h1 id="hideTitle" class="lotusHeading">' + messages['hideWidget'] + '</h1>' + '  <a title="' + messages['close'] + '" role="button" class="lotusRight lotusDialogClose" href="javascript:;" onclick="dijit.byId(\'dialog1\').hide();">' + '    <img src="' + dijit._Widget.prototype._blankGif + '" role="presentation" alt="' + messages['close'] + '" />' + '    <span class="lotusAltText">X</span>' + '  </a>' + '</div>' + '<div class="lotusDialogContent" id="hideContent">' + messages['hideWidgetMsg'] + '</div><!--end lotusDialogContent-->' + '<div class="lotusDialogFooter">' + '  <input id="dialog1.button" value="' + messages['hide'] + '" class="lotusFormButton" type="button" onclick="dijit.byId(\'dialog1\').hide();lconn.core.WidgetPlacementMM.removeWidget(\'' + widgetInstanceId + '\', ' + removeWidgetData + ', false)" />' + '  <input value="' + messages['cancel'] + '" class="lotusFormButton" type="button" onclick="dijit.byId(\'dialog1\').hide();" />' + '</div>' + '</form></div>';
            lconn.core.WidgetPlacementMM.displayDialog(stringContent);
         }
         lconn.core.WidgetPlacementMM.removeWidgetInProgress = false;
      } else {
         if (lconn.core.WidgetPlacementMM.removeWidgetInProgress == false) {
            if (removeWidgetData == true) showRemoveWidgetDialog();
            lconn.core.WidgetPlacementMM.removeWidgetInProgress = true;
            var dataUrl = WidgetPlacementConfig.applicationContext + "/removeWidget.do?resourceId=" + WidgetPlacementConfig.resourceId + "&widgetInstanceId=" + widgetInstanceId + "&removeWidgetData=" + removeWidgetData;
            dojo.xhrPost({
               url: dataUrl,
               handleAs: "xml",
               headers: {'X-Update-Nonce': window.dangerousurlnonce},
               load: function(resp, ioArgs) {
                  lconn.core.WidgetPlacementMM.removeWidgetInProgress = false;
                  for (var i = 0; lconn.core.WidgetPlacementMM.loadOrder != null && i < lconn.core.WidgetPlacementMM.loadOrder.length; i++) {
                     var NodeId = lconn.core.WidgetPlacementMM.loadOrder[i];
                     if (NodeId != null && NodeId.instanceId == widgetInstanceId) {

                        delete lconn.core.WidgetPlacementMM.loadOrder[i];



                     }
                  }

                  var htmlId = widgetInstanceId + "Section";
                  /**
                   dojo.fx.fadeOut({node: htmlId, duration: 500,
                   onEnd: function(){
                   var htmlElement = dojo.byId(htmlId);
                   htmlElement.parentNode.removeChild(htmlElement);
                   }
                   });
                   */

                  var temp380923 = function() {
                        var htmlElement = dojo.byId(htmlId);
                        htmlElement.parentNode.removeChild(htmlElement);
                        var timestamp = new Date().getTime();
                        WidgetPlacementConfig.lastMod = timestamp;
                        var tempLoad = function(resp, ioArgs) {
                              WidgetPlacementConfig.widgetConfigXMLDocument = resp;
                              if (lconn.core.applicationPalette.palette != null) {
                                 lconn.core.applicationPalette.palette.setJsonData(lconn.core.applicationPalette.getjsonData());
                                 lconn.core.applicationPalette.palette.populatePalette(false);
                              }
                              hideDialog();
                           };
                        dojo.xhrGet({
                           url: WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + timestamp,
                           handleAs: "xml",
                           error: lconn.core.errorhandling.DefaultXHRErrorHandler,
                           load: tempLoad
                        }); //prime the cache
                     };
                  var idosd80d = dojo.fx.wipeOut({
                     node: htmlId,
                     duration: 300,
                     onEnd: temp380923
                  });
                  idosd80d.play();

                  try {
                     eval('if(_' + widgetInstanceId + '_iContext.iScope().onRemoveWidgetUIContent != null) _' + widgetInstanceId + '_iContext.iScope().onRemoveWidgetUIContent();');
                     removeFromNavBar(widgetInstanceId);
                     lconn.core.WidgetPlacementMM.destroyWidget(widgetInstanceId, null, true);

                     // If we're on the Status Updates page, return to the overview
                     var delDefId = widgetInstanceNode.getAttribute("defIdRef");
                     if (delDefId == "StatusUpdates") {
                        window.location.href = WidgetPlacementConfig.applicationContext + "/service/html/communityview?communityUuid=" + WidgetPlacementConfig.resourceId;

                     }
                  } catch (e) {
                     console.log(e);
                  }
               },
               error: lconn.core.WidgetPlacementMM.customAddWidgetErrorHandler
               //eval("_" + widgetInstanceId + "_iContext = null");
            });
         }
      }
   };

   //
   // Callback for simple ok/cancel dialogue for deleting widget.
   //
   var deleteWidgetCallback = function(widgetInstanceId, doDelete) {
         if (doDelete == true) {
            deleteOrHideWidgetCallback(widgetInstanceId, true);
         }
      };

   //
   //  Callback to remove or hide widget.
   //
   var deleteOrHideWidgetCallback = function(widgetInstanceId, doDelete) {
         if (doDelete == true) {
            lconn.core.WidgetPlacementMM.removeWidget(widgetInstanceId, true, false);
            lconn.core.WidgetPlacementMM.removeWidgetInProgress = false;
         } else { // doDelete  == false => do a hide
            lconn.core.WidgetPlacementMM.removeWidget(widgetInstanceId, false, null);
         }
      };

   var removeFromNavBar = function(widgetInstanceId) {
         var liElementNode = dojo.byId(widgetInstanceId + "_navItem");
         if (liElementNode != null) liElementNode.parentNode.removeChild(liElementNode);
      }

   var showAddWidgetDialog = function() {
         var dialogContent = '<div class="lotusDialogBorder"><form class="lotusDialog lotusForm">' + '<h1><img src="' + WidgetPlacementConfig.applicationContext + '/nav/common/styles/images/loading.gif" title="' + messages['widget_AddingWidget'] + '"> ' + messages['widget_AddingWidget'] + '</h1>' + '</form></div>';
         lconn.core.WidgetPlacementMM.displayDialog(dialogContent);
      }

   var showRemoveWidgetDialog = function() {
         var dialogContent = '<div class="lotusDialogBorder"><form class="lotusDialog lotusForm">' + '<h1><img src="' + WidgetPlacementConfig.applicationContext + '/nav/common/styles/images/loading.gif"> ' + messages['widget_RemovingWidget'] + '</h1>' + '</form></div>';
         lconn.core.WidgetPlacementMM.displayDialog(dialogContent);
      }

   var hideDialog = function() {
         //alert("hideDialog");
         var temp = dijit.byId('dialog1');
         if (temp != null) temp.hide();
      }

   lconn.core.WidgetPlacementMM.addWidgetToServerAndRender = function(widgetDefId, uiLocation, unhide, instanceId) {
	   widgetDefIdString = widgetDefId[0];
		var unhidingWidget = false; // Set to true iff we're unhiding the widget.
		if ( widgetDefIdString === "StatusUpdates" ) {
			uiLocation = "col2statusposts";
		}

		if ( unhide == false || unhide == "false") showAddWidgetDialog();
      else {
         unhidingWidget = true;
      }

		var dataUrl = WidgetPlacementConfig.applicationContext + "/addWidget.do?resourceId=" + WidgetPlacementConfig.resourceId + "&widgetDefId=" + widgetDefIdString + "&uiLocation=" + uiLocation;

      if (unhide != null) {
         dataUrl += "&unhide=" + unhide;
         if (instanceId) {
            dataUrl += "&instanceId=" + instanceId;
         }
      }

      //,sync: true
      dojo.xhrPost({
         url: dataUrl,
         handleAs: "xml",
         load: function(resp, ioArgs) {
            //alert("lconn.core.WidgetPlacementMM.addWidgetToServerAndRender ");
            lconn.core.WidgetPlacementMM.addWidgetInProgress = false;
            //alert("widget added, refresh the page (for now)");
            var widgetInstanceId = resp.documentElement.getAttribute("widgetInstanceId");
            lconn.core.WidgetPlacementMM.loadOrder[lconn.core.WidgetPlacementMM.loadOrder.length] = {
               instanceId: widgetInstanceId,
               uiLocation: uiLocation
            };
            dojo.global.staleXMLConfig = true;
            lconn.core.WidgetPlacementMM.getWidgetDocAndRenderWidget(widgetDefId, null, widgetInstanceId, uiLocation);
            hideDialog();
            if (lconn.core.applicationPalette.palette != null) {
               dojo.publish(lconn.core.paletteOneUI.Palette.prototype.RECHECK_CAN_ADD_WIDGET_HANDLER_EVENT, [widgetDefId]);
               lconn.core.applicationPalette.palette.incCounter();
            }
            setTimeout(function() {
               dojo.byId("closePalette").focus();
            }, dijit.defaultDuration + 200);

            // If we're unhiding, since we're inserting the widget at the end of column, update the database to reflect that so a page refresh won't show
            // the widget as moved.
            if (unhidingWidget == true) {
               lconn.core.WidgetPlacementMM.moveWidgetToEnd(widgetInstanceId, uiLocation);
            }

            //          var timestamp = new Date().getTime();
            //          WidgetPlacementConfig.lastMod = timestamp;
            //          var tempLoad = function(resp, ioArgs)
            //          {
            //             WidgetPlacementConfig.widgetConfigXMLDocument = resp;
            //             hideDialog();
            //             if(lconn.core.applicationPalette.palette != null)
            //             {
            //                dojo.publish(lconn.core.paletteOneUI.Palette.prototype.RECHECK_CAN_ADD_WIDGET_HANDLER_EVENT);
            //                lconn.core.applicationPalette.palette.incCounter();
            //             }
            //             dojo.byId("closePalette").focus();
            //          };
            //          dojo.xhrGet({url: WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + timestamp, handleAs: "xml", sync: true,
            //             error: lconn.core.errorhandling.DefaultXHRErrorHandler, load: tempLoad}); //prime the cache

			// Refresh the left navigator:
			var lotusNavBar = getNavBar();
			if (lotusNavBar != null) {
				try {
				   new lconn.core.WidgetPlacementMM.aria.Toolbar(lotusNavBar.id);
				} catch (ee) {
				   new lconn.core.aria.Toolbar(lotusNavBar.id);
				}
			}
         },
         error: lconn.core.WidgetPlacementMM.customAddWidgetErrorHandler
      });
   };

   //
   // Shows widget error on page in headline div.
   // set prepend = true iff you want the message pre-pended to he headline.  false to replace the headline content.
   //
   lconn.core.WidgetPlacementMM.showWidgetErrorInHeadline = function(error, prepend) {
      hideDialog();

      lconn.core.WidgetPlacementMM.removeWidgetInProgress = false;
      lconn.core.WidgetPlacementMM.addWidgetInProgress = false;

      var errorText = "";
      if (error != null && error.responseText != null) errorText = error.responseText;
      else errorText = error;
      errorText = dojox.html.entities.encode(errorText);

      var timeTemp = new Date().getTime();
      var errorContent = '<div class="lotusFormError lotusMessage" role="alert">' + '<img class="lotusIcon iconsMessages16 iconsMessages16-msgError16" src="' + dojo.config.blankGif + '" alt="' + coreMessages['rs_messagebox_error_a11y_label'] + '" title="' + coreMessages['rs_messagebox_error_a11y_label'] + '"/>' + '<span>' + messages['error.title.generic'] + '  <a id="error_' + timeTemp + '" href="javascript:void(0);" onclick="lconn.core.utilities.show(\'errorTextContainer\');lconn.core.utilities.hide(\'error_' + timeTemp + '\');" title="' + messages['info.feed.general.moreinfo'] + '">' + messages['info.feed.general.moreinfo'] + '</a><div id="errorTextContainer" style="display:none">' + errorText + '</div></span>' + '</div>';
      var temp = dojo.byId('headline');
      if (prepend == true) {
         errorContent += temp.innerHTML;
      }
      temp.innerHTML = errorContent;
   };


   lconn.core.WidgetPlacementMM.customAddWidgetErrorHandler = function(error) {
      return (lconn.core.WidgetPlacementMM.showWidgetErrorInHeadline(error, true));
   };

   lconn.core.WidgetPlacementMM.minimizeWidget = function(htmlElement, widgetInstanceId, widgetDefId, hideWidget) {
      lconn.core.utilities.hide(widgetInstanceId + 'moreActions', true, true);

      var element = dojo.byId(widgetInstanceId + "SubArea");

      var menuItem = dijit.byId(widgetInstanceId + "_toggleAction");

      //alert(menuItem);
      if (dojo.style(element, "display") == "none") {
         dojo.cookie(widgetDefId + "-isMinimized", "false");
         var menuWidget = dojo.byId("widgetActionsMenu" + widgetInstanceId);
         var widgetloaded = element.getAttribute("widgetloaded");
         var widgetneedrefresh = element.getAttribute("widgetneedrefresh");
         if (widgetneedrefresh == null) widgetneedrefresh = "true";

         if (widgetloaded == 'false' && widgetneedrefresh == "true") {
            var temp = function(response, ioArgs) {
                  var widgetDataDoc = response;
                  lconn.core.WidgetPlacementMM.refresh(widgetInstanceId, widgetDataDoc);
                  //lconn.core.utilities.toggleVisibility(element);
				  if(hideWidget){
					dojo.style(element, "display", "none");
					menuItem.setLabel(messages['widgets_Max']);
				  }
				  else{
					dojo.style(element, "display", "");
					menuItem.setLabel(messages['widgets_Min']);
				  }

               };

            if (WidgetPlacementConfig.widgetConfigXMLDocument != null) temp(WidgetPlacementConfig.widgetConfigXMLDocument);
            else dojo.xhrGet({
               url: WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + WidgetPlacementConfig.lastMod,
               error: lconn.core.errorhandling.DefaultXHRErrorHandler,
               handleAs: "xml",
               sync: true,
               load: temp,
               error: lconn.core.errorhandling.DefaultXHRErrorHandler
            });
         } else {
            //lconn.core.utilities.toggleVisibility(element);
            dojo.style(element, "display", "");

            menuItem.setLabel(messages['widgets_Min']);
         }
      } else {
         dojo.cookie(widgetDefId + "-isMinimized", "true");
         var menuWidget = dojo.byId("widgetActionsMenu" + widgetInstanceId);
         //lconn.core.utilities.toggleVisibility(element);
         dojo.style(element, "display", "none");


         menuItem.setLabel(messages['widgets_Max']);
      }

      window.setTimeout("lconn.core.WidgetPlacementMM.setFocus('" + widgetInstanceId + "', 'widgetActionsMenu" + widgetInstanceId + "');", 0);
   };


   lconn.core.WidgetPlacementMM.addEditTabsWithOnclickCalls = function(TabContainerDomId, editModeContainerDomId, intialDisplayDomId, cancelCallBack, editPageTabFirstItemDomId) {
      return lconn.core.WidgetPlacementMM.addTabsWithOnclickCalls(TabContainerDomId, editModeContainerDomId, intialDisplayDomId, cancelCallBack, editPageTabFirstItemDomId, "edit");
   }

   lconn.core.WidgetPlacementMM.showFirstTab = function(intialDisplayDomId, FirstTabItemDomId, callback) {
      if (WidgetPlacementConfig.TabContainerDomId != null) {
         var parentHTMLNode = document.getElementById(WidgetPlacementConfig.TabContainerDomId);
         if (parentHTMLNode != null) {
            dojo.query("li[id$='_TabItem']", parentHTMLNode).forEach(function(node) {
               dojo.removeClass(node, "lotusSelected");
               dojo.attr(node, {
                  "tabindex": "-1",
                  "aria-selected": "false",
                  "role": "tab"
               });
            });
         }

		//set the aria-label of the tabpanel to match the tab selected
		try {
			dojo.attr(
				dojo.byId(WidgetPlacementConfig.TabContainerDomId + "_panel"),
				"aria-label",
				dojo.query("a._linkHolder", dojo.byId(FirstTabItemDomId))[0].innerHTML
			);
		} catch (ee) {}
      }

      if (WidgetPlacementConfig.TempWidgetContainerDomId != null) destroyWidgetContainer(WidgetPlacementConfig.TempWidgetContainerDomId);

      if (intialDisplayDomId != null) lconn.core.utilities.show(intialDisplayDomId);

      if (FirstTabItemDomId != null) {
         dojo.query("#" + FirstTabItemDomId).forEach(function(liItem) {
            dojo.attr(liItem, {
               "tabindex": "0",
               "aria-selected": "true"
            });
            dojo.addClass(liItem, 'lotusSelected');
         });
      }
      var hash = window.location.hash;
      if (hash != null) {
         //CCM
         var searchTabPos = hash.indexOf("&tab");
         if (searchTabPos > 0) {
            changeHash(hash.substr(0, searchTabPos));
         }
      }

      if (callback != null) callback();

      return false;
   }



   lconn.core.WidgetPlacementMM.addTabsWithOnclickCalls = function(TabContainerDomId, TempWidgetContainerDomId, intialDisplayDomId, cancelCallBack, FirstTabItemDomId, widgetMode, attributesMap) {
      var selecedtNode = null;
      dojo.forEach(lconn.core.WidgetPlacementMM.uiLocations, function(loc) {
         lconn.core.utilities.show("widget-container-" + loc, false, true);
      });

      dojo.forEach((WidgetPlacementConfig.hideElements || []), function(elem) {
         lconn.core.utilities.hide(elem, false, true);
      });

      if (cancelCallBack != null) {
         WidgetPlacementConfig.cancelCallBack = cancelCallBack;
      }

      var selectTabId = null;
      var selectTabInst = null;
      var showHidden = false;
      var moreActionsNode = null;

      if (attributesMap && attributesMap.length > 0) {
         var component = attributesMap[0].component;
         if (component && component == "communities:content") {
            showHidden = true;
         }
         selectTabId = attributesMap[0].selectTab;
         selectTabInst = attributesMap[0].selectTabInst;
         var key = attributesMap[0].entryValue;
         if (key) {
            if (attributesMap[0].entryName == "searchKeywords") {
               var hash = "query=" + key;
            } else if (attributesMap[0].entryName == "tagCloudItemValue") {
               var hash = "tag=" + key;
            }
            if (hash) {
               //CCM
               if (selectTabInst) {
                  hash += "&tabinst=" + selectTabInst;
               } else if (selectTabId) {
                  hash += "&tab=" + selectTabId;
               }
               changeHash(hash);
            }
         }

         moreActionsNode = attributesMap[0].moreActionsContainerNode;
      }

      var displayedUserInfo = getDisplayedUserInfo();
      var profileType = (displayedUserInfo && typeof(displayedUserInfo.profileType) == "string" && dojo.trim(displayedUserInfo.profileType).length > 0 ? displayedUserInfo.profileType : "default");
      var exp1 = "/tns:widgets/tns:layout[@resourceSubType='" + profileType + "']/tns:page[@pageId='" + WidgetPlacementConfig.defaultPageId + "']/tns:widgetInstance";
      var exp2 = "/tns:widgets/tns:layout[@resourceSubType='default']/tns:page[@pageId='" + WidgetPlacementConfig.defaultPageId + "']/tns:widgetInstance";
      var data = WidgetPlacementConfig.widgetConfigXMLDocument;
      var nodes = lconn.core.xpath.selectNodes(exp1, data);
      if (nodes == null || !nodes.length) { // fall back to default layout when there is no layout for current profile type
         nodes = lconn.core.xpath.selectNodes(exp2, data);
      }


      var canPersonalize = getUserProfileOverrideProperty("canPersonalize") == "true";

      var selectTab = function(node, opts) {

            dojo.query("._iconHolder", node.parentNode).forEach(function(iconNode) {
               dojo.style(iconNode, "display", "none");
            });
			if (!moreActionsNode) {
				dojo.query("._iconHolder", node).forEach(function(iconNode) {
				   dojo.style(iconNode, "display", "inline");
				});
			}

			//set the aria-label of the tabpanel to match the tab selected
			try {
				dojo.attr(
					dojo.byId(WidgetPlacementConfig.TabContainerDomId + "_panel"),
					"aria-label",
					dojo.query("a._linkHolder", node)[0].innerHTML
				);
			} catch (ee) {}


            var widgetDefId = opts.defNode.getAttribute("defId");
            var widgetInstanceId = opts.instNode.getAttribute("instanceId")
            widgetInstanceId = (widgetInstanceId == null ? widgetDefId : widgetInstanceId);

            // Show informational message that changes should be saved for each tab.
            if (lconn.core.WidgetPlacementMM.infoMessage == null && dojo.byId("editWarningMessage")) {
               lconn.core.WidgetPlacementMM.infoMessage = new com.ibm.oneui.controls.MessageBox({
                  canClose: true,
                  _strings: {
                     icon_alt: coreMessages["rs_messagebox_info_icon_alt"],
                     a11y_label: coreMessages["rs_messagebox_info_a11y_label"],
                     close_btn_title: coreMessages["rs_close"],
                     close_btn_alt: coreMessages["rs_close"]
                  },
                  type: com.ibm.oneui.controls.MessageBox.TYPE.INFO,
                  msg: messages["switchTabWarning"]
               }, dojo.create("div"));
			   dojo.place(lconn.core.WidgetPlacementMM.infoMessage.domNode, dojo.byId("editWarningMessage"), "only");
            };

            if (opts.destroyContainer) {
               destroyWidgetContainer(WidgetPlacementConfig.TempWidgetContainerDomId, false);
            }

            lconn.core.WidgetPlacementMM.destroyWidget(widgetInstanceId, null, false, true);

            lconn.core.WidgetPlacementMM.getWidgetDocAndRenderWidget(
            widgetDefId, opts.defNode, widgetInstanceId, WidgetPlacementConfig.TempWidgetContainerDomId, opts.widgetMode, "skinless", false, false, opts.attributesMap);

            if (opts.initDispId != null) lconn.core.utilities.hide(opts.initDispId, false, true);

            if (opts.attributesMap && opts.attributesMap.length > 0) {
               var key = opts.attributesMap[0].entryValue;
               if (key) {
                  if (attributesMap[0].entryName == "searchKeywords") {
                     var hash = "query=";
                  } else if (attributesMap[0].entryName == "tagCloudItemValue") {
                     var hash = "tag=";
                  }
                  if (hash) {

                     selectTabId = attributesMap[0].selectTab;
                     selectTabInst = attributesMap[0].selectTabInst;

                     hash += key;
                     if (selectTabInst) {
                        hash += "&tabinst=" + widgetInstanceId;
                     } else if (selectTabId) {
                        hash += "&tab=" + widgetDefId;
                     } else {
                        hash += "&tabinst=" + widgetInstanceId;
                     }
                     changeHash(hash);
                  }
               }
            }

			// we have an external node to hold the more actions, update that when we switch tabs
			if (moreActionsNode) {

				//destroy, disconnect, and remove old dijits and dom elements
				var oldDijit = dijit.byId(opts.instId+ 'moreActions');
				if (oldDijit) oldDijit.destroy();
				if (lconn.core.WidgetPlacementMM._moreActionsConnect) dojo.disconnect(lconn.core.WidgetPlacementMM._moreActionsConnect);

				var linkId = moreActionsNode.id + "_menuHolder"
				dojo.query("." + linkId).forEach(function(node) {
					node.parentNode.removeChild(node);
				});

				// create new dijits and dom elements
				dojo.place('<div dojoType="dijit.Menu" id="' + opts.instId+ 'moreActions"  class="' + linkId + '" style="display:none;"></div>', moreActionsNode, "after");

				// set the aria label and title to the correct text
				var widgetName = window.getEscapedWidgetName(opts.defNode, opts.instNode);
				var actionsAlt = messages['actions_alt'] || "Actions for: ${0}";
				actionsAlt = dojo.string.substitute(actionsAlt, [widgetName]);

				dojo.query("a", moreActionsNode).forEach(function(node) {
					dojo.attr(node, {
						title: actionsAlt,
						"aria-label": actionsAlt
					});
				});

				dojo.query(".lotusAltText", moreActionsNode).forEach(function(node) {
					dojo.attr(node, {
						innerHTML: actionsAlt
					});
				});

				// get a reference to the newly generated moreActions node
				var linkNode = dojo.byId(opts.instId+ 'moreActions');

				// add the refresh menu item
				dojo.place(
					dojo.create("div", {
						dojoType: "dijit.MenuItem",
						label: messages['refresh'],
						"onclick": "lconn.core.WidgetPlacementMM.fetchAndRefresh('" + opts.instId + "');"
					}),
					linkNode,
					"last"
				);

				// add the help menu item
				var helpLink = opts.defNode.getAttribute("helpLink");

				if (helpLink && helpLink.length != 0) {
					helpLink = lconn.core.i18nOverrider.replaceParams(helpLink, WidgetPlacementConfig.params);
					var helpItem = dojo.create("div", {
						dojoType: "dijit.MenuItem",
						label: messages['help'],
						title: messages['link.window.openNewWindow'],
						"onclick": "lconn.core.utilities.hide('" + opts.instId + "moreActions', true, true);" + "lconn.core.WidgetPlacementMM.openHelpWindow('" + helpLink + "');"
					});
					dojo.place(helpItem, linkNode, "last");
				}

				// parse the newly generated moreActions so the Menu will show
				dojo.parser.parse(linkNode.parentNode);


				// let's connect the click to open the newly generated menu
				lconn.core.WidgetPlacementMM._moreActionsConnect = dojo.connect(moreActionsNode, "onclick", function(evt) {
					lconn.core.WidgetPlacementMM.openMenu(evt, opts.instId);
					dojo.stopEvent(evt);
				});


			}
         };

      var addTab = function(opts) {
            var maxTabLength = 50; // Maximum number of characters in tab's string.
            var widgetDefId = opts.defNode.getAttribute("defId");

            var widgetName = window.getEscapedWidgetName(opts.defNode, opts.instNode);
            if (widgetName.length > maxTabLength) {
               widgetName = widgetName.substring(0, maxTabLength) + "...";
            }


            var li = dojo.byId(opts.instId + "_TabItem");
            if (li == null) {
               li = dojo.create("li", {
                  id: opts.instId + "_TabItem",
                  role: "tab"
               });
               dojo.place(li, TabContainerDomId, "last");
            }

            dojo.attr(li, {
               itemidx: opts.itemIdx,
               innerHTML: '<a tabindex="-1" class="_linkHolder lotusLeft">' + widgetName + '</a>' + '<a class="_iconHolder lotusIcon lotusLeft" style="padding: 0; display: none;"></a>' + '<div class="_menuHolder" style="display: none;"><div>'
            });

            dojo.connect(li, 'onclick', function(evt) {
               selectTab(li, opts);
               dojo.stopEvent(evt);
               return false;
            });

            if (!opts.showMenu) {
               dojo.query("._iconHolder", li).forEach(dojo.destroy);
               dojo.query("div._menuHolder", li).forEach(dojo.destroy);

            } else if (!moreActionsNode) {
               var messages = dojo.i18n.getLocalization("lconn.core", "widgets");

               var pMenu = dojo.query("div._menuHolder", li)[0];

               dojo.attr(pMenu, {
                  id: opts.instId + "moreActions",
                  dojoType: "dijit.Menu"
               });

               var refreshItem = dojo.create("div", {
                  dojoType: "dijit.MenuItem",
                  label: messages['refresh'],
                  "onclick": "lconn.core.WidgetPlacementMM.fetchAndRefresh('" + opts.instId + "');"
               });
               dojo.place(refreshItem, pMenu, "last");

               var helpLink = opts.defNode.getAttribute("helpLink");

               if (helpLink && helpLink.length != 0) {
                  helpLink = lconn.core.i18nOverrider.replaceParams(helpLink, WidgetPlacementConfig.params);
                  var helpItem = dojo.create("div", {
                     dojoType: "dijit.MenuItem",
                     label: messages['help'],
                     title: messages['link.window.openNewWindow'],
                     "onclick": "lconn.core.utilities.hide('" + pMenu.id + "', true, true);" + "lconn.core.WidgetPlacementMM.openHelpWindow('" + helpLink + "');"
                  });
                  dojo.place(helpItem, pMenu, "last");
               }

               var actionsAlt = messages['actions_alt'] || "Actions for: ${0}";
               actionsAlt = dojo.string.substitute(actionsAlt, [widgetName]);

               var pIcon = dojo.query("._iconHolder", li)[0];
               dojo.attr(pIcon, {
                  id: opts.instId + "_MenuIcon",
                  role: "button",
                  "aria-haspopup": "true",
                  href: "javascript:void(0);",
                  innerHTML: '<img class="lotusArrow" alt="' + actionsAlt + '" title="' + actionsAlt + '" src="' + dijit._Widget.prototype._blankGif + '"/><span class="lotusAltText">&#9660;</span>'
               });
               dojo.addClass(pIcon, "lotusIcon");
               dojo.connect(pIcon, "onclick", function(evt) {
                  lconn.core.WidgetPlacementMM.openMenu(evt, opts.instId);
                  dojo.stopEvent(evt);
               });


            }

            dojo.place(li, TabContainerDomId);
            dojo.parser.parse(li);
            return (li);
         };

      nodes = nodes || [];

      dojo.forEach(nodes, dojo.hitch(this, function(widgetInstanceNode, idx) {
         var defIdRef = widgetInstanceNode.getAttribute("defIdRef");

         if (selectTabId == null) {
            selectTabId = defIdRef;
         }

         var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + defIdRef + "']";
         var widgetDefinitionNode = lconn.core.xpath.selectSingleNode(exp3, data);
         if (widgetDefinitionNode == null) return; //the widget def is missing the config file.
         var uiLocation = widgetInstanceNode.getAttribute("uiLocation");
         var modes = widgetDefinitionNode.getAttribute("modes");
         var instanceId = widgetInstanceNode.getAttribute("instanceId");
         if (instanceId == null) instanceId = defIdRef;

         if (instanceId == TempWidgetContainerDomId) return; // skip adding widget to widget's self location
         if (!canAddWidget(widgetDefinitionNode, WidgetPlacementConfig, canPersonalize, widgetInstanceNode, showHidden)) return;

         var params = {
            containerId: TabContainerDomId,
            defNode: widgetDefinitionNode,
            instNode: widgetInstanceNode,
            instId: instanceId,
            initDispId: intialDisplayDomId,
            cancelCallBack: cancelCallBack,
            widgetMode: widgetMode,
            attributesMap: dojo.clone(attributesMap),
            itemIdx: idx,
            showMenu: false,
            destroyContainer: true
         };

         var addedNode = null;
         if (modes != null && modes.indexOf(widgetMode) != -1) {
            addedNode = addTab(params);
         } else if (uiLocation == TempWidgetContainerDomId) {
            params.showMenu = true;
            addedNode = addTab(params);
         }

         if (instanceId == selectTabInst) {
            selecedtNode = addedNode;
         } else if (defIdRef == selectTabId) {
            selecedtNode = addedNode;
         }

      }));


      WidgetPlacementConfig.isTabbedFullPageWidgetRendering = true;
      WidgetPlacementConfig.TempWidgetContainerDomId = TempWidgetContainerDomId;
      WidgetPlacementConfig.TabContainerDomId = TabContainerDomId;


      if (lconn.core.WidgetPlacementMM.aria && typeof(lconn.core.WidgetPlacementMM.aria.TabPanel) == "function") {
         new lconn.core.WidgetPlacementMM.aria.TabPanel(TabContainerDomId);
         if (selecedtNode != null) {
            selecedtNode.click();
         }
      }

      //code makes sure the height of the image in the tabs is equal to the height of the link text.
      //For the case where the customer changes the appearance of the tabs.
      dojo.query("a._iconHolder", dojo.byId(TabContainerDomId)).forEach(function(iconNode) {
         var imgNode = dojo.query("img.lotusArrow", iconNode);
         if (imgNode.length > 0) {
            var linkNode = dojo.query("._linkHolder", iconNode.parentNode);
            if (linkNode.length > 0) {
               var h = dojo.coords(linkNode[0]).h - dojo.style(linkNode[0], "borderBottomWidth");
               if (!dojo.isIE) h -= dojo.style(linkNode[0], "borderTopWidth");
               dojo.style(imgNode[0], "height", h + "px");
            }
         }
      });
   }


   //FIXME: this needs to be refactored to be in a package, or part of a container service
   window.changeHash = function(hashValue) {
/*
      if(dojo.isIE && hashValue != "" && hashValue != "#" && dojo.byId(hashValue)== null)
      {
         var aNode = document.createElement("a");
         aNode.setAttribute("name",hashValue);
         aNode.setAttribute("id",hashValue);
         aNode.style.display = "none";
         document.body.insertBefore(aNode,document.body.firstChild);
      }
      */
      window.location.hash = hashValue;
   }

   lconn.core.WidgetPlacementMM.URLChange = function(URL) {
      if (WidgetPlacementConfig.debug) console.log("lconn.core.WidgetPlacementMM.URLChange: value: " + URL);
      //var URL = "http://localhost:9080/communities/service/html/communityview?communityUuid=2a7e365a-2371-4cd2-8024-6cade1e4cee7&debug=widget";
      //var URL = "http://localhost:9080/communities/service/html/communityview?communityUuid=2a7e365a-2371-4cd2-8024-6cade1e4cee7&debug=widget#";
      //var URL = "http://localhost:9080/communities/service/html/communityview?communityUuid=2a7e365a-2371-4cd2-8024-6cade1e4cee7&debug=widget#fullpageWidgetId=Members";
      var index = URL.indexOf("#");

      if (index == -1 || URL.substring(index).length == 1) {
         lconn.core.WidgetPlacementMM.reloadOverviewPage();
         return;
      }

      var fullpageWidgetId = lconn.core.utilities.getURLParam("fullpageWidgetId", true);
      if (fullpageWidgetId && fullpageWidgetId != lconn.core.WidgetPlacementMM.currentFullpageWidgetInstanceId) {
         lconn.core.WidgetPlacementMM.loadFullpageView(fullpageWidgetId, null, false, true, true);
         return;
      }

	  // Check for query and tag hashes - indicating search url.  Force browser to switch to it and send url to server.
	  var queryValue = lconn.core.utilities.getURLParam("query", true);
	  var tagValue = lconn.core.utilities.getURLParam("tag", true);
	  if (queryValue != null || tagValue!=null) {
		  // If we're already displaying the search result form - don't do navigation to search again.
		  if (dojo.style("searchCommunityForm", "display") == "none") {
		  // Duplicate what a search does...
			var attributesMap = [];
			selectTabInstValue = lconn.core.utilities.getURLParam("tabinst", true);
			selectTabValue = lconn.core.utilities.getURLParam("tab", true);
			if (typeof(selectTabInstValue) == "undefined") {selectTabInstValue = null;}
			if (typeof(selectTabValue) == "undefined") {selectTabValue = null;}
			if (queryValue != null) {
			  attributesMap.push({entryName: "searchKeywords", entryValue: queryValue, component: "communities:content", selectTabInst: selectTabInstValue, selectTab: selectTabValue });
			} else {
			  attributesMap.push({entryName: "tagCloudItemValue", entryValue: tagValue, component: "communities:content", selectTabInst: selectTabInstValue, selectTab: selectTabValue });
			}
			lconn.comm.community.handleSearchRequestbyGeneral(attributesMap);
	   }
	  }
   };

   lconn.core.WidgetPlacementMM.init = function() {

      if (lconn.core.WidgetPlacementMM.URLChangeCallBack == null) {
         lconn.core.WidgetPlacementMM.URLChangeCallBack = [lconn.core.WidgetPlacementMM.URLChange];
         registerBackButtonSupport();
      }

      var fullpageWidgetId = lconn.core.utilities.getURLParam("fullpageWidgetId", true);
      if (fullpageWidgetId == null || fullpageWidgetId == "") {
         lconn.core.WidgetPlacementMM.placeWidgetMetadata();
         lconn.core.WidgetPlacementMM.renderWidgets();

         if (WidgetPlacementConfig.hideElements != null) for (var i = 0; WidgetPlacementConfig.hideElements != null && i < WidgetPlacementConfig.hideElements.length; i++)
         lconn.core.utilities.show(WidgetPlacementConfig.hideElements[i], false, false, true);
      } else {
         lconn.core.WidgetPlacementMM.onlyFullPageWidgetLoaded = true;
         var temp = function(response, ioArgs) {
               var widgetData = response;
               WidgetPlacementConfig.widgetConfigXMLDocument = widgetData;

               loadNavItemsOnly(true, (getUserProfileOverrideProperty("canPersonalize") == "true"), getDisplayedUserInfo());

               var overrideOverViewLink = false;
               var addState = "initial";
               lconn.core.WidgetPlacementMM.loadFullpageView(fullpageWidgetId, null, addState, overrideOverViewLink);

            };
         dojo.xhrGet({
            url: WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + WidgetPlacementConfig.lastMod,
            error: lconn.core.errorhandling.DefaultXHRErrorHandler,
            handleAs: "xml",
            sync: true,
            load: temp
         });
      }
   }

    // Initialize the widget framework to support edit mode
    lconn.core.WidgetPlacementMM.initEdit = function() {
    	lconn.core.WidgetPlacementMM.placeWidgetMetadata(false);
    	lconn.core.WidgetPlacementMM.renderWidgets();
    }

   lconn.core.WidgetPlacementMM.setFocus = function(widgetId, elemId) {
      var section = document.getElementById(widgetId + "Section");
      if (section) {
         var elems = dojo.query("#" + elemId, section);
         if (elems && elems.length > 0) {
            try {
               if (elems[0].focus) elems[0].focus();
            } catch (e) {
               console.log(e.message);
            }
         }
      }
   }
})();
