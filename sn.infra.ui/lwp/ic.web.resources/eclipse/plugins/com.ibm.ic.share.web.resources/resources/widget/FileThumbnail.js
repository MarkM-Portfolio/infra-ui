/* Copyright IBM Corp. 2014, 2015  All Rights Reserved.              */

/*
 * FIXME: this module is not in sync with the legacy counterpart lconn.share.widget.FileThumbnail.
 * Do not edit this file, convert that module to AMD and replace this one instead.
 */

define([
        "dojo/_base/declare",
        "dojo/_base/lang",
        "dojo/_base/array",
        "dojo/_base/window",
        "dojo/_base/event",
        "dijit/_WidgetBase",
        "dijit/_TemplatedMixin",
        "dijit/_FocusMixin",
        "dojo/dom-class",
        "dojo/dom-style",
        "dojo/dom-construct",
        "dojo/dom-attr",
        "dojox/lang/functional",
        "ic-core/globalization/bidiUtil",
        "dojo/text!./templates/FileThumbnail.html",
        "dojo/i18n!../nls/FileThumbnail", // native language support messages
        "dojo/has",
        "dojo/_base/sniff", // load browser-related has feature tests
        "dijit/_OnDijitClickMixin"
],
   function(declare, lang, darray, win, event, _WidgetBase, _TemplatedMixin, _FocusMixin, domClass, domStyle, domConstruct, domAttr, functional, bidiUtil, template, nlsMessages, has) {

      /**
       * CSS class required to force the focus (a11y)
       * 
       * @private
       */
      var _forceFocusClass = "ic-thumb-widget-flip-card-a11y-h";

      /**
       * CSS class required to update the checkbox status
       * 
       * @private
       */
      var _isCheckedClass = "ic-thumb-widget-flip-card-is-checked";

      /**
       * CSS class required to update the pin status
       * 
       * @private
       */
      var _isPinnedClass = "ic-thumb-widget-flip-card-is-pinned";

      /**
       * CSS classes required to display the file type icon (width/height: 64px)
       * 
       * @private
       */
      var _imagefileTypeClass = { // TODO - not yet completed
         zip : 'iconsFileTypes64 iconsFileTypes64-ftCompressed64',
         pdf : 'iconsFileTypes64 iconsFileTypes64-ftPdf64',
         'default' : 'iconsFileTypes64 iconsFileTypes64-ftDefault64'
      };

      /**
       * CSS classes required to display the visibility/locking status icon
       * 
       * @private
       */
      var _imageStatusClass = { // TODO - not yet completed
         locked : 'iconsStates16 iconsStates16-CheckedOut',
         lockedByMe : 'iconsStates16 iconsStates16-CheckedOutMe',
         'private' : 'iconsStates16 iconsStates16-Private',
         'public' : 'iconsStates16 iconsStates16-Public',
         shared : 'iconsStates16 iconsStates16-Shared',
         sharedExternally : 'iconsMessages16 iconsMessages16-msgExternal16',
         sharedCommunity : 'iconsComponentsGray16 iconsComponentsGray16-CommunitiesGray16'
      };

      /**
       * List of the editable file types (which should provide the action
       * "Edit")
       * 
       * @private
       */
      var _editableFileTypes = [ // TODO - not yet completed
            'odt',
            'doc'
      ];

      /**
       * Used to set the default values
       * 
       * @private
       */
      var _defaultValues = null;

      /**
       * Thumbnail Widget that allows the display of a card with front and back
       * sides. Anchors and other clickable elements are available only on the
       * back side, which will flip automatically when the use focus any of its
       * elements (see _FocusMixin).
       * 
       * @author Davide Riso <davide.riso@ie.ibm.com>
       * @class ic-share.widget.FileThumbnail
       */
      return declare([
                      _WidgetBase,
                      _TemplatedMixin,
                      _FocusMixin
      ], /** @lends ic-share.widget.FileThumbnail.prototype */
      {

         /** the value with the data */
         value : null,

         /**
          * selected flag (checkbox checked), this field is not saved server
          * side
          */
         isSelected : false,

         /** html template of the widget */
         templateString : template,

         /** i18n - make native language support messages available on "this" */
         postMixInProperties : function() {
            this.inherited(arguments);
            lang.mixin(this, nlsMessages);
         },

         /** Set-up */
         postCreate : function() {

            this.inherited(arguments);

            // resetting the default values (they're mixed with the incoming
            // data)
            // in case this reset is not done and some fields are missing, the
            // data of the previous thumbnail would be displayed
            // TODO verify if it should stay empty or default data should be
            // used (ie. filePinned: false)
            _defaultValues = {};

            // set to true, just to reuse the toggle
            this.isSelected = true;
            // force to false (at the beginning the widget is not selected)
            this.checkToggle();

            // in case it's pinned set to false, just to reuse the toggle
            if (this.value && this.value.filePinned) {
               this.value.filePinned = false;
            }
            this.pinToggle();

            // populate with the native language support messages and the data
            // (JSON)
            this.populateWidget();

            // manage the visibility and lock icons (front-side)
            this.manageVisibility();

            // manage the thumbnail image (front-side) and the actions
            // visibility (back-side)
            this.manageFileType();

            if (this.value) {
               // set a11y extra attributes
               domAttr.set(this.domNode, 'role', this.value.role);
               // JAWS - navigation via TAB (skip the front-side of the card)
               domAttr.set(this.domNode, 'aria-label', this.ft_mainControls.replace("%0", this.value.index));
               // JAWS - navigation via DOWN-ARROW
               domAttr.set(this.imageThumb, 'alt', this.ft_mainThumbnail.replace("%0", this.value.index));
            }
         },

         /**
          * _FocusMixin onFocus It's called when an element of the back-side of
          * the card get the focus.
          */
         onFocus : function() {
            domClass.add(this.domNode, _forceFocusClass);
         },

         /**
          * _FocusMixin onBlur It's called when an element of the back-side of
          * the card lose the focus.
          */
         onBlur : function() {
            domClass.remove(this.domNode, _forceFocusClass);
         },

         /**
          * _FocusMixin onBlur Handle the update of the checkbox option. Called
          * when the back-side checkbox is selected.
          * 
          * @param {Object}
          *           e - the event object
          */
         checkToggle : function(e) {
            if (this.isSelected) {
               // checkbox must be set as unselected
               domClass.remove(this.domNode, _isCheckedClass);
               domAttr.set(this.backCheck, 'alt', this.ft_unchecked);
               domAttr.set(this.backCheck.parentNode, 'aria-label', this.ft_pressToChange.replace("%0", this.ft_unchecked).replace("%1",
                  this.ft_changeToChecked));
               domAttr.set(this.backCheck.parentNode, 'aria-pressed', 'false');
               domAttr.set(this.backCheck.parentNode, 'title', this.ft_changeToChecked);
               this.isSelected = false;
            }
            else {
               // checkbox must be set as selected
               domClass.add(this.domNode, _isCheckedClass);
               domAttr.set(this.backCheck, 'alt', this.ft_checked);
               domAttr.set(this.backCheck.parentNode, 'aria-label', this.ft_pressToChange.replace("%0", this.ft_checked).replace("%1",
                  this.ft_changeToUnchecked));
               domAttr.set(this.backCheck.parentNode, 'aria-pressed', 'true');
               domAttr.set(this.backCheck.parentNode, 'title', this.ft_changeToUnchecked);
               this.isSelected = true;
            }
            // it's called also by "postCreate" so the event object is not
            // always available
            if (e) {
               event.stop(e);
            }
         },

         /**
          * _FocusMixin onBlur Handle the update of the pin option. Called when
          * the back-side pin is selected.
          * 
          * @param {Object}
          *           e - the event object
          */
         pinToggle : function(e) {
            // TODO see Task 113023
            if (!this.value) {
               console.error('value is a required member');
               return;
            }
            if (this.value.filePinned) {
               // pin must be set as unselected
               domClass.remove(this.domNode, _isPinnedClass);
               domAttr.set(this.backPin, 'alt', this.ft_unpinned);
               domAttr.set(this.backPin.parentNode, 'aria-label', this.ft_pressToChange.replace("%0", this.ft_unpinned).replace("%1", this.ft_changeToPinned));
               domAttr.set(this.backPin.parentNode, 'aria-pressed', 'false');
               domAttr.set(this.backPin.parentNode, 'title', this.ft_changeToPinned);
               this.value.filePinned = false;
            }
            else {
               // pin must be set as selected
               domClass.add(this.domNode, _isPinnedClass);
               domAttr.set(this.backPin, 'alt', this.ft_pinned);
               domAttr.set(this.backPin.parentNode, 'aria-label', this.ft_pressToChange.replace("%0", this.ft_pinned).replace("%1", this.ft_changeToUnpinned));
               domAttr.set(this.backPin.parentNode, 'aria-pressed', 'true');
               domAttr.set(this.backPin.parentNode, 'title', this.ft_changeToUnpinned);
               this.value.filePinned = true;
            }
            // it's called also by "postCreate" so the event object is not
            // always available
            if (e) {
               event.stop(e);
            }
         },

         /**
          * Handler for calls to set("value", value).
          * 
          * @private
          * @param {Object}
          *           value - the object containing a map <key, value> with the
          *           strings to display in the UI or to use with REST APIs
          */
         _setValueAttr : function(value) {
            this._set('value', lang.mixin(_defaultValues, value));
         },

         /**
          * Populate the widget UI with the strings that must be displayed on
          * the front and back sides. (using "value")
          */
         populateWidget : function() {
            if (!this.value) {
               console.error('value is a required member');
               return;
            }
            var profileName, /* date, */dateStrings;
            if (this.value.fileDatePublished != this.value.fileDateModified) {
               // updated
               profileName = this.value.fileModifier;
               // date = this.value.fileDateModified;
               // if (date is today or tomorrow) { // TODO need to check if
               // "date" is Today or Tomorrow
               dateStrings = this.ft_updatedToday;
               // }
               // else{
               // dateStrings = this.ft_updated;
               // }
            }
            else {
               // created
               profileName = this.value.fileAuthor;
               // date = this.value.fileDatePublished;
               // if (date is today or tomorrow) { // TODO need to check if
               // "date" is Today or Tomorrow
               dateStrings = this.ft_createdToday;
               // }
               // else{
               // dateStrings = this.ft_created;
               // }
            }
            // set the name of the file on both the sides
            if (this.value.fileName) {
               var sttFileName = bidiUtil.createSttDisplayString(this.value.fileName, "FILE_PATH");
               domConstruct.place(win.doc.createTextNode(sttFileName), this.frontFileName, "only");
               domConstruct.place(win.doc.createTextNode(sttFileName), this.backFileName, "only");
            }
            // set the name of the file on both the sides
            if (profileName) {
               domConstruct.place(win.doc.createTextNode(profileName), this.backAuthor, "only");
               domAttr.set(this.backAuthor, "aria-label", this.ft_backAuthor.replace("%0", profileName));
            }
            // TODO AMD version of the DateFormatter - see Task 114159
            var dateFormatted = 'Today at 9:03 AM'; // format(date);
            domConstruct.place(win.doc.createTextNode(dateStrings.replace("%0", dateFormatted)), this.backAuthor, "after");

         },

         /**
          * Provides a background CSS to a DOM element, optionally provides an
          * "alt" attribute
          * 
          * @private
          * @param {Object}
          *           domElem - the DOM element to update
          * @param {Object}
          *           keyValues - the object with the key/value data
          * @param {String}
          *           key - the key to find in the keyValues
          * @param {Object}
          *           altPrefix - OPTIONAL, the prefix for the "alt" attribute.
          *           No "alt" attribute will be added if not set
          * @return {Boolean} true if the key is found in the keyValues object
          */
         _addClass : function(domElem, keyValues, key, altPrefix) {
            if (!key) {
               // special case for a file that doesn't have an extension
               // (fileType is an empty string). The alternative text is set in
               // 'postCreate'.
               domClass.add(domElem, keyValues['default']);
               return true;
            }
            if (this._contains(functional.keys(keyValues), key)) {
               domClass.add(domElem, keyValues[key]);
               if (altPrefix) {
                  // the alternative text is expected for the visibility/locking
                  // icons. It's not expected for the fileType icons.
                  domAttr.set(domElem, "alt", this[altPrefix + key]);
               }
               return true;
            }
            return false;
         },

         /**
          * check if an array contains an item
          * 
          * @private
          * @param {Object}
          *           keys - the keys array
          * @param {String}
          *           key - the key element to find
          * @return true if the key is found in the keys array
          */
         _contains : function(keys, key) {
            return darray.indexOf(keys, key) != -1;
         },

         /**
          * Provide the image of the status of the file on the front-side of the
          * card (ie. Shared, Public, Locked, etc). When available, it also
          * manage the Draft label visibility.
          */
         manageVisibility : function() {
            if (!this.value) {
               console.error('value is a required member');
               return;
            }
            // add the visibility status and the alternative text
            this._addClass(this.imageStatus, _imageStatusClass, this.value.fileVisibilityLocking, 'ft_');
            // Draft
            if (this.value.fileDraft) {
               domConstruct.place('<span role="note">' + this['ft_' + this.value.fileDraft] + '</span>', this.imageThumb, "after");
            }
         },

         /**
          * Provide the thumbnail image (front-side) based on the objectTypeName
          * or the extension of the file name. Also hide the actions not
          * compatible with the file type. It could be a standard icon (ie. zip)
          * or an image returned by IBM Docs APIs
          */
         manageFileType : function() {
            if (!this.value) {
               console.error('value is a required member');
               return;
            }
            if (!this._addClass(this.imageThumb, _imagefileTypeClass, this.value.fileType)) {
               domAttr.set(this.imageThumb, 'src', this.value.fileImagePath);
               domStyle.set(this.imageThumb, 'maxWidth', '200px');
               domStyle.set(this.imageThumb, 'maxHeight', '132px');
            }
            // Hide the action not compatible with the file type.
            if (this._contains(_editableFileTypes, this.value.fileType)) {
               this._hideAction(this.backDownload); // hide "Download" action
            }
            else {
               this._hideAction(this.backEdit); // hide "Edit" action
            }
         },

         /**
          * Hide an action on the back-side of the card
          * 
          * @private
          * @param {Object}
          *           actionAnchor - the anchor object of the action
          */
         _hideAction : function(actionAnchor) {
            domStyle.set(actionAnchor, 'display', 'none');
            domAttr.set(actionAnchor, "aria-hidden", 'true');
         },

         /**
          * Action to download the file. It requires a stopPropagation as
          * "preview" is triggered also at the "click" of the "back-side" div.
          * 
          * @param {Object}
          *           e - the event object
          */
         download : function(e) {
            // TODO
            alert('download');
            event.stop(e);
         },

         /**
          * Action to preview the file of the current thumbnail (lightbox)
          * 
          * @param {Object}
          *           e - the event object
          */
         preview : function(e) {
            // TODO
            alert('preview');
         },

         /**
          * Action to view all the detailed information about the file. It
          * requires a stopPropagation as "preview" is triggered also at the
          * "click" of the "back-side" div.
          * 
          * @param {Object}
          *           e - the event object
          */
         summary : function(e) {
            // TODO
            alert('summary');
            event.stop(e);
         },

         /**
          * Action to edit the file with IBM Docs. It requires a stopPropagation
          * as "preview" is triggered also at the "click" of the "back-side"
          * div.
          * 
          * @param {Object}
          *           e - the event object
          */
         edit : function(e) {
            // TODO
            alert('edit');
            event.stop(e);
         },

         /**
          * Action to display author or modifier profile. It requires a
          * stopPropagation as "preview" is triggered also at the "click" of the
          * "back-side" div.
          * 
          * @param {Object}
          *           e - the event object
          */
         showProfile : function(e) {
            // TODO
            alert('showProfile');
            event.stop(e);
         },

         /**
          * Provide a way to force the selection or deselection of the widget
          * It's used by the container widget (ie. select all / deselect all)
          * 
          * @param {boolean}
          *           status - true if force selection, false if force
          *           deselection
          */
         forceSelection : function(status) {
            if (this.isSelected != status) {
               this.checkToggle();
            }
         }

      });
   });
