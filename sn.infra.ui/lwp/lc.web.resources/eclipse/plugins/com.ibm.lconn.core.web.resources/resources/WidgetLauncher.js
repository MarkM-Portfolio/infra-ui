/* ***************************************************************** */
/*                                                                   */
/* IBM Confidential                                                  */
/*                                                                   */
/* OCO Source Materials                                              */
/*                                                                   */
/* Copyright IBM Corp. 2010, 2015                                    */
/*                                                                   */
/* The source code for this program is not published or otherwise    */
/* divested of its trade secrets, irrespective of what has been      */
/* deposited with the U.S. Copyright Office.                         */
/*                                                                   */
/* ***************************************************************** */

dojo.provide("lconn.core.WidgetLauncher");

dojo.require("lconn.core.url");
dojo.require("lconn.core.config");
dojo.require("lconn.core.auth");
dojo.require("lconn.core.help")
dojo.require("lconn.core.Res");
dojo.require("com.ibm.oneui.util.Url");
dojo.require("lconn.core.SearchBar");
dojo.require("com.ibm.lconn.gadget.support.WidgetSite");

dojo.requireLocalization("lconn.core.config", "widgetbundles"); // Generated by administrator configuration

(function(iContainer2) {

   var _res = new lconn.core.Res();
   _res.loadDefaultBundle();
   var _strBundle = _res.resBundle;
   
   function _h(el) { dojo.addClass(el, "lotusHidden"); };
   function _u(el) { dojo.removeClass(el, "lotusHidden"); };

/*
   function _getHelpBookUrl(topic) {
      var url = null, svcUrl = lconn.core.url.getServiceUrl(lconn.core.config.services.help);
      if (svcUrl)
          url = svcUrl.toString() + "/topic/" + (topic || "com.ibm.lotus.connections.common.help/euframe.html");
      return url; 
   };
*/
   function _openHelpWindow(topic) {
/*
      var h = Math.max(window.screen.height / 4, 800);
      var w = Math.max(window.screen.width / 4, 800)
      var options = "height="+h+",width="+w+",status=yes,toolbar=yes,menubar=no,location=no,scrollbars=yes,resizable=yes";
      var url = _getHelpBookUrl(topic);
      window.open(url, "helpWindow", options).focus();
*/
      lconn.core.help.launchHelp(topic);
   };

   function _applyConnectionsLinks(a) {
      if (a.href) {
         if (/login_app_replace$/.test(a.href)) {
            a.href = "javascript:;";
            dojo.connect(a, "onclick", null, function() {
               lconn.core.auth.login();
            });
         } else if (/logout_app_replace$/.test(a.href)) {
            a.href = "javascript:;";
            dojo.connect(a, "onclick", null, function(){
               var u = lconn.core.auth.getLogoutUrl(window.location.href);
               lconn.core.auth.logout(u);
            });
         } else if (/help_app_replace$/.test(a.href)) {
            a.href = "javascript:;";
            dojo.connect(a, "onclick", null, function(){
                _openHelpWindow();
            });
         }
      }
   };

   function _getWidgetResourcedString(bundleRefId, attribute) {
      var widgetMessages = dojo.i18n.getLocalization("lconn.core.config", "widgetbundles");
      var prefix = bundleRefId || "lc_default";
      var resourceBundle = (prefix == "lc_default") ? widgetMessages : widgetMessages[prefix];
      if (!resourceBundle) {
         if (dojo.config.isDebug) {
            console.log("unable to find resource bundle for '"+prefix+"'");
         }
         resourceBundle = {};
      }
      var value = resourceBundle[attribute];
      return (value === undefined) ? attribute : value;
   };

   function _getSearchRoot() {
      var isSecure = com.ibm.oneui.util.Url.secure;
      var svcUrl = lconn.core.url.getServiceUrl(lconn.core.config.services.search, isSecure);
      return svcUrl.uri;
   };

   function _renderTitleBar(opt, el) {
      var title = document.title = _getWidgetResourcedString(opt.bundleRefId, opt.widgetDefId);

      var rightCorner = dojo.create("div", {className: "lotusRightCorner"}, el);
         var inner = dojo.create("div", {className: "lotusInner"}, rightCorner);

            var h2 = dojo.create("h2", { className: "lotusHeading"}, inner);
               var span = dojo.create("span", {
                  className: "lotusText", 
                  innerHTML: title
               }, h2);

            var form = dojo.create("form", {}, inner);
               var searchBar = new lconn.core.SearchBar({
                  lblAllConnections: _strBundle.rs_all_connections,
                  lblAdvanced: _strBundle.rs_advanced,
                  lblSearch: _strBundle.rs_search,
                  lblSelectScope: _strBundle.rs_select_scope,
                  searchContextPath: _getSearchRoot(),
                  onSubmit: function() {
                     return true;
                  }
               }, form);
   };

   function _renderFrame(opt) {
      var banner = dojo.byId("lotusBanner");
      dojo.forEach(banner.getElementsByTagName("A"), _applyConnectionsLinks);

      var titleBar = dojo.byId("lotusTitleBar");
      _renderTitleBar(opt, titleBar);
   };
   
   function _initWidgetSpec(opt) {
      if (!opt || !opt.widgetDefUrl) return;
     
      var widgetSpec = null;
      var items = [];
     
      if (opt.widgetAttrs) {
         try {
            var widgetAttrsObj = opt.widgetAttrs;
            for (key in widgetAttrsObj) {
               var o = {};
               o["id"] = key;
               o["value"] = widgetAttrsObj[key];
               items.push(o);
            }
         }
         catch(e) {
            if (dojo.config.isDebug) {
               console.log("error on widget attributes parsing");
            }
            return null;
         }
      }
     
      var widgetSpec = {
         "definitionUrl": opt.widgetDefUrl,
         "componentType": "iWidget",
         "moduleId": opt.widgetDefId,
         "instanceData" : {
            "itemSet":[{
               "id":"attributes",
               "item":items
                  }]
         }
      };
      return widgetSpec;
   };

   lconn.core.WidgetLauncher.start = function(opt, node) {
      if (!node) return;

      _renderFrame(opt);
     
      var widgetSpec = _initWidgetSpec(opt);

      if (!widgetSpec) {
         if (dojo.config.isDebug) {
            console.log("bad widget spec!");
         }
         return;
      }
    
      if (dojo.config.isDebug) {
         console.log("widget spec: " + dojo.toJson(widgetSpec));
      }
    
      iContainer2.getCommonContainer().then(function() {
            window.getServiceManager().getService(cre$.services.EVENTSERVICE).then(function(evtSrv){
               evtSrv.subscribeEvent(cre$.constants.event.topic.WIDGET_LOADED + opt.widgetDefId, null, function(){
                  _h(dojo.byId("lconnApplicationLoading"));
                  _u(dojo.byId("lotusBanner"), "lotusHidden");
                  _u(dojo.byId("lotusTitleBar"), "lotusHidden");
                  _u(dojo.byId("lotusMain"), "lotusHidden");
                  _u(dojo.byId("lotusFooter"), "lotusHidden");
               });
            })
         
         var widget = new com.ibm.lconn.gadget.support.WidgetSite({
          widgetSpec: widgetSpec
        }, node);
        widget.startup();
     });
   }
}(com.ibm.lconn.gadget.container.iContainer2));
