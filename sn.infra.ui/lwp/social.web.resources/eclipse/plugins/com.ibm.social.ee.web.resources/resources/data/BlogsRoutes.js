/* ***************************************************************** */
/*                                                                   */
/* IBM Confidential                                                  */
/*                                                                   */
/* OCO Source Materials                                              */
/*                                                                   */
/* Copyright IBM Corp. 2011, 2015                                    */
/*                                                                   */
/* The source code for this program is not published or otherwise    */
/* divested of its trade secrets, irrespective of what has been      */
/* deposited with the U.S. Copyright Office.                         */
/*                                                                   */
/* ***************************************************************** */

dojo.provide("com.ibm.social.ee.data.BlogsRoutes");

dojo.require("com.ibm.social.ee.data.AbstractRoutes");
dojo.require("com.ibm.social.ee.util.misc");
dojo.require("com.ibm.social.incontext.util.url");

(function () {
var url = com.ibm.social.incontext.util.url, misc = com.ibm.social.ee.util.misc;
dojo.declare("com.ibm.social.ee.data.BlogsRoutes", com.ibm.social.ee.data.AbstractRoutes, {	
   service: "blogs",	
   //This will construct the blog entry/ideation blog idea url even if the event was generated by commenting or making
   //other changes on the entry. In that case the url we get has the comment id and not the entry id so we have to construct it

   getBlogEntryUrl: function (context) {
	   var contentUrl = context.connectionsContentUrl;
	   var entryId = context.correlationid;
	   if(typeof entryId == 'undefined' || !entryId) {
	   entryId = misc.getItemId(context.id);
	   }
	   
	   var roller = "/roller-ui/rendering/feed/";
	   //Handling url of type    /blogs/roller-ui/rendering/feed/$BlogName/entry/atom?entryid=$id
	   var baseUrlEndIndex = contentUrl.lastIndexOf(roller);
       if(baseUrlEndIndex !== -1) {
         var restUrl = contentUrl.substring(baseUrlEndIndex + roller.length);
         var blogIdEndIndex = restUrl.indexOf("/");
         var blogId = restUrl.substring(0, blogIdEndIndex);
       } else {
        //Leaving this to handle the old blog uri as they might change back to it
        // /blogs/$BlogName/feed/entry/atom?entryid=$Id
         var baseUrlEndIndex = contentUrl.lastIndexOf("/feed/");
         var baseAndBlogIdUrl = contentUrl.substring(0, baseUrlEndIndex);
         var blogIdStartIndex = baseAndBlogIdUrl.lastIndexOf("/");
         var blogId = baseAndBlogIdUrl.substring(blogIdStartIndex + 1, blogIdEndIndex);
       }
       return this.contructBlogEntryUrl(blogId, entryId);
	},
	getBlogCommentUrl: function (context, bIncludeContext) {
	   var contentUrl = context.connectionsContentUrl;
	   var commentId = misc.getItemId(context.id);
	   
	   var roller = "/roller-ui/rendering/feed/";
	   //Handling url of type    /blogs/roller-ui/rendering/feed/$BlogName/entry/atom?entryid=$id
	   var baseUrlEndIndex = contentUrl.lastIndexOf(roller);
       if(baseUrlEndIndex !== -1) {
         var restUrl = contentUrl.substring(baseUrlEndIndex + roller.length);
         var blogIdEndIndex = restUrl.indexOf("/");
         var blogId = restUrl.substring(0, blogIdEndIndex);
       } else {
          //Leaving this to handle the old blog uri as they might change back to it
          // /blogs/$BlogName/feed/entry/atom?entryid=$Id
         var baseUrlEndIndex = contentUrl.lastIndexOf("/feed/");
         var baseAndBlogIdUrl = contentUrl.substring(0, baseUrlEndIndex);
         var blogIdStartIndex = baseAndBlogIdUrl.lastIndexOf("/");
         var blogId = baseAndBlogIdUrl.substring(blogIdStartIndex + 1, blogIdEndIndex);
       }
       return this.contructBlogCommentUrl(blogId, commentId, bIncludeContext);
	},
	contructBlogEntryUrl : function (blogId, entryId) {
		var eeUrl =  this.getServiceUrl() + (this.oauth ? "/oauth/" : "/") + blogId + "/feed/entry/atom";
		// Append language to avoid redirects
		var lang = dojo.locale || "en";
		lang = lang.replace("-", "_");
		return url.rewrite(eeUrl, {entryid: entryId, lang: lang });
	},
	contructBlogCommentUrl : function (blogId, commentId, bIncludeContext) {
		var eeUrl =  this.getServiceUrl() + (this.oauth ? "/oauth/" : "/") + blogId + "/feed/comment/atom";
		// Append language to avoid redirects
		var lang = dojo.locale || "en";
		lang = lang.replace("-", "_");
		return url.rewrite(eeUrl, {commentid: commentId, contentFormat: "html", lang: lang, includeContext: (bIncludeContext ? "true" : "false") });
	}
});
})();