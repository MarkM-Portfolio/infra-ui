/* ***************************************************************** */
/*                                                                   */
/* IBM Confidential                                                  */
/*                                                                   */
/* OCO Source Materials                                              */
/*                                                                   */
/* Copyright IBM Corp. 2006, 2015                                    */
/*                                                                   */
/* The source code for this program is not published or otherwise    */
/* divested of its trade secrets, irrespective of what has been      */
/* deposited with the U.S. Copyright Office.                         */
/*                                                                   */
/* ***************************************************************** */

define([
      "dojo",
      "dojo/_base/kernel",
      "dojo/dom-class",
      // "dojo/i18n!./config/nls/widgetbundles",
      "dojo/i18n!ic-core/nls/strings",
      "dojo/dom-style",
      "dojo/has",
      // "dojo/i18n!./nls/widgets",
      "dojo/dom",
      "dojo/_base/lang",
      "dojo/cookie",
      "dojo/_base/array",
      "dojo/i18n",
      "dojo/dom-construct",
      "dojo/dom-attr",
      "dojo/on",
      "dojo/query",
      "dojo/parser",
      "dojo/request",
      "dojo/string",
      "dojo/topic",
      "dijit/Dialog",
      "dijit/_Widget",
      "ic-ui/MessageBox",
      // "lconn/communities/bizCard/dialogs/deleteConfirmWidget",
      "./HTMLUtil",
      "./aria/Toolbar",
      "./errorhandling",
      "./help",
      "./utilities",
      "./xpath"
],
   function(dojo, kernel, domClass, /* i18nwidgetbundles, */i18nstrings, domStyle, has, /* i18nwidgets, */dom, lang, cookie, array, i18n, domConstruct, domAttr, on, query, parser, request, string, topic, Dialog, _Widget, MessageBox, /* deleteConfirmWidget, */HTMLUtil, Toolbar, errorhandling, help, utilities, xpath) {

      // all requires are handled by lconn.core.WidgetPlacement
      // Has content from communities UI strings
      // Generated by administrator configuration
      kernel.deprecated("lconn.core.WidgetPlacementMM", "Will be replaced with OpenSocial container logic", "3.5");

      if (typeof (dojo.global.WidgetPlacementConfig) == "undefined")
         dojo.global.WidgetPlacementConfig = {
            debug : false,
            appStartupDate : ""
         };

      var messages = {};// i18nwidgets;
      var widgetMessages = {};// i18nwidgetbundles;
      var coreMessages = i18nstrings;

      var WidgetPlacementMM = {};

      WidgetPlacementMM.debug = WidgetPlacementConfig.debug; // FIXME: use
      // dojo.config.isDebug
      // keeps a list of all the widget-containers avaiable. format:
      // [containerDOMId, (true | false)]
      WidgetPlacementMM.uiLocations = {};
      WidgetPlacementMM.dropZoneObjects = {};

      // ** common private functions */
      var getDisplayedUserInfo = function() {
         var displayedUserInfo = null;
         if (WidgetPlacementConfig.isProfilesEnv) {
            if (profilesData.displayedUser != null) {
               if (profilesData.displayedUser.profileType == null || profilesData.displayedUser.profileType == "")
                  profilesData.displayedUser.profileType = "default";
            }
            displayedUserInfo = profilesData.displayedUser;
         }
         return displayedUserInfo;
      };

      var getWidgetConfigAttrs = function(attributesMap, widgetDefinitionNode, widgetInstanceNode, widgetData) {
         if (attributesMap == null) {
            attributesMap = [];
         }
         else if (attributesMap.length > 1) {
            return attributesMap;
         }

         var widgetId = widgetDefinitionNode.getAttribute("defId");
         var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + widgetId + "']/tns:configData/tns:attr";
         var nodes = xpath.selectNodes(exp3, widgetData);
         for (var i = 0; nodes.length != null && i < nodes.length; i++) {
            var value = nodes[i].getAttribute("value");
            value = lconn.core.i18nOverrider.replaceParams(value, WidgetPlacementConfig.params);
            attributesMap.push({
               entryName : nodes[i].getAttribute("key"),
               entryValue : value
            });
         }

         exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + widgetId + "']/tns:itemSet/tns:item";
         nodes = xpath.selectNodes(exp3, widgetData);
         for (var i = 0; nodes.length != null && i < nodes.length; i++) {
            var value = nodes[i].getAttribute("value");
            value = lconn.core.i18nOverrider.replaceParams(value, WidgetPlacementConfig.params);
            attributesMap.push({
               entryName : nodes[i].getAttribute("name"),
               entryValue : value
            });
         }

         if (widgetInstanceNode != null) {
            var widgetInstanceId = widgetInstanceNode.getAttribute("instanceId");
            WidgetPlacementConfig.params['widgetInstanceId'] = widgetInstanceId;
            var exp4 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" + widgetInstanceId + "']/tns:itemSet/tns:item";
            nodes = xpath.selectNodes(exp4, widgetData);
            for (var i = 0; nodes.length != null && i < nodes.length; i++) {
               var value = nodes[i].getAttribute("value");
               value = lconn.core.i18nOverrider.replaceParams(value, WidgetPlacementConfig.params);
               attributesMap.push({
                  entryName : nodes[i].getAttribute("name"),
                  entryValue : value
               });
            }
         }
         return attributesMap;
      };

      //
      // Returns node displaying the widget.
      // NULL if unable to get widget info from server.
      //
      WidgetPlacementMM.getWidgetDocAndRenderWidget = function(widgetDefId, widgetDefinitionNode, widgetInstanceId, uiLocation, widgetMode, skinType, addToNavBar, addDropZone, attributesMap) {
         var temp = function(response, ioArgs) {
            var widgetNode = loaded(response, ioArgs);
            if (widgetNode == null) { // Unable to load widget
               WidgetPlacementMM.showWidgetErrorInHeadline(messages["errorDefaultMsg"], false);
               // Unhide the message area
               domStyle.set("contentArea", {
                  display : "inline",
                  visibility : "visible"
               });
            }
         };

         var loaded = function(response, ioArgs) {
            var widgetData = response;
            WidgetPlacementConfig.widgetConfigXMLDocument = widgetData;
            var widgetInstanceNode = null;

            if (widgetDefId == null && widgetDefinitionNode != null)
               widgetDefId = widgetDefinitionNode.getAttribute("defId");

            if (widgetDefinitionNode == null) {
               var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" + widgetDefId + "']";
               widgetDefinitionNode = xpath.selectSingleNode(exp3, widgetData);
               if (widgetDefinitionNode == null) {
                  console.log("Unable to find widget definition for: " + widgetDefId);
                  return (null);
               }
               widgetDefId = widgetDefinitionNode.getAttribute("defId");
            }

            if (widgetInstanceId == null) {
               widgetInstanceId = widgetDefId;
            }
            else {
               var exp4 = "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" + widgetInstanceId + "']";
               widgetInstanceNode = xpath.selectSingleNode(exp4, widgetData);
            }

            if (widgetInstanceNode == null) {
               widgetInstanceNode = widgetData.createElement("widgetInstance");
               widgetInstanceNode.setAttribute("uiLocation", uiLocation);
               widgetInstanceNode.setAttribute("defIdRef", widgetDefId);
               widgetInstanceNode.setAttribute("instanceId", widgetInstanceId);
            }

            if (skinType == null)
               skinType = widgetDefinitionNode.getAttribute("skinType");

            var htmlcontent = null;
            var htmlParentNode = null;

            var uiLocationElementId = "widget-container-" + uiLocation;
            var uiLocationElement = dom.byId(uiLocationElementId)
            var dropZone = dom.byId(uiLocation + "DropZone");
            if (dropZone == null) {
               // create drop-zone element if drop zones are supported and a
               // drop zone does not exist for this uiLocation SPR#NZSG8CN6AH
               if (lconn.dboard && lconn.dboard.dnd) {
                  var dropZoneDOMId = uiLocation + "DropZone";
                  var dropZone = document.createElement("div");
                  dropZone.setAttribute('id', dropZoneDOMId);
                  if (uiLocationElement) {
                     uiLocationElement.appendChild(dropZone);
                  }
                  else {
                     dropZone = null;
                  }
               }
               else {
                  dropZone = dom.byId(uiLocationElementId); // if no drop
                  // zone support,
                  // mimic the
                  // current
                  // uiLocation as
                  // the drop-zone.
                  // SPR#AVEI8DNT2Z
               }
            }
            htmlParentNode = dropZone;

            if (widgetMode == "fullpage") {
               var displayedUserInfo = null;
               var url = widgetDefinitionNode.getAttribute("url");
               attributesMap = getWidgetConfigAttrs(attributesMap, widgetDefinitionNode, widgetInstanceNode, widgetData);
               htmlParentNode.innerHTML += AddiWidgetMicroformat(widgetInstanceId,
                  url,
                  getDisplayedUserInfo(),
                  attributesMap,
                  widgetMode,
                  getEscapedWidgetName(widgetDefinitionNode, widgetInstanceNode));
               lconn.core.mumOverride.renderSingleWidget(widgetInstanceId);
               // lconn.core.utilities.processUntilElementIsFound(widgetInstanceId
               // + "Section",
               // function(){dojo.parser.parse(dojo.byId(widgetInstanceId +
               // "Section"));});
            }
            else {
               var newParentNode = document.createElement("div");

               // if(dropZone != null && addDropZone != null)
               // {
               // newParentNode.style.display = "inline";
               // newParentNode.id = uiLocation + "DropZone";
               // newParentNode.className = "target";
               // }
               var htmlContent = GetCompleteWidgetHTMLContent(widgetDefinitionNode,
                  widgetInstanceNode,
                  getDisplayedUserInfo(),
                  widgetData,
                  true,
                  skinType,
                  widgetMode,
                  addToNavBar,
                  attributesMap);

               newParentNode.innerHTML = htmlContent;
               if (htmlParentNode) {
                  htmlParentNode.appendChild(newParentNode.firstChild);
               }

               var dropZoneDOMId = uiLocation + "DropZone";
               if (addDropZone == null && uiLocationElement) { // need to
                  // check
                  // uiLocationElement
                  // since
                  // the
                  // widget
                  // may have
                  // been
                  // added to
                  // another
                  // page
                  // if(dropZone == null)// the dropZone has not been
                  // created, create it now
                  if (WidgetPlacementMM.dropZoneObjects[dropZoneDOMId] == null)
                     utilities.processUntilElementIsFound(dropZoneDOMId, parseDojoWidgetsAndRegisterNewDNDDropZone, null, {
                        uiLocation : uiLocation,
                        dropZoneDOMId : dropZoneDOMId
                     });
                  else
                     // use exising dropzone object
                     utilities.processUntilElementIsFound(widgetInstanceId + 'Section', parseDojoWidgetsAndAddDNDItem, null, {
                        dropZoneDOMId : dropZoneDOMId,
                        widgetInstanceId : widgetInstanceId
                     });
               }
               lconn.core.mumOverride.renderSingleWidget(widgetInstanceId);
               utilities.processUntilElementIsFound(widgetInstanceId + "Section", function() {
                  parser.parse(dom.byId(widgetInstanceId + "Section"));
               }, null, null, false);
            }

            return (widgetDefinitionNode);
         };

         if (WidgetPlacementConfig.widgetConfigXMLDocument != null && !dojo.global.staleXMLConfig) {
            temp(WidgetPlacementConfig.widgetConfigXMLDocument);
         }
         else {
            var url = WidgetPlacementConfig.layoutInfoUrl;
            if (!dojo.global.staleXMLConfig) {
               url += "&lastMod=" + WidgetPlacementConfig.lastMod;
            }
            request(url, {
               method : "GET",
               handleAs : "xml",
               sync : true
            }).then(function() {}, errorhandling.DefaultXHRErrorHandler);
            dojo.global.staleXMLConfig = false;
         }
      };

      var parseDojoWidgetsAndRegisterNewDNDDropZone = function(dropZoneDOMNode, parameters) {
         parser.parse(dropZoneDOMNode);
         var dropZoneObject = createDropZoneObject(parameters.uiLocation, dropZoneDOMNode);
         WidgetPlacementMM.dropZoneObjects[parameters.dropZoneDOMId] = dropZoneObject;
      };

      var parseDojoWidgetsAndAddDNDItem = function(widgetSectionDOMNode, parameters) {
         parser.parse(widgetSectionDOMNode);
         var dropZoneObject = WidgetPlacementMM.dropZoneObjects[parameters.dropZoneDOMId];
         dropZoneObject.setItem(widgetSectionDOMNode.id, {
            node : widgetSectionDOMNode,
            id : widgetSectionDOMNode.id,
            data : parameters.widgetInstanceId,
            type : "widget"
         });
         // dropZoneObject.setItem(widgetInstanceId+'Section', {data:
         // widgetInstanceId, type: "widget"});
         // dropZoneObject.insertNodes(false, [{id:
         // widgetInstanceId+'Section', data: widgetInstanceId, type:
         // "widget", node: dojo.byId(widgetInstanceId+'Section')}]);
      };
      //      
      // var createDropZoneObject = function(uiLocation, dropZoneDOMNode) {
      // var params = {
      // jsId: uiLocation,
      // accept: "widget",
      // withhandles: true,
      // skipForm: true
      // };
      // var dropZoneObject = new lconn.dboard.dnd.Source(dropZoneDOMNode,
      // params);
      // return dropZoneObject;
      // };
      //      
      // var getMMItemMarkup = function(key, value) {
      // return "<a class='mm_Item' type='string' style='display: none;'
      // href='#" + key + "'>" + HTMLUtil.escapeText(value) + "</a>";
      // };
      //      
      // var AddiWidgetMicroformat = function(widgetInstanceId, url,
      // displayedUserInfo, attributesMap, widgetMode, computedWidgetTitle) {
      // WidgetPlacementConfig.params['widgetInstanceId'] = widgetInstanceId;
      // url = lconn.core.i18nOverrider.replaceParams(url,
      // WidgetPlacementConfig.params);
      // var htmlContent = "<div id='" + widgetInstanceId + "'
      // class='mm_iWidget'><a class='mm_Definition' style='display:
      // none;visibility:hidden;' href='" + url + "' ></a>";
      //      
      // if (widgetMode != null) {
      // htmlContent += '<div class="mm_ItemSet" title="idescriptor"
      // style="display: none;">' + '<a class="mm_Item" href="#mode"
      // style="visibility:hidden">' + widgetMode + '</a>' + '</div>';
      // }
      //      
      // htmlContent += "<div class='mm_ItemSet' title='attributes'
      // style='display: none;'>";
      //      
      // if (WidgetPlacementConfig.isProfilesEnv) {
      // if (displayedUserInfo.uid != null) htmlContent +=
      // getMMItemMarkup("profileDisplayedUserUID", displayedUserInfo.uid);
      // if (displayedUserInfo.key != null) htmlContent +=
      // getMMItemMarkup("profileDisplayedUserKey", displayedUserInfo.key);
      // }
      // if (WidgetPlacementConfig.resourceId != null) htmlContent +=
      // getMMItemMarkup("resourceId", WidgetPlacementConfig.resourceId);
      // if (WidgetPlacementConfig.parentResourceId != null) htmlContent +=
      // getMMItemMarkup("parentResourceId",
      // WidgetPlacementConfig.parentResourceId);
      // if (WidgetPlacementConfig.resourceType != null) htmlContent +=
      // getMMItemMarkup("resourceType", WidgetPlacementConfig.resourceType);
      // if (WidgetPlacementConfig.resourceName) htmlContent +=
      // getMMItemMarkup("resourceName", WidgetPlacementConfig.resourceName);
      // if (computedWidgetTitle) htmlContent +=
      // getMMItemMarkup("computedWidgetTitle", computedWidgetTitle);
      // for (var i = 0; attributesMap != null && i < attributesMap.length; i++)
      // htmlContent += getMMItemMarkup(attributesMap[i].entryName,
      // attributesMap[i].entryValue);
      //      
      // htmlContent += "</div>" + "</div>";
      //      
      // WidgetPlacementConfig.widgetInstanceId = widgetInstanceId;
      // return htmlContent;
      // };
      //      
      // var getNavBar = function() {
      // var lotusNavBar = dom.byId("lotusProfileNavBar");
      // if (lotusNavBar == null) lotusNavBar = dom.byId("lotusNavBar");
      // return lotusNavBar;
      // };
      //      
      // // FIXME: this needs to be refactored to be in a package, or part of a
      // // container service
      // WidgetPlacementMM.destroyWidget = function(widgetInstanceId,
      // uiLocation, destroyDropDownMenu, destroySubArea) {
      // var temp333 = dijit.byId(widgetInstanceId + "moreActions");
      // if (temp333 != null && (destroyDropDownMenu == true))
      // temp333.destroy();
      //      
      // var temp3344 = dijit.byId(widgetInstanceId + "_toggleAction");
      // if (temp3344 != null && (destroyDropDownMenu == true))
      // temp3344.destroy();
      // lconn.core.mumOverride.destroyWidget(widgetInstanceId);
      //      
      // var widgetDOmSubAreaElm = null;
      //      
      // if (destroySubArea != null || destroySubArea == true)
      // widgetDOmSubAreaElm = document.getElementById(widgetInstanceId +
      // "SubArea");
      //      
      // if (widgetDOmSubAreaElm != null) widgetDOmSubAreaElm.innerHTML = "";
      // };
      //      
      // WidgetPlacementMM.closeFullPageWidgetIfOpen = function() {
      // if (WidgetPlacementMM.currentFullpageWidgetInstanceId != null) {
      // WidgetPlacementMM.destroyWidget(WidgetPlacementMM.currentFullpageWidgetInstanceId,
      // null, false, true);
      // WidgetPlacementMM.currentFullpageWidgetInstanceId = null;
      // }
      // }
      //      
      // WidgetPlacementMM.closeSwitchView = function() {
      // if (WidgetPlacementMM.currentFullpageWidgetInstanceId != null)
      // WidgetPlacementMM.destroyWidget(WidgetPlacementMM.currentFullpageWidgetInstanceId,
      // null, false);
      // utilities.hide("widget-container-fullpage", false, true);
      // destroyWidgetContainer("fullpage");
      // WidgetPlacementMM.isInWidgetFullpageMode = true;
      // }
      //      
      // // Define as local only until needed
      //      
      // function getWidgetNameFromNode(widgetDefinitionNode) {
      // return window.getResourcedStringForItem(widgetDefinitionNode, "defId");
      // }
      //      
      // // For a node being inserted into nav bar - find child node after which
      // it
      // // should be inserted.
      // // This insertion node will be the last item in the nav bar with the
      // same
      // // column number.
      // //
      // WidgetPlacementMM.getInsertionPoint = function(lotusNavBar, li) {
      // var result = null;
      // var liLocation = li.getAttribute("uiLocation");
      //      
      // if (liLocation == "col2") {
      // // Get all col2 widgets, find last one to insert after.
      // var navBarWidgets = query("li[uilocation='col2']", lotusNavBar);
      // if (navBarWidgets.length > 0) {
      // result = navBarWidgets[navBarWidgets.length - 1];
      // } else {
      // result = lotusNavBar.children[lotusNavBar.children.length - 1];
      // }
      // } else { // Not "col2". Add to end of nav bar.
      // result = lotusNavBar.children[lotusNavBar.children.length - 1];
      // }
      //      
      // return (result);
      // };
      //      
      // var GetCompleteWidgetHTMLContent = function(widgetDefinitionNode,
      // widgetInstanceNode, displayedUserInfo, widgetData, canPersonalize,
      // skinType, widgetMode, addToNavBarBoolean, attributesMap) {
      // if (typeof(widgetDefinitionNode) == "undefined") return "";
      //      
      // var url = widgetDefinitionNode.getAttribute("url");
      // var modes = widgetDefinitionNode.getAttribute("modes");
      // var widgetInstanceId = widgetInstanceNode.getAttribute("instanceId");
      // var widgetDefId = widgetDefinitionNode.getAttribute("defId");
      // var navBarLinkText =
      // widgetDefinitionNode.getAttribute("navBarLinkText");
      // var navBarLink = widgetDefinitionNode.getAttribute("navBarLink");
      // var helpLink = widgetDefinitionNode.getAttribute("helpLink");
      // var fixedPosition = widgetDefinitionNode.getAttribute("fixedPosition");
      // var isDisplayLoginRequired =
      // widgetDefinitionNode.getAttribute("displayLoginRequired");
      // var substitutedHelpLink = null;
      // if (helpLink != null && helpLink != "") substitutedHelpLink =
      // lconn.core.i18nOverrider.replaceParams(helpLink,
      // WidgetPlacementConfig.params);
      // var isOptionalWidget = false;
      // var additionalHTML = "";
      //      
      // var lcWidgets = i18nwidgets;
      //      
      // if (widgetInstanceId != null) isOptionalWidget = true;
      //      
      // if (widgetInstanceId == null) widgetInstanceId = widgetDefId;
      // var webInstanceId = widgetInstanceId;
      // if (widgetMode == "edit") {
      // webInstanceId += "edit";
      // }
      // if (addToNavBarBoolean == null || addToNavBarBoolean == true) {
      // var selected = false;
      // if (WidgetPlacementConfig.NavBarSelectedMenuItem != null) {
      // var selectedWidget = WidgetPlacementConfig.NavBarSelectedMenuItem;
      // var idx = selectedWidget.indexOf('_');
      // if (idx > 0) {
      // selectedWidget = selectedWidget.substring(0, idx);
      // }
      // if (selectedWidget == widgetDefId) {
      // selected = true;
      // if (WidgetPlacementConfig.navBarOverViewElementId != null) {
      // var navBarItem =
      // dom.byId(WidgetPlacementConfig.navBarOverViewElementId);
      // if (navBarItem != null) {
      // domClass.remove(navBarItem, 'lotusSelected');
      // }
      // }
      // }
      // }
      // addToNavBar(widgetDefinitionNode, widgetInstanceNode,
      // displayedUserInfo, selected, navBarLink, true, navBarLinkText);
      // }
      //      
      // var isWidgetNeedRefresh = true;
      // if (!WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired ==
      // "true") {
      // isWidgetNeedRefresh = false;
      // }
      // var widgetName = window.getEscapedWidgetName(widgetDefinitionNode,
      // widgetInstanceNode);
      // var htmlContent = null;
      // var cookieName = widgetDefId + "-isMinimized";
      // var isMinimized = cookie(cookieName);
      //      
      // if (skinType == null || skinType == "") skinType = "use25OneUISkin";
      //      
      //      
      // if (skinType == "use25OneUISkin") {
      // var widgetStateString = "Open";
      // if (isMinimized != "true") widgetStateString = "Close";
      //      
      // var dndContent = "";
      // var cursor = "";
      // if (canPersonalize && isOptionalWidget) dndContent = ' dojoDndItem"
      // dndType="widget" skipForm="true" dndData="' + widgetInstanceId;
      // else cursor = 'style="cursor: default"';
      //      
      // htmlContent = '<div id="' + webInstanceId + 'Section"
      // class="lotusWidget2' + dndContent + '" widgetId="' + widgetInstanceId +
      // '" role="region" aria-labelledby="' + widgetInstanceId + 'Id" >';
      //      
      // var actionsAlt = messages['actions_alt'] || "Actions for: ${0}";
      // actionsAlt = string.substitute(actionsAlt, [widgetName]);
      //      
      // htmlContent += '<h2 class="ibmDndDragHandle" ' + cursor + '>' + '<span
      // class="lotusLeft" style="cursor: default" id="' + widgetInstanceId +
      // 'Id">' + widgetName + '</span>' + '<a id="widgetActionsMenu' +
      // widgetInstanceId + '" class="lotusIcon lotusActionMenu"
      // href="javascript:void(0);" onclick="WidgetPlacementMM.openMenu(event,
      // \'' + widgetInstanceId + '\',\'widgetActionsMenu' + widgetInstanceId +
      // '\');" title="' + actionsAlt + '" role="button" aria-haspopup="true"
      // aria-label="' + actionsAlt + '">' + '<img src="' +
      // _Widget.prototype._blankGif + '" alt=""/>' + '<span
      // class="lotusAltText">' + actionsAlt + '</span>' + '</a>' + '</h2>';
      //      
      // htmlContent += '<div dojoType="dijit.Menu" id="' + webInstanceId +
      // 'moreActions" style="display: none;">';
      // // '<div dojoType="dijit.MenuItem" label="Toggle"
      // // onclick=""></div>';
      // if (isMinimized != "true") htmlContent += '<div id="' + webInstanceId +
      // '_toggleAction" dojoType="dijit.MenuItem" label="' +
      // messages['widgets_Min'] + '"
      // onclick="WidgetPlacementMM.minimizeWidget(this,\'' + widgetInstanceId +
      // '\', \'' + widgetDefId + '\');"></div>';
      // else htmlContent += '<div id="' + webInstanceId + '_toggleAction"
      // dojoType="dijit.MenuItem" label="' + messages['widgets_Max'] + '"
      // onclick="WidgetPlacementMM.minimizeWidget(this,\'' + widgetInstanceId +
      // '\', \'' + widgetDefId + '\');"></div>';
      //      
      // if (isWidgetNeedRefresh) {
      // htmlContent += '<div dojoType="dijit.MenuItem" label="' +
      // messages['refresh'] + '" onclick="WidgetPlacementMM.fetchAndRefresh(\''
      // + widgetInstanceId + '\');"></div>';
      // } else {
      // // htmlContent += '<div dojoType="dijit.MenuItem"
      // // label="'+messages['refresh']+'"
      // // onclick="WidgetPlacementMM.refresh(\''+widgetInstanceId+'\');
      // // disabled=\'true\'"></div>';
      // // skip refresh item
      // }
      // if (modes != null && modes.indexOf("edit") != -1 && canPersonalize)
      // htmlContent += '<div class="edit_button" dojoType="dijit.MenuItem"
      // label="' + messages['edit'] + '" onclick="lconn.core.utilities.hide(\''
      // + widgetInstanceId + 'moreActions' + '\', true, true);_' +
      // widgetInstanceId +
      // '_iContext.iEvents.fireEvent(\'onModeChanged\',\'\',\'{\\\'newMode\\\':\\\'edit\\\'}\');"></div>';
      // if (modes != null && modes.indexOf("view") != -1 && canPersonalize)
      // htmlContent += '<div class="view_button" dojoType="dijit.MenuItem"
      // label="' + messages['view'] + '" onclick="lconn.core.utilities.hide(\''
      // + widgetInstanceId + 'moreActions' + '\', true, true);_' +
      // widgetInstanceId +
      // '_iContext.iEvents.fireEvent(\'onModeChanged\',\'\',\'{\\\'newMode\\\':\\\'view\\\'}\');"></div>';
      // if (substitutedHelpLink != null) htmlContent += '<div
      // dojoType="dijit.MenuItem" label="' + messages['help'] + '"
      // onclick="lconn.core.utilities.hide(\'' + widgetInstanceId +
      // 'moreActions' + '\', true, true);WidgetPlacementMM.openHelpWindow(\'' +
      // substitutedHelpLink + '\');"></div>';
      // if (isOptionalWidget && canPersonalize) {
      // var uiLocation = widgetInstanceNode.getAttribute("uiLocation");
      // if (!fixedPosition) {
      // htmlContent += '<div class="moveup_button" dojoType="dijit.MenuItem"
      // label="' + messages['widgets_MoveUp'] + '"
      // onclick="WidgetPlacementMM.moveUp(\'' + widgetInstanceId + '\',\'' +
      // uiLocation + '\');"></div>';
      // htmlContent += '<div class="movedown_button" dojoType="dijit.MenuItem"
      // label="' + messages['widgets_MoveDown'] + '"
      // onclick="WidgetPlacementMM.moveDown(\'' + widgetInstanceId + '\',\'' +
      // uiLocation + '\');"></div>';
      // }
      // htmlContent += '<div dojoType="dijit.MenuItem" label="' +
      // messages['hide'] + '" onclick="WidgetPlacementMM.removeWidget(\'' +
      // widgetInstanceId + '\', false);"></div>';
      // htmlContent += '<div dojoType="dijit.MenuItem" label="' +
      // messages['link.remove'] + '"
      // onclick="WidgetPlacementMM.removeWidget(\'' + widgetInstanceId + '\',
      // true);"></div>';
      //      
      // }
      // htmlContent += '</div>';
      //      
      // if (isMinimized != "true") {
      // if (!WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired ==
      // "true") {
      // htmlContent += "<div id='" + webInstanceId + "SubArea'
      // widgetloaded='false' widgetneedrefresh='false'>" +
      // lcWidgets["msg.loginRequired"];
      // } else {
      // // style='padding: 5px; margin-top: 15px'
      // htmlContent += "<div id='" + webInstanceId + "SubArea'
      // widgetloaded='true' widgetneedrefresh='false'>";
      // attributesMap = getWidgetConfigAttrs(attributesMap,
      // widgetDefinitionNode, widgetInstanceNode, widgetData);
      // htmlContent += AddiWidgetMicroformat(widgetInstanceId, url,
      // displayedUserInfo, attributesMap, widgetMode,
      // getEscapedWidgetName(widgetDefinitionNode, widgetInstanceNode));
      // }
      // } else {
      // htmlContent += "<div id='" + webInstanceId + "SubArea' style='display:
      // none;' widgetloaded='false'"; // padding:
      // // 5px;
      // // margin-top:
      // // 15px;
      // if (!WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired ==
      // "true") {
      // htmlContent += " widgetneedrefresh='false' >" +
      // lcWidgets["msg.loginRequired"];
      // } else {
      // htmlContent += " widgetneedrefresh='true' >";
      // }
      // }
      //      
      // htmlContent += "</div>"; // end subArea
      // htmlContent += "</div>"; // end section";
      // } else if (skinType == "skinless") {
      // // style='min-width: 160px;'
      // htmlContent = "<div id='" + webInstanceId + "Section'>";
      //      
      // if (!WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired ==
      // "true") {
      // htmlContent += "<div id='" + webInstanceId + "SubArea'
      // widgetloaded='false' >";
      // htmlContent += lcWidgets["msg.loginRequired"];
      // } else {
      // htmlContent += "<div id='" + webInstanceId + "SubArea'
      // widgetloaded='true' >";
      // attributesMap = getWidgetConfigAttrs(attributesMap,
      // widgetDefinitionNode, widgetInstanceNode, widgetData);
      // htmlContent += AddiWidgetMicroformat(widgetInstanceId, url,
      // displayedUserInfo, attributesMap, widgetMode,
      // getEscapedWidgetName(widgetDefinitionNode, widgetInstanceNode));
      // }
      //      
      // htmlContent += "</div>"; // end subArea
      // htmlContent += "</div>"; // end section";
      // }
      // return htmlContent;
      // };
      //      
      // WidgetPlacementMM.openHelpWindow = function(url) {
      // // Strip off lang parameter as launchHelp will add one
      // var langPos = url.indexOf("&lang");
      // if (langPos > 0) {
      // url = url.substr(0, langPos);
      // }
      // help.launchHelp(url);
      // };
      // WidgetPlacementMM.checkWidgetLocation = function(widgetInstanceId,
      // uiLocation) {
      // var dropZoneNode = dom.byId(uiLocation + "DropZone");
      //      
      // if (dropZoneNode) {
      // var childNodes = dropZoneNode.childNodes;
      // for (var currentIndex = 0; currentIndex < childNodes.length;
      // currentIndex++) {
      // var currentWidgetId =
      // childNodes[currentIndex].getAttribute("widgetid");
      //      
      // if (childNodes.length == 1) {
      // return "alone";
      // }
      //      
      // if (currentWidgetId == widgetInstanceId) {
      // if (currentIndex == 0) {
      // return "top";
      // } else if (currentIndex >= childNodes.length - 1) {
      // return "bottom";
      // } else {
      // return "middle";
      // }
      // }
      //      
      // }
      //      
      // }
      // }
      // WidgetPlacementMM.getUILocation = function(widgetInstanceId) {
      // var nav_item = dom.byId(widgetInstanceId + "_navItem");
      // if (nav_item) {
      // uiLocation = nav_item.getAttribute("uilocation");
      // if (uiLocation) {
      // return uiLocation;
      // }
      // } else {
      // var loadOrders = lconn.core.WidgetPlacement.loadOrder;
      //      
      // for (var i = 0; loadOrders && loadOrders.length > 0; i++) {
      // if (loadOrders[i] != null && loadOrders[i].instanceId ==
      // widgetInstanceId) {
      // return loadOrders[i].uiLocation;
      // }
      // }
      //      
      // }
      // return "";
      //      
      //      
      // }
      // WidgetPlacementMM.updateMoreActions = function(widgetInstanceId) {
      //      
      // // update move up and move down button
      // var widgetsMoreActionID = widgetInstanceId + "moreActions"
      // var uiLocation = WidgetPlacementMM.getUILocation(widgetInstanceId);
      // if (uiLocation) {
      // var widgetLocation =
      // WidgetPlacementMM.checkWidgetLocation(widgetInstanceId, uiLocation);
      // if (widgetLocation) {
      // var moveup = query('#' + widgetsMoreActionID +
      // '>tbody>tr.moveup_button');
      // var movedown = query('#' + widgetsMoreActionID +
      // '>tbody>tr.movedown_button');
      //      
      //      
      // if (moveup && movedown) {
      // switch (widgetLocation) {
      // case 'alone':
      // moveup.style('display', 'none');
      // movedown.style('display', 'none');
      // break;
      // case 'top':
      // moveup.style('display', 'none');
      // movedown.removeAttr('style');
      // movedown.style('-moz-user-select', 'none');
      //      
      // break;
      // case 'bottom':
      // moveup.removeAttr('style');
      // moveup.style('-moz-user-select', 'none');
      // movedown.style('display', 'none');
      // break;
      // case 'middle':
      // movedown.removeAttr('style');
      // movedown.style('-moz-user-select', 'none');
      // moveup.removeAttr('style');
      // moveup.style('-moz-user-select', 'none');
      // break;
      // default:
      // break;
      // }
      // }
      // }
      // var edit = query('#' + widgetsMoreActionID + '>tbody>tr.edit_button');
      // var view = query('#' + widgetsMoreActionID + '>tbody>tr.view_button');
      // var mm_widget = eval('(typeof(_' + widgetInstanceId + '_iContext))');
      // if (mm_widget == 'object') {
      // if (edit && view) {
      // var mode = eval('_' + widgetInstanceId +
      // "_iContext.scope.iContext.getiDescriptor().getItemValue('mode')");
      // switch (mode) {
      // case 'edit':
      // view.removeAttr('style');
      // edit.style('display', 'none');
      // break;
      // case 'view':
      // edit.removeAttr('style');
      // view.style('display', 'none');
      // break;
      // }
      // }
      // }
      // }
      //      
      // return;
      //      
      //      
      // };
      // WidgetPlacementMM.openMenu = function(event, widgetId, id) {
      // var dojoWidgetId = widgetId + 'moreActions';
      // var dojoWidget = dijit.byId(dojoWidgetId);
      // WidgetPlacementMM.updateMoreActions(widgetId);
      // if (dojoWidget == null) {
      // if (WidgetPlacementConfig.debug)
      // console.log("WidgetPlacementMM.openMenu: dojoWidgetId '" + dojoWidgetId
      // + "' don't have a dojoWidget instance, creating one");
      // parser.parse(dom.byId(dojoWidgetId));
      //      
      // dojoWidget = dijit.byId(dojoWidgetId);
      // }
      //      
      // if (dojoWidget != null) {
      // if (id != null) {
      // var elem = document.getElementById(id);
      // if (elem != null) {
      // domAttr.set(elem, 'aria-expanded', 'true');
      // domAttr.set(elem, "aria-owns", id + "_dropdown");
      // var onCloseHandler = on(dojoWidget, "Close", function() {
      // domAttr.set(elem, 'aria-expanded', 'false');
      // dojo.removeAttr(elem, "aria-owns");
      // onCloseHandler.remove();
      // });
      // }
      // }
      // menuUtility.openMenu(event, dojoWidgetId);
      // } else if (WidgetPlacementConfig.debug)
      // console.log("WidgetPlacementMM.openMenu: skipping open menu, can not
      // find widget with id " + dojoWidgetId);
      // };
      //      
      //      
      // var loadNavItemsOnly = function(addToNavBarBoolean, canPersonalize,
      // displayedUserInfo) {
      // var loadContentFunction = function(response, ioArgs) {
      // var data = response;
      // WidgetPlacementConfig.widgetConfigXMLDocument = data;
      // var exp1 = null;
      // exp1 = "/tns:widgets/tns:layout/tns:page[@pageId='" +
      // WidgetPlacementConfig.defaultPageId + "']/tns:widgetInstance";
      // var nodes = xpath.selectNodes(exp1, data);
      // if (typeof(nodes) != "undefined" && typeof(nodes.length) !=
      // "undefined") {
      // for (var i = 0; nodes.length != null && i < nodes.length; i++) {
      // var widgetInstanceNode = nodes[i];
      // var enabled = widgetInstanceNode.getAttribute("enabled");
      // if (enabled == null || enabled != "false") {
      // var defIdRef = widgetInstanceNode.getAttribute("defIdRef");
      // var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" +
      // defIdRef + "']";
      // var widgetDefinitionNode = xpath.selectSingleNode(exp3, data);
      //      
      // if (canAddWidget(widgetDefinitionNode, WidgetPlacementConfig,
      // canPersonalize, widgetInstanceNode)) {
      // var navBarLinkText =
      // widgetDefinitionNode.getAttribute("navBarLinkText");
      //      
      // var navBarLink = widgetDefinitionNode.getAttribute("navBarLink");
      // var selected = false;
      // if (WidgetPlacementConfig.NavBarSelectedMenuItem != null &&
      // WidgetPlacementConfig.NavBarSelectedMenuItem == defIdRef) {
      // selected = true;
      // }
      // addToNavBar(widgetDefinitionNode, widgetInstanceNode,
      // displayedUserInfo, selected, navBarLink, false, navBarLinkText);
      // }
      // }
      // }
      // }
      // };
      //      
      // var lotusNavBar = getNavBar();
      // if (lotusNavBar != null) {
      // try {
      // new WidgetPlacementMM.aria.Toolbar(lotusNavBar.id);
      // } catch (ee) {
      // new Toolbar(lotusNavBar.id);
      // }
      // }
      //      
      // if (WidgetPlacementConfig.widgetConfigXMLDocument == null)
      // request(WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" +
      // WidgetPlacementConfig.lastMod, {
      // method: "GET",
      // handleAs: "xml",
      // sync: true
      // }).then(function() {}, , errorhandling.DefaultXHRErrorHandler);
      // else
      // loadContentFunction(WidgetPlacementConfig.widgetConfigXMLDocument);
      // }
      //      
      // // ** end of common private functions */
      // // Returns widget nodes sorted by column number so that col2 widgets
      // // appear first in the node array.
      // // Needed because XMl nodes have 'col2' and 'col3' widgets listed in
      // // sorted order, it may have 'col2' and 'col3' widgets intermixed.
      // //
      // WidgetPlacementMM.sortWidgetNodes = function(nodes) {
      // var col2Widgets = new Array();
      // var col3Widgets = new Array();
      // var result = new Array();
      //      
      // for (var i = 0; i < nodes.length; i++) {
      // var n = nodes[i];
      // var uiLoc = n.getAttribute("uiLocation");
      // if (uiLoc == "col2") {
      // col2Widgets.push(n);
      // } else if (uiLoc == "col3") {
      // // Member widget is in column3, but is fixed so put it at the
      // // start
      // // of the result array.
      // if (n.getAttribute("defIdRef") != "Members") {
      // col3Widgets.push(n);
      // } else { // Members widget
      // result.push(n);
      // }
      // } else {
      // result.push(n);
      // }
      // }
      // for (var i = 0; i < col2Widgets.length; i++) {
      // result.push(col2Widgets[i]);
      // }
      // for (var i = 0; i < col3Widgets.length; i++) {
      // result.push(col3Widgets[i]);
      // }
      // return (result);
      // };
      //      
      // WidgetPlacementMM.placeWidgetMetadata = function(addToNavBarBoolean) {
      // WidgetPlacementMM.initialLoad = true;
      // // fix for SPR DJOS7UNT5B
      // if (dojo.dnd != null && lconn.dboard && lconn.dboard.dnd) // fix
      // // for
      // // SPR
      // // JMGE7XESJJ
      // lconn.dboard.dnd.Source.prototype.onSelectStart = function() {};
      //      
      // // ** internal functions */
      // var addAllWidgets = function(pageId, displayedUserInfo, data,
      // canPersonalize, addToNavBarBoolean) {
      // var widgetContainer = null;
      // var htmlContentArray = new Object();
      //      
      // try {
      // var exp = null;
      // var exp1 = null;
      // var exp2 = null;
      // var nodes = null;
      //      
      // if (WidgetPlacementConfig.isProfilesEnv) {
      // var profileType = (displayedUserInfo &&
      // typeof(displayedUserInfo.profileType) == "string" &&
      // lang.trim(displayedUserInfo.profileType).length > 0 ?
      // displayedUserInfo.profileType : "default");
      // exp1 = "/tns:widgets/tns:layout[@resourceSubType='" + profileType +
      // "']/tns:page[@pageId='" + pageId + "']/tns:widgetInstance";
      // exp2 =
      // "/tns:widgets/tns:layout[@resourceSubType='default']/tns:page[@pageId='"
      // + pageId + "']/tns:widgetInstance";
      // nodes = xpath.selectNodes(exp1, data);
      // if (nodes == null || !nodes.length) { // fall back to
      // // default layout
      // // when there is
      // // no layout for
      // // current
      // // profile type
      // nodes = xpath.selectNodes(exp2, data);
      // if (WidgetPlacementConfig.debug) console.log("\nNo widget layout for
      // profile type [" + profileType + "] defined. Falling back to default
      // layout.");
      // }
      // } else {
      // exp1 = "/tns:widgets/tns:layout/tns:page[@pageId='" + pageId +
      // "']/tns:widgetInstance";
      // nodes = xpath.selectNodes(exp1, data);
      // nodes = WidgetPlacementMM.sortWidgetNodes(nodes);
      // }
      //      
      //      
      // var uiContent = "";
      // if (typeof(nodes) != "undefined" && typeof(nodes.length) !=
      // "undefined") {
      // for (var i = 0; nodes.length != null && i < nodes.length; i++) {
      // var widgetInstanceNode = nodes[i];
      // var defIdRef = widgetInstanceNode.getAttribute("defIdRef");
      // var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" +
      // defIdRef + "']";
      // var widgetDefinitionNode = xpath.selectSingleNode(exp3, data);
      //      
      // if (canAddWidget(widgetDefinitionNode, WidgetPlacementConfig,
      // canPersonalize, widgetInstanceNode)) {
      // var skinType = widgetDefinitionNode.getAttribute("skinType");
      // var uiLocation = widgetInstanceNode.getAttribute("uiLocation");
      // if (htmlContentArray[uiLocation] == null) htmlContentArray[uiLocation]
      // = "";
      //      
      // var instanceId = widgetInstanceNode.getAttribute("instanceId");
      // if (instanceId != null && htmlContentArray[uiLocation + "dnd"] == null
      // && canPersonalize) {
      // htmlContentArray[uiLocation] += '<div style="display: inline" id="' +
      // uiLocation + 'DropZone" class="target">';
      // htmlContentArray[uiLocation + "dnd"] = true;
      // }
      //      
      // if (instanceId == null) instanceId = defIdRef;
      //      
      // if (WidgetPlacementMM.loadOrder == null) WidgetPlacementMM.loadOrder =
      // new Array();
      //      
      // WidgetPlacementMM.loadOrder[WidgetPlacementMM.loadOrder.length] = {
      // instanceId: instanceId,
      // uiLocation: uiLocation
      // };
      // htmlContentArray[uiLocation] +=
      // GetCompleteWidgetHTMLContent(widgetDefinitionNode, widgetInstanceNode,
      // displayedUserInfo, data, canPersonalize, skinType, null,
      // addToNavBarBoolean);
      // WidgetPlacementMM.uiLocations[uiLocation] = true;
      // }
      // }
      // }
      //      
      // for (uiLocation in htmlContentArray) {
      // var tempWidgContElem = dom.byId("widget-container-" + uiLocation);
      // if (tempWidgContElem != null) {
      // var temp = (htmlContentArray[uiLocation + "dnd"] == true ? "</div>" :
      // "");
      // tempWidgContElem.innerHTML = htmlContentArray[uiLocation] + temp;
      // }
      // }
      //      
      // if (typeof(nodes) != "undefined" && typeof(nodes.length) !=
      // "undefined") {
      // for (var i = 0; nodes.length != null && i < nodes.length; i++) {
      // var menuId = "widgetActionsMenu" + nodes[i].getAttribute("instanceId");
      // var widgetMenu = dom.byId(menuId);
      // if (widgetMenu != null) {
      // domAttr.set(widgetMenu, 'aria-expanded', 'false');
      // }
      // }
      // }
      // } catch (exception) {
      // errorhandling.DefaultErrorHandler("WidgetPlacementMM.addAllWidgets",
      // exception);
      // }
      // };
      //      
      // var loadContentFunction = function(response, ioArgs) {
      // var widgetData = response;
      // WidgetPlacementConfig.widgetConfigXMLDocument = widgetData;
      // if (WidgetPlacementConfig.pageId == "fullPageWidgetView") {
      // try {
      // var displayedUserInfo = ioArgs.args.displayedUserInfo;
      // var widgetContainer = dom.byId("widgetContainer");
      // if (widgetContainer == null) widgetContainer =
      // dom.byId("widget-container-fullpage");
      // var widgetId = common_getParam("widgetId");
      // var widgetDef =
      // xpath.selectSingleNode("/tns:widgets/tns:definitions/tns:widgetDef[@defId
      // = '" + widgetId + "']", widgetData);
      // var url = widgetDef.getAttribute("url");
      // addToNavBar(widgetDef, null, displayedUserInfo, null, null, true,
      // null);
      //      
      // var attributesMap = [{
      // entryName: "state",
      // entryValue: "maximize"
      // }];
      // attributesMap = getWidgetConfigAttrs(attributesMap, widgetDef, null,
      // widgetData);
      // widgetContainer.innerHTML = AddiWidgetMicroformat(widgetId, url,
      // displayedUserInfo, attributesMap, "fullpage");
      //      
      // if (WidgetPlacementMM.loadOrder == null) WidgetPlacementMM.loadOrder =
      // new Array();
      //      
      // WidgetPlacementMM.loadOrder[WidgetPlacementMM.loadOrder.length] = {
      // instanceId: widgetId,
      // uiLocation: "fullpage"
      // };
      //      
      // } catch (exception) {
      // errorhandling.DefaultErrorHandler("WidgetMgmt.loadWidgets", exception,
      // "widgetContainer");
      // }
      // } else {
      // var displayedUserInfo = ioArgs.args.displayedUserInfo;
      // addAllWidgets(WidgetPlacementConfig.pageId, displayedUserInfo,
      // widgetData, canPersonalize, ioArgs.args.addToNavBarBoolean);
      // }
      // }; /** end of internal functions */
      //      
      // // lconn.core.xpath.debug = true;
      // // WidgetPlacementMM.debug = false;
      // var displayedUserInfo = null;
      // var canPersonalize = null;
      //      
      // if (WidgetPlacementConfig.pageId == null) {
      // if (addToNavBarBoolean != false) {
      // if (canPersonalize == null) canPersonalize =
      // getUserProfileOverrideProperty("canPersonalize") == "true";
      //      
      // if (displayedUserInfo == null) displayedUserInfo =
      // getDisplayedUserInfo();
      //      
      // loadNavItemsOnly(addToNavBarBoolean, canPersonalize,
      // displayedUserInfo);
      // }
      // return;
      // }
      //      
      // if (canPersonalize == null) canPersonalize =
      // getUserProfileOverrideProperty("canPersonalize") == "true";
      //      
      // if (displayedUserInfo == null) displayedUserInfo =
      // getDisplayedUserInfo();
      //      
      // if (WidgetPlacementConfig.debug) console.info("Using URL:" +
      // WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" +
      // WidgetPlacementConfig.lastMod);
      //      
      // if (WidgetPlacementConfig.widgetConfigXMLDocument == null)
      // request(WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" +
      // WidgetPlacementConfig.lastMod, {
      // method: "GET",
      // addToNavBarBoolean: addToNavBarBoolean,
      // displayedUserInfo: displayedUserInfo,
      // handleAs: "xml",
      // sync: true
      // }).then(function() {}, errorhandling.DefaultXHRErrorHandler);
      // else loadContentFunction(WidgetPlacementConfig.widgetConfigXMLDocument,
      // {
      // args: {
      // addToNavBarBoolean: addToNavBarBoolean,
      // displayedUserInfo: displayedUserInfo
      // }
      // });
      //      
      // if (dojo.dnd != null) {
      // var manager = dojo.dnd.manager();
      //      
      // manager.makeAvatar = function() {
      // return new lconn.dboard.dnd.avatar(this);
      // };
      //      
      // topic.subscribe("/dnd/drop", WidgetPlacementMM.onDropHandler);
      // topic.subscribe("/dnd/start", function(source, nodes, iscopy) {
      // for (var i = 0; i < nodes.length; i++) {
      // utilities.hide(nodes[i], false, true);
      // WidgetPlacementMM.currentNode = nodes[i];
      // }
      // });
      // topic.subscribe("/dnd/cancel", function() {
      // if (WidgetPlacementMM.currentNode != null) {
      // utilities.show(WidgetPlacementMM.currentNode, false, false, true);
      // WidgetPlacementMM.currentNode = null;
      // }
      // });
      // }
      //      
      // var parseAllWidgets = function() {
      // var parseArea = dom.byId("lotusFrame");
      // if (parseArea == null) {
      // var frameDivs = query(".lotusFrame");
      // if (frameDivs != null && frameDivs.length > 0) {
      // parseArea = frameDivs[0];
      // } else {
      // parseArea = document.body;
      // }
      // }
      // parser.parse(parseArea);
      // };
      // setTimeout(parseAllWidgets, 2000);
      //      
      // if (dojo.dnd != null) {
      // var createAllDropzones = function() {
      // for (uiLocation in WidgetPlacementMM.uiLocations) {
      // var dropZoneDOMId = uiLocation + "DropZone";
      // var dropZone = dom.byId(dropZoneDOMId);
      // if (dropZone != null) {
      // var dropZoneObject = createDropZoneObject(uiLocation, dropZone);
      // WidgetPlacementMM.dropZoneObjects[dropZoneDOMId] = dropZoneObject;
      // }
      // }
      // };
      // setTimeout(createAllDropzones, 2000);
      // }
      //      
      // WidgetPlacementMM.initialLoad = false;
      //      
      // };
      //      
      // WidgetPlacementMM.onDropHandler = function(source, nodes, iscopy) {
      // var target = dojo.dnd.manager().target;
      // var currentNode = null
      // for (var i = 0; i < nodes.length; i++) {
      // currentNode = nodes[i];
      // utilities.show(currentNode, false, false, true);
      // break;
      // }
      //      
      // if (WidgetPlacementMM.currentNode != null) {
      // utilities.show(WidgetPlacementMM.currentNode, false, false, true);
      // WidgetPlacementMM.currentNode = null;
      // }
      //      
      // var saveMove = function() {
      // var childNodes = target.getAllNodes();
      // for (var i = 0; i < childNodes.length; i++) {
      // var widgetId = currentNode.getAttribute("widgetId");
      // if (childNodes[i].getAttribute("widgetId") == widgetId) {
      // var previousId = null;
      // if (i == 0) previousId = null;
      // else previousId = childNodes[i - 1].getAttribute("widgetId");
      //      
      // moveWidgetTemp(widgetId, target.jsId, previousId, target, source);
      //      
      // break;
      // }
      // }
      // };
      // setTimeout(saveMove, 300);
      // };
      //      
      // //
      // // Returns widget instance id to use as previous id for widgets moved
      // to
      // // top of column 3
      // //
      // WidgetPlacementMM.getColumn3Anchor = function() {
      // // Returns widget instance id to use as previous id for widgets moved
      // to
      // // top of column 3
      // var anchor = null;
      // var col2Nodes =
      // lconn.core.WidgetPlacement.getColumnWidgetNodes("col2");
      // if (col2Nodes.length > 0) {
      // anchor = col2Nodes[col2Nodes.length - 1].getAttribute("widgetId");
      // }
      // return (anchor);
      // };
      //      
      // // Returns widget instance id to use as previous id for widgets moved
      // to
      // // top of column 2
      // //
      // WidgetPlacementMM.getColumn2Anchor = function() {
      // return ("top");
      // };
      //      
      //      
      // var moveWidgetTemp = function(widgetId, newUILocation,
      // previousWidgetId, target, source) {
      // var dataUrl = WidgetPlacementConfig.applicationContext +
      // "/moveWidget.do?resourceId=" + WidgetPlacementConfig.resourceId +
      // "&widgetInstanceId=" + widgetId + "&newUiLocation=" + newUILocation;
      //      
      // // Adjusts the id of the previous widget to use to place a widget.
      // // Accounts for moving to beginning of column3, and useing last
      // // widget in column 2 as previous for that case
      // // so navigator keeps column 3 widgets after column 2 widgets.
      // //
      // if (previousWidgetId == null) {
      // previousWidgetId = WidgetPlacementMM.getColumn2Anchor();
      // if (newUILocation == "col3") {
      // previousWidgetId = WidgetPlacementMM.getColumn3Anchor();
      // }
      // }
      //      
      // if (previousWidgetId != null) dataUrl += "&afterWidgetInstanceId=" +
      // previousWidgetId;
      //      
      // request(dataUrl, {
      // method: "POST",
      // handleAs: "xml"
      // }).then(function(resp, ioArgs) {
      // var timestamp = new Date().getTime();
      // WidgetPlacementConfig.lastMod = timestamp;
      // // dojo.xhrGet({url: WidgetPlacementConfig.layoutInfoUrl +
      // // "&lastMod=" + timestamp, error:
      // // lconn.core.errorhandling.DefaultXHRErrorHandler});//prime
      // // the cache
      // if (target != null && source != null && target != source)
      // WidgetPlacementMM.refresh(widgetId);
      // }, errorhandling.DefaultXHRErrorHandler);
      // }
      //      
      // WidgetPlacementMM.renderWidgets = function() {
      // // livetextService._loadTags();
      // if (WidgetPlacementMM.loadOrder != null) {
      // for (var i = 0; i < WidgetPlacementMM.loadOrder.length; i++)
      // // for (var i = WidgetPlacementMM.loadOrder.length; i != null && i >
      // // 0; i--)
      // {
      // var NodeId = WidgetPlacementMM.loadOrder[i];
      // if (NodeId != null) {
      // lconn.core.mumOverride.renderSingleWidget(NodeId.instanceId);
      //      
      // // SPR#SUNN87HSRR - display the hidden widget containers when
      // // widgets are added to it
      // if (NodeId.uiLocation == "col3" && dom.byId("profilePaneRight") != null
      // && domClass.contains("profilePaneRight", "lotusHidden"))
      // domClass.remove("profilePaneRight", "lotusHidden");
      // else if (NodeId.uiLocation == "col1" && dom.byId("profilePaneLeft") !=
      // null && domClass.contains("profilePaneLeft", "lotusHidden"))
      // domClass.remove("profilePaneLeft", "lotusHidden");
      // }
      // }
      // }
      // };
      //      
      // WidgetPlacementMM.loadWidgetFullPage = function(widgetId,
      // additionalParameters) {
      // /*
      // * var url = WidgetPlacementConfig.fullPageContainerUrl + widgetId;
      // *
      // * for (var i = 0; additionalParameters != null && i <
      // * additionalParameters.length; i++) url += "&" +
      // * additionalParameters[i].name + "=" + additionalParameters[i].value;
      // *
      // * lconn.core.utilities.gotoURL(url);
      // */
      // WidgetPlacementMM.loadFullpageView(widgetId, additionalParameters,
      // true, true);
      // };
      //      
      // WidgetPlacementMM.loadFullpageView = function(instanceId,
      // additionalParameters, addState, overrideOverViewLink,
      // dontRegisterCloseView) {
      // var exp4 =
      // "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" +
      // instanceId + "']";
      // var widgetInstanceNode = xpath.selectSingleNode(exp4,
      // WidgetPlacementConfig.widgetConfigXMLDocument);
      // var defIdRef = null;
      // if (widgetInstanceNode != null) defIdRef =
      // widgetInstanceNode.getAttribute("defIdRef");
      // else defIdRef = instanceId;
      // var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" +
      // defIdRef + "']";
      // var widgetDefinitionNode = xpath.selectSingleNode(exp3,
      // WidgetPlacementConfig.widgetConfigXMLDocument);
      // if (additionalParameters == null) additionalParameters = [{
      // name: "resourceId",
      // value: WidgetPlacementConfig.resourceId
      // }];
      // else additionalParameters[additionalParameters.length] = {
      // name: "resourceId",
      // value: WidgetPlacementConfig.resourceId
      // }
      //      
      // switchView(widgetDefinitionNode, instanceId, additionalParameters,
      // overrideOverViewLink, addState);
      // }
      //      
      // WidgetPlacementMM.reloadOverviewPage = function() {
      // closeOtherViews();
      // if (WidgetPlacementConfig.debug)
      // console.log("WidgetPlacementMM.reloadOverviewPage called");
      //      
      // // remove references to fullpage widget
      // if (WidgetPlacementMM.currentFullpageWidgetInstanceId != null) {
      // WidgetPlacementMM.destroyWidget(WidgetPlacementMM.currentFullpageWidgetInstanceId,
      // null, false, true);
      // WidgetPlacementMM.currentFullpageWidgetInstanceId = null;
      // }
      //      
      // if (WidgetPlacementMM.onlyFullPageWidgetLoaded) {
      // WidgetPlacementMM.placeWidgetMetadata(false);
      // WidgetPlacementMM.renderWidgets();
      // WidgetPlacementMM.onlyFullPageWidgetLoaded = false;
      // }
      //      
      // if (WidgetPlacementConfig.hideElements != null) for (var i = 0;
      // WidgetPlacementConfig.hideElements != null && i <
      // WidgetPlacementConfig.hideElements.length; i++) {
      // utilities.show(WidgetPlacementConfig.hideElements[i], false, false,
      // true);
      //      
      // try {
      // dijit.byId(WidgetPlacementConfig.hideElements[i]).show();
      // } catch (exception1) {
      // // do nothing
      // }
      // }
      //      
      // destroyWidgetContainer("fullpage");
      //      
      // // WidgetPlacementMM.placeWidgetMetadata(false);
      // // livetextService.parseDom();
      // for (uiLocation in WidgetPlacementMM.uiLocations) {
      // utilities.show("widget-container-" + uiLocation, false, false, true);
      // }
      //      
      // highlightOverviewLink()
      //      
      // for (var i = 0; WidgetPlacementMM.loadOrder != null && i <
      // WidgetPlacementMM.loadOrder.length; i++) {
      // var NodeId = WidgetPlacementMM.loadOrder[i];
      // if (NodeId != null) WidgetPlacementMM.refresh(NodeId.instanceId);
      // }
      // return false;
      // };
      // WidgetPlacementMM.getWidgetDefId = function(instanceId, widgetDataDoc)
      // {
      // var widgetData = null;
      // if (widgetDataDoc == null) widgetData =
      // WidgetPlacementConfig.widgetConfigXMLDocument;
      // else widgetData = widgetDataDoc;
      // var exp4 =
      // "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" +
      // instanceId + "']";
      // var widgetInstanceNode = xpath.selectSingleNode(exp4, widgetData);
      // var widgetInstanceNode = xpath.selectSingleNode(exp4, widgetData);
      // var defIdRef = null;
      // var widgetName = null;
      // if (widgetInstanceNode != null) {
      // defIdRef = widgetInstanceNode.getAttribute("defIdRef");
      // } else defIdRef = instanceId;
      //      
      // return defIdRef;
      // }
      //      
      // WidgetPlacementMM.refresh = function(instanceId, widgetDataDoc,
      // grabFocus) {
      // utilities.hide(instanceId + 'moreActions', true, true);
      // WidgetPlacementMM.destroyWidget(instanceId, null, false);
      // var widgetData = null;
      // if (widgetDataDoc == null) widgetData =
      // WidgetPlacementConfig.widgetConfigXMLDocument;
      // else widgetData = widgetDataDoc;
      // var exp4 =
      // "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" +
      // instanceId + "']";
      // var widgetInstanceNode = xpath.selectSingleNode(exp4, widgetData);
      // var defIdRef = null;
      // var widgetName = null;
      // if (widgetInstanceNode != null) {
      // defIdRef = widgetInstanceNode.getAttribute("defIdRef");
      // widgetName = getWidgetName(widgetDefinitionNode, widgetInstanceNode)
      // } else defIdRef = instanceId;
      // var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" +
      // defIdRef + "']";
      // var widgetDefinitionNode = xpath.selectSingleNode(exp3,
      // WidgetPlacementConfig.widgetConfigXMLDocument);
      // var attributesMap = getWidgetConfigAttrs(null, widgetDefinitionNode,
      // widgetInstanceNode, widgetData);
      // var tempdsdifosdifsdf = dom.byId(instanceId + "SubArea");
      // if (tempdsdifosdifsdf != null) {
      // tempdsdifosdifsdf.innerHTML = AddiWidgetMicroformat(instanceId,
      // widgetDefinitionNode.getAttribute("url"), getDisplayedUserInfo(),
      // attributesMap, "view", widgetName);
      // tempdsdifosdifsdf.setAttribute("widgetloaded", "true");
      // }
      // if (window.refreshInfoHolder == null) window.refreshInfoHolder = {};
      //      
      // window.refreshInfoHolder[instanceId] = true;
      // lconn.core.mumOverride.renderSingleWidget(instanceId);
      //      
      // if (widgetName) {
      // var dndSpan = dom.byId(instanceId + 'Id');
      // if (dndSpan) {
      // if (dndSpan.textContent) {
      // dndSpan.textContent = widgetName;
      // } else {
      // dndSpan.innerText = widgetName;
      // }
      // }
      //      
      // var navItem = dom.byId(instanceId + "_navItem");
      // if (navItem) {
      // var navLink = navItem.children[0];
      // if (navLink.textContent) {
      // navLink.textContent = widgetName;
      // } else {
      // navLink.innerText = widgetName;
      // }
      // }
      // }
      //      
      // setTimeout(function() {
      // window.refreshInfoHolder[instanceId] = null;
      // }, 2000);
      //      
      // if (grabFocus !== false) {
      // window.setTimeout("WidgetPlacementMM.setFocus('" + instanceId + "',
      // 'widgetActionsMenu" + instanceId + "');", 0);
      // }
      //      
      // }
      // WidgetPlacementMM.refreshTitleAndMicroformat = function(instanceId,
      // widgetData, objectArray) {
      // var exp4 =
      // "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" +
      // instanceId + "']";
      // var widgetInstanceNode = xpath.selectSingleNode(exp4, widgetData);
      // var defIdRef = null;
      // var widgetName = null;
      // if (widgetInstanceNode != null) {
      // defIdRef = widgetInstanceNode.getAttribute("defIdRef");
      // widgetName = getWidgetName(widgetDefinitionNode, widgetInstanceNode)
      // } else defIdRef = instanceId;
      // var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" +
      // defIdRef + "']";
      // var widgetDefinitionNode = xpath.selectSingleNode(exp3,
      // WidgetPlacementConfig.widgetConfigXMLDocument);
      // getWidgetConfigAttrs(null, widgetDefinitionNode, widgetInstanceNode,
      // widgetData);
      //      
      // // _saveMicroformat leaves a span of attributes with old values -
      // // get rid of it here
      // query('div#' + instanceId + ' > span[title="attributes"]').orphan();
      //      
      // if (widgetName) {
      // if (!objectArray["computedWidgetTitle"])
      // objectArray["computedWidgetTitle"] = new Object();
      // objectArray["computedWidgetTitle"].value = widgetName;
      //      
      // var dndSpan = dom.byId(instanceId + 'Id');
      // if (dndSpan) {
      // if (dndSpan.textContent) {
      // dndSpan.textContent = widgetName;
      // } else {
      // dndSpan.innerText = widgetName;
      // }
      // }
      //      
      // var navItem = dom.byId(instanceId + "_navItem");
      // if (navItem) {
      // var navLink = navItem.children[0];
      // if (navLink.textContent) {
      // navLink.textContent = widgetName;
      // } else {
      // navLink.innerText = widgetName;
      // }
      // }
      // }
      // }
      //      
      //      
      // WidgetPlacementMM.fetchAndRefresh = function(instanceId) {
      //      
      // var temp = function(response, ioArgs) {
      // WidgetPlacementMM.refresh(instanceId, response);
      // };
      //      
      // request(WidgetPlacementConfig.layoutInfoUrl, {
      // method: "GET",
      // handleAs: "xml",
      // sync: true
      // }).then(function() {}, errorhandling.DefaultXHRErrorHandler);
      // }
      //      
      //      
      // WidgetPlacementMM.moveDown = function(widgetInstanceId, uiLocation) {
      // var dropZoneNode = dom.byId(uiLocation + "DropZone");
      //      
      // var childNodes = dropZoneNode.childNodes;
      // for (var currentIndex = 0; currentIndex < childNodes.length;
      // currentIndex++) {
      // var currentWidgetId =
      // childNodes[currentIndex].getAttribute("widgetid");
      //      
      // if (currentWidgetId == widgetInstanceId) {
      // var calculatedIndex = currentIndex + 1;
      //      
      // if (calculatedIndex > childNodes.length) calculatedIndex =
      // childNodes.length - 1;
      //      
      // if (calculatedIndex == childNodes.length) // we cannot move the
      // // last item on the
      // // list
      // break;
      //      
      // var previousId = childNodes[calculatedIndex].getAttribute("widgetid");
      //      
      // moveWidgetTemp(widgetInstanceId, uiLocation, previousId);
      // try {
      // dropZoneNode.insertBefore(childNodes[currentIndex],
      // childNodes[calculatedIndex + 1]);
      // } catch (exception) {
      // // IE issue
      // dropZoneNode.appendChild(childNodes[currentIndex]);
      // }
      // break;
      // }
      // }
      // utilities.hide(widgetInstanceId + 'moreActions', true, true);
      // var actionBar = dom.byId('widgetActionsMenu' + widgetInstanceId);
      // if (actionBar != null) actionBar.focus();
      //      
      // }
      // WidgetPlacementMM.moveUp = function(widgetInstanceId, uiLocation) {
      // var dropZoneNode = dom.byId(uiLocation + "DropZone");
      //      
      // var childNodes = dropZoneNode.childNodes;
      // for (var currentIndex = 0; currentIndex < childNodes.length;
      // currentIndex++) {
      // var currentWidgetId =
      // childNodes[currentIndex].getAttribute("widgetid");
      //      
      // if (currentWidgetId == widgetInstanceId) {
      // if (currentIndex == 0) // we cannot move the first item on the
      // // list
      // break;
      //      
      // var calculatedIndex = currentIndex - 1;
      //      
      // var previousId = null;
      //      
      // if (calculatedIndex != 0) previousId = childNodes[calculatedIndex -
      // 1].getAttribute("widgetid");
      //      
      // moveWidgetTemp(widgetInstanceId, uiLocation, previousId);
      // dropZoneNode.insertBefore(childNodes[currentIndex],
      // childNodes[calculatedIndex]);
      // break;
      // }
      // }
      // utilities.hide(widgetInstanceId + 'moreActions', true, true);
      // var actionBar = dom.byId('widgetActionsMenu' + widgetInstanceId);
      // if (actionBar != null) actionBar.focus();
      //      
      // }
      //      
      // var getDialog = function() {
      // if (window.dialog1 == null) {
      // var dialog1Container = document.getElementById("dialog1Container");
      // if (dialog1Container == null) {
      // dialog1Container = document.createElement("div");
      // dialog1Container.id = "dialog1Container";
      // dom.byId("lotusContent").appendChild(dialog1Container);
      // }
      // // id: "dialog1",refocus:false
      // window.dialog1 = new Dialog({
      // id: "dialog1",
      // style: "width: 500px"
      // }, dialog1Container);
      // }
      // return window.dialog1;
      // }
      //      
      // /*
      // * @deprecated This method will be removed in 4.0 with a different
      // * dialog method
      // */
      // WidgetPlacementMM.displayDialog = function(dialogContent) {
      // var dialog1 = getDialog();
      // dialog1.setContent(dialogContent);
      //      
      // try {
      // dialog1.titleBar.style.display = "none";
      // } catch (error1) {
      // console.log(error1);
      // }
      //      
      // dialog1.show();
      // var dialog1Button = dom.byId("dialog1.button");
      // if (dialog1Button != null) dialog1Button.focus();
      // // alert("displayDialog");
      // }
      //      
      // // Returns NodeList - one for each widget in column, in the order of
      // // their display.
      // // column = "col2" or "col3"
      // //
      // WidgetPlacementMM.getColumnWidgetNodes = function(column) {
      // var widgetContainerId = "col2Wrapper";
      // if (column == "col3") {
      // widgetContainerId = "widget-container-col3";
      // }
      // return (query(".lotusWidget2", dom.byId(widgetContainerId)));
      // };
      //      
      // // Move widget to end of widget list in column 2
      // //
      // WidgetPlacementMM.moveWidgetToEnd = function(widgetInstanceId, column)
      // {
      // var widgetNodes = WidgetPlacementMM.getColumnWidgetNodes(column);
      // if (widgetNodes.length > 0) {
      // var lastWidgetId = domAttr.get(widgetNodes[widgetNodes.length - 1],
      // "widgetid");
      // if (lastWidgetId != widgetInstanceId) { // If it's not the last
      // // widget in the UI, move
      // // it after the current
      // // last widget
      // moveWidgetTemp(widgetInstanceId, column, lastWidgetId, null, null);
      // } else { // Widget is last one in UI, but we need to ensure the DB
      // // is updated to reflect that
      // if (widgetNodes.length > 1) {
      // lastWidgetId = domAttr.get(widgetNodes[widgetNodes.length - 2],
      // "widgetid");
      // moveWidgetTemp(widgetInstanceId, column, lastWidgetId, null, null);
      // }
      // }
      // }
      // };
      //      
      // // Returns true iff the widget should show the full delete confirmation
      // // dialogue.
      // //
      // WidgetPlacementMM.showFullWidgetDeleteConfirmation = function(defId) {
      // var result = true;
      // var nodes =
      // xpath.selectNodes("/tns:widgets/tns:definitions/tns:widgetDef[@defId =
      // '" + defId + "']",
      // dojo.global.WidgetPlacementConfig.widgetConfigXMLDocument);
      // if (nodes != null) {
      // var showFullWidgetDeleteConfirmation =
      // nodes[0].getAttribute("showFullWidgetDeleteConfirmation");
      // if (showFullWidgetDeleteConfirmation == "false") {
      // result = false;
      // }
      // }
      //      
      // return (result);
      // };
      //      
      //      
      //      
      // WidgetPlacementMM.removeWidget = function(widgetInstanceId,
      // removeWidgetData, prompt) {
      // if (WidgetPlacementConfig.debug)
      // console.log("WidgetPlacementMM.removeWidget: widgetInstanceId=" +
      // widgetInstanceId + ", removeWidgetData=" + removeWidgetData + ",
      // prompt=" + prompt);
      //      
      // var exp1 =
      // "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@instanceId = '" +
      // widgetInstanceId + "']";
      // var widgetInstanceNode = xpath.selectSingleNode(exp1,
      // WidgetPlacementConfig.widgetConfigXMLDocument);
      //      
      // if (widgetInstanceNode != null) {
      // // If removing the files widget, make sure the media gallery widget
      // // is not present
      // if (removeWidgetData == true) {
      // var delDefId = widgetInstanceNode.getAttribute("defIdRef");
      // if (delDefId == "Files") {
      // var exp2 =
      // "/tns:widgets/tns:layout/tns:page/tns:widgetInstance[@defIdRef =
      // 'MediaGallery']";
      // var mediaInstanceNode = xpath.selectSingleNode(exp2,
      // WidgetPlacementConfig.widgetConfigXMLDocument);
      //      
      // if (mediaInstanceNode != null) {
      // console.log("WidgetPlacementMM.removeWidget: Skipping removal of Files
      // widget since MediaGallery widget is present.");
      // return;
      // }
      // }
      // }
      // } else {
      // console.log("WidgetPlacementMM.removeWidget: Unable to find widget
      // instance for instanceId = " + widgetInstanceId);
      // }
      //      
      // if (prompt == null) {
      // var stringContent = null;
      //      
      // if (removeWidgetData == true) {
      // // Show simple confirmation dialog for sub-community widget.
      // //
      // var defId = widgetInstanceNode.getAttribute("defIdRef");
      //      
      // if (defId == "FeaturedSurvey" || defId == "LinkedQuickrCommunityLib" ||
      // (WidgetPlacementMM.showFullWidgetDeleteConfirmation(defId) == false)) {
      // var deleteWidgetFunction = lang.partial(deleteWidgetCallback,
      // widgetInstanceId);
      // lconn.core.DialogUtil.prompt(messages["deleteWidget"],
      // messages["confirmDeleteWidget"], coreMessages["rs_ok"],
      // messages["cancel"], deleteWidgetFunction, null);
      // } else {
      // // Show delete or hide confirmation dialog with callback.
      // //
      // var deleteWidgetFunction = lang.partial(deleteOrHideWidgetCallback,
      // widgetInstanceId);
      // var dlg = new deleteConfirmWidget({
      // "communityTitle": widgetInstanceNode.getAttribute("title"),
      // "callback": deleteWidgetFunction,
      // "userName": communityActionData.userName
      // });
      // WidgetPlacementMM.removeWidgetInProgress = true;
      // dlg.show();
      // }
      // } else {
      // stringContent = '<div class="lotusDialogBorder"><form
      // class="lotusDialog lotusForm" onSubmit="return false;" role="dialog"
      // aria-labelledby="hideTitle" aria-describedby="hideContent">' + '<div
      // class="lotusDialogHeader">' + ' <h1 id="hideTitle"
      // class="lotusHeading">' + messages['hideWidget'] + '</h1>' + ' <a
      // title="' + messages['close'] + '" role="button" class="lotusRight
      // lotusDialogClose" href="javascript:;"
      // onclick="dijit.byId(\'dialog1\').hide();">' + ' <img src="' +
      // _Widget.prototype._blankGif + '" role="presentation" alt="' +
      // messages['close'] + '" />' + ' <span class="lotusAltText">X</span>' + '
      // </a>' + '</div>' + '<div class="lotusDialogContent" id="hideContent">'
      // + messages['hideWidgetMsg'] + '</div><!--end lotusDialogContent-->' +
      // '<div class="lotusDialogFooter">' + ' <input id="dialog1.button"
      // value="' + messages['hide'] + '" class="lotusFormButton" type="button"
      // onclick="dijit.byId(\'dialog1\').hide();WidgetPlacementMM.removeWidget(\''
      // + widgetInstanceId + '\', ' + removeWidgetData + ', false)" />' + '
      // <input value="' + messages['cancel'] + '" class="lotusFormButton"
      // type="button" onclick="dijit.byId(\'dialog1\').hide();" />' + '</div>'
      // + '</form></div>';
      // WidgetPlacementMM.displayDialog(stringContent);
      // }
      // WidgetPlacementMM.removeWidgetInProgress = false;
      // } else {
      // if (WidgetPlacementMM.removeWidgetInProgress == false) {
      // if (removeWidgetData == true) showRemoveWidgetDialog();
      // WidgetPlacementMM.removeWidgetInProgress = true;
      // var dataUrl = WidgetPlacementConfig.applicationContext +
      // "/removeWidget.do?resourceId=" + WidgetPlacementConfig.resourceId +
      // "&widgetInstanceId=" + widgetInstanceId + "&removeWidgetData=" +
      // removeWidgetData;
      // request(dataUrl, {
      // method: "POST",
      // handleAs: "xml",
      // headers: {
      // 'X-Update-Nonce': window.dangerousurlnonce
      // }
      // }).then(function(resp, ioArgs) {
      // WidgetPlacementMM.removeWidgetInProgress = false;
      // for (var i = 0; WidgetPlacementMM.loadOrder != null && i <
      // WidgetPlacementMM.loadOrder.length; i++) {
      // var NodeId = WidgetPlacementMM.loadOrder[i];
      // if (NodeId != null && NodeId.instanceId == widgetInstanceId) {
      //      
      // delete WidgetPlacementMM.loadOrder[i];
      //      
      //      
      //      
      // }
      // }
      //      
      // var htmlId = widgetInstanceId + "Section";
      // /**
      // * dojo.fx.fadeOut({node: htmlId, duration: 500, onEnd: function(){ var
      // * htmlElement = dojo.byId(htmlId);
      // * htmlElement.parentNode.removeChild(htmlElement); } });
      // */
      //      
      // var temp380923 = function() {
      // var htmlElement = dom.byId(htmlId);
      // htmlElement.parentNode.removeChild(htmlElement);
      // var timestamp = new Date().getTime();
      // WidgetPlacementConfig.lastMod = timestamp;
      // var tempLoad = function(resp, ioArgs) {
      // WidgetPlacementConfig.widgetConfigXMLDocument = resp;
      // if (lconn.core.applicationPalette.palette != null) {
      // lconn.core.applicationPalette.palette.setJsonData(lconn.core.applicationPalette.getjsonData());
      // lconn.core.applicationPalette.palette.populatePalette(false);
      // }
      // hideDialog();
      // };
      // request(WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" + timestamp,
      // {
      // method: "GET",
      // handleAs: "xml"
      // }).then(function() {}, errorhandling.DefaultXHRErrorHandler); // prime
      // // the
      // // cache
      // };
      // var idosd80d = dojo.fx.wipeOut({
      // node: htmlId,
      // duration: 300,
      // onEnd: temp380923
      // });
      // idosd80d.play();
      //      
      // try {
      // eval('if(_' + widgetInstanceId +
      // '_iContext.iScope().onRemoveWidgetUIContent != null) _' +
      // widgetInstanceId + '_iContext.iScope().onRemoveWidgetUIContent();');
      // removeFromNavBar(widgetInstanceId);
      // WidgetPlacementMM.destroyWidget(widgetInstanceId, null, true);
      //      
      // // If we're on the Status Updates page, return to the
      // // overview
      // var delDefId = widgetInstanceNode.getAttribute("defIdRef");
      // if (delDefId == "StatusUpdates") {
      // window.location.href = WidgetPlacementConfig.applicationContext +
      // "/service/html/communityview?communityUuid=" +
      // WidgetPlacementConfig.resourceId;
      //      
      // }
      // } catch (e) {
      // console.log(e);
      // }
      // });
      // }
      // };
      // };
      //      
      // //
      // // Callback for simple ok/cancel dialogue for deleting widget.
      // //
      // var deleteWidgetCallback = function(widgetInstanceId, doDelete) {
      // if (doDelete == true) {
      // deleteOrHideWidgetCallback(widgetInstanceId, true);
      // }
      // };
      //      
      // //
      // // Callback to remove or hide widget.
      // //
      // var deleteOrHideWidgetCallback = function(widgetInstanceId, doDelete) {
      // if (doDelete == true) {
      // WidgetPlacementMM.removeWidget(widgetInstanceId, true, false);
      // WidgetPlacementMM.removeWidgetInProgress = false;
      // } else { // doDelete == false => do a hide
      // WidgetPlacementMM.removeWidget(widgetInstanceId, false, null);
      // }
      // };
      //      
      // var removeFromNavBar = function(widgetInstanceId) {
      // var liElementNode = dom.byId(widgetInstanceId + "_navItem");
      // if (liElementNode != null)
      // liElementNode.parentNode.removeChild(liElementNode);
      // }
      //      
      // var showAddWidgetDialog = function() {
      // var dialogContent = '<div class="lotusDialogBorder"><form
      // class="lotusDialog lotusForm">' + '<h1><img src="' +
      // WidgetPlacementConfig.applicationContext +
      // '/nav/common/styles/images/loading.gif" title="' +
      // messages['widget_AddingWidget'] + '"> ' +
      // messages['widget_AddingWidget'] + '</h1>' + '</form></div>';
      // WidgetPlacementMM.displayDialog(dialogContent);
      // }
      //      
      // var showRemoveWidgetDialog = function() {
      // var dialogContent = '<div class="lotusDialogBorder"><form
      // class="lotusDialog lotusForm">' + '<h1><img src="' +
      // WidgetPlacementConfig.applicationContext +
      // '/nav/common/styles/images/loading.gif"> ' +
      // messages['widget_RemovingWidget'] + '</h1>' + '</form></div>';
      // WidgetPlacementMM.displayDialog(dialogContent);
      // }
      //      
      // var hideDialog = function() {
      // // alert("hideDialog");
      // var temp = dijit.byId('dialog1');
      // if (temp != null) temp.hide();
      // }
      //      
      // WidgetPlacementMM.addWidgetToServerAndRender = function(widgetDefId,
      // uiLocation, unhide, instanceId) {
      // widgetDefIdString = widgetDefId[0];
      // var unhidingWidget = false; // Set to true iff we're unhiding the
      // // widget.
      // if (widgetDefIdString === "StatusUpdates") {
      // uiLocation = "col2statusposts";
      // }
      //      
      // if (unhide == false || unhide == "false") showAddWidgetDialog();
      // else {
      // unhidingWidget = true;
      // }
      //      
      // var dataUrl = WidgetPlacementConfig.applicationContext +
      // "/addWidget.do?resourceId=" + WidgetPlacementConfig.resourceId +
      // "&widgetDefId=" + widgetDefIdString + "&uiLocation=" + uiLocation;
      //      
      // if (unhide != null) {
      // dataUrl += "&unhide=" + unhide;
      // if (instanceId) {
      // dataUrl += "&instanceId=" + instanceId;
      // }
      // }
      //      
      // // ,sync: true
      // request(dataUrl, {
      // method: "POST",
      // handleAs: "xml"
      // }).then(function(resp, ioArgs) {
      // // alert("WidgetPlacementMM.addWidgetToServerAndRender ");
      // WidgetPlacementMM.addWidgetInProgress = false;
      // // alert("widget added, refresh the page (for now)");
      // var widgetInstanceId =
      // resp.documentElement.getAttribute("widgetInstanceId");
      // WidgetPlacementMM.loadOrder[WidgetPlacementMM.loadOrder.length] = {
      // instanceId: widgetInstanceId,
      // uiLocation: uiLocation
      // };
      // dojo.global.staleXMLConfig = true;
      // WidgetPlacementMM.getWidgetDocAndRenderWidget(widgetDefId, null,
      // widgetInstanceId, uiLocation);
      // hideDialog();
      // if (lconn.core.applicationPalette.palette != null) {
      // topic.publish(lconn.core.paletteOneUI.Palette.prototype.RECHECK_CAN_ADD_WIDGET_HANDLER_EVENT,
      // widgetDefId);
      // lconn.core.applicationPalette.palette.incCounter();
      // }
      // setTimeout(function() {
      // dom.byId("closePalette").focus();
      // }, dijit.defaultDuration + 200);
      //      
      // // If we're unhiding, since we're inserting the widget at the end
      // // of column, update the database to reflect that so a page
      // // refresh won't show
      // // the widget as moved.
      // if (unhidingWidget == true) {
      // WidgetPlacementMM.moveWidgetToEnd(widgetInstanceId, uiLocation);
      // }
      //      
      // // var timestamp = new Date().getTime();
      // // WidgetPlacementConfig.lastMod = timestamp;
      // // var tempLoad = function(resp, ioArgs)
      // // {
      // // WidgetPlacementConfig.widgetConfigXMLDocument = resp;
      // // hideDialog();
      // // if(lconn.core.applicationPalette.palette != null)
      // // {
      // //
      // dojo.publish(lconn.core.paletteOneUI.Palette.prototype.RECHECK_CAN_ADD_WIDGET_HANDLER_EVENT);
      // // lconn.core.applicationPalette.palette.incCounter();
      // // }
      // // dojo.byId("closePalette").focus();
      // // };
      // // dojo.xhrGet({url: WidgetPlacementConfig.layoutInfoUrl +
      // // "&lastMod=" + timestamp, handleAs: "xml", sync: true,
      // // error: lconn.core.errorhandling.DefaultXHRErrorHandler, load:
      // // tempLoad}); //prime the cache
      // // Refresh the left navigator:
      // var lotusNavBar = getNavBar();
      // if (lotusNavBar != null) {
      // try {
      // new WidgetPlacementMM.aria.Toolbar(lotusNavBar.id);
      // } catch (ee) {
      // new Toolbar(lotusNavBar.id);
      // }
      // }
      // }, WidgetPlacementMM.customAddWidgetErrorHandler);
      // };
      //      
      // //
      // // Shows widget error on page in headline div.
      // // set prepend = true iff you want the message pre-pended to he
      // headline.
      // // false to replace the headline content.
      // //
      // WidgetPlacementMM.showWidgetErrorInHeadline = function(error, prepend)
      // {
      // hideDialog();
      //      
      // WidgetPlacementMM.removeWidgetInProgress = false;
      // WidgetPlacementMM.addWidgetInProgress = false;
      //      
      // var errorText = "";
      // if (error != null && error.responseText != null) errorText =
      // error.responseText;
      // else errorText = error;
      // errorText = dojox.html.entities.encode(errorText);
      //      
      // var timeTemp = new Date().getTime();
      // var errorContent = '<div class="lotusFormError lotusMessage"
      // role="alert">' + '<img class="lotusIcon iconsMessages16
      // iconsMessages16-msgError16" src="' + dojo.config.blankGif + '" alt="' +
      // coreMessages['rs_messagebox_error_a11y_label'] + '" title="' +
      // coreMessages['rs_messagebox_error_a11y_label'] + '"/>' + '<span>' +
      // messages['error.title.generic'] + ' <a id="error_' + timeTemp + '"
      // href="javascript:void(0);"
      // onclick="lconn.core.utilities.show(\'errorTextContainer\');lconn.core.utilities.hide(\'error_'
      // + timeTemp + '\');" title="' + messages['info.feed.general.moreinfo'] +
      // '">' + messages['info.feed.general.moreinfo'] + '</a><div
      // id="errorTextContainer" style="display:none">' + errorText +
      // '</div></span>' + '</div>';
      // var temp = dom.byId('headline');
      // if (prepend == true) {
      // errorContent += temp.innerHTML;
      // }
      // temp.innerHTML = errorContent;
      // };
      //      
      //      
      // WidgetPlacementMM.customAddWidgetErrorHandler = function(error) {
      // return (WidgetPlacementMM.showWidgetErrorInHeadline(error, true));
      // };
      //      
      // WidgetPlacementMM.minimizeWidget = function(htmlElement,
      // widgetInstanceId, widgetDefId, hideWidget) {
      // utilities.hide(widgetInstanceId + 'moreActions', true, true);
      //      
      // var element = dom.byId(widgetInstanceId + "SubArea");
      //      
      // var menuItem = dijit.byId(widgetInstanceId + "_toggleAction");
      //      
      // // alert(menuItem);
      // if (domStyle.get(element, "display") == "none") {
      // cookie(widgetDefId + "-isMinimized", "false");
      // var menuWidget = dom.byId("widgetActionsMenu" + widgetInstanceId);
      // var widgetloaded = element.getAttribute("widgetloaded");
      // var widgetneedrefresh = element.getAttribute("widgetneedrefresh");
      // if (widgetneedrefresh == null) widgetneedrefresh = "true";
      //      
      // if (widgetloaded == 'false' && widgetneedrefresh == "true") {
      // var temp = function(response, ioArgs) {
      // var widgetDataDoc = response;
      // WidgetPlacementMM.refresh(widgetInstanceId, widgetDataDoc);
      // // lconn.core.utilities.toggleVisibility(element);
      // if (hideWidget) {
      // domStyle.set(element, "display", "none");
      // menuItem.setLabel(messages['widgets_Max']);
      // } else {
      // domStyle.set(element, "display", "");
      // menuItem.setLabel(messages['widgets_Min']);
      // }
      //      
      // };
      //      
      // if (WidgetPlacementConfig.widgetConfigXMLDocument != null)
      // temp(WidgetPlacementConfig.widgetConfigXMLDocument);
      // else request(WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" +
      // WidgetPlacementConfig.lastMod, {
      // method: "GET",
      // handleAs: "xml",
      // sync: true
      // }).then(, errorhandling.DefaultXHRErrorHandler);
      // } else {
      // // lconn.core.utilities.toggleVisibility(element);
      // domStyle.set(element, "display", "");
      //      
      // menuItem.setLabel(messages['widgets_Min']);
      // }
      // } else {
      // cookie(widgetDefId + "-isMinimized", "true");
      // var menuWidget = dom.byId("widgetActionsMenu" + widgetInstanceId);
      // // lconn.core.utilities.toggleVisibility(element);
      // domStyle.set(element, "display", "none");
      //      
      //      
      // menuItem.setLabel(messages['widgets_Max']);
      // }
      //      
      // window.setTimeout("WidgetPlacementMM.setFocus('" + widgetInstanceId +
      // "', 'widgetActionsMenu" + widgetInstanceId + "');", 0);
      // };
      //      
      //      
      // WidgetPlacementMM.addEditTabsWithOnclickCalls =
      // function(TabContainerDomId, editModeContainerDomId, intialDisplayDomId,
      // cancelCallBack, editPageTabFirstItemDomId) {
      // return WidgetPlacementMM.addTabsWithOnclickCalls(TabContainerDomId,
      // editModeContainerDomId, intialDisplayDomId, cancelCallBack,
      // editPageTabFirstItemDomId, "edit");
      // }
      //      
      // WidgetPlacementMM.showFirstTab = function(intialDisplayDomId,
      // FirstTabItemDomId, callback) {
      // if (WidgetPlacementConfig.TabContainerDomId != null) {
      // var parentHTMLNode =
      // document.getElementById(WidgetPlacementConfig.TabContainerDomId);
      // if (parentHTMLNode != null) {
      // query("li[id$='_TabItem']", parentHTMLNode).forEach(function(node) {
      // domClass.remove(node, "lotusSelected");
      // domAttr.set(node, {
      // "tabindex": "-1",
      // "aria-selected": "false",
      // "role": "tab"
      // });
      // });
      // }
      //      
      // // set the aria-label of the tabpanel to match the tab selected
      // try {
      // domAttr.set(dom.byId(WidgetPlacementConfig.TabContainerDomId +
      // "_panel"), "aria-label", query("a._linkHolder",
      // dom.byId(FirstTabItemDomId))[0].innerHTML);
      // } catch (ee) {}
      // }
      //      
      // if (WidgetPlacementConfig.TempWidgetContainerDomId != null)
      // destroyWidgetContainer(WidgetPlacementConfig.TempWidgetContainerDomId);
      //      
      // if (intialDisplayDomId != null) utilities.show(intialDisplayDomId);
      //      
      // if (FirstTabItemDomId != null) {
      // query("#" + FirstTabItemDomId).forEach(function(liItem) {
      // domAttr.set(liItem, {
      // "tabindex": "0",
      // "aria-selected": "true"
      // });
      // domClass.add(liItem, 'lotusSelected');
      // });
      // }
      // var hash = window.location.hash;
      // if (hash != null) {
      // // CCM
      // var searchTabPos = hash.indexOf("&tab");
      // if (searchTabPos > 0) {
      // changeHash(hash.substr(0, searchTabPos));
      // }
      // }
      //      
      // if (callback != null) callback();
      //      
      // return false;
      // }
      //      
      //      
      //      
      // WidgetPlacementMM.addTabsWithOnclickCalls = function(TabContainerDomId,
      // TempWidgetContainerDomId, intialDisplayDomId, cancelCallBack,
      // FirstTabItemDomId, widgetMode, attributesMap) {
      // var selecedtNode = null;
      // array.forEach(WidgetPlacementMM.uiLocations, function(loc) {
      // utilities.show("widget-container-" + loc, false, true);
      // });
      //      
      // array.forEach((WidgetPlacementConfig.hideElements || []),
      // function(elem) {
      // utilities.hide(elem, false, true);
      // });
      //      
      // if (cancelCallBack != null) {
      // WidgetPlacementConfig.cancelCallBack = cancelCallBack;
      // }
      //      
      // var selectTabId = null;
      // var selectTabInst = null;
      // var showHidden = false;
      // var moreActionsNode = null;
      //      
      // if (attributesMap && attributesMap.length > 0) {
      // var component = attributesMap[0].component;
      // if (component && component == "communities:content") {
      // showHidden = true;
      // }
      // selectTabId = attributesMap[0].selectTab;
      // selectTabInst = attributesMap[0].selectTabInst;
      // var key = attributesMap[0].entryValue;
      // if (key) {
      // if (attributesMap[0].entryName == "searchKeywords") {
      // var hash = "query=" + key;
      // } else if (attributesMap[0].entryName == "tagCloudItemValue") {
      // var hash = "tag=" + key;
      // }
      // if (hash) {
      // // CCM
      // if (selectTabInst) {
      // hash += "&tabinst=" + selectTabInst;
      // } else if (selectTabId) {
      // hash += "&tab=" + selectTabId;
      // }
      // changeHash(hash);
      // }
      // }
      //      
      // moreActionsNode = attributesMap[0].moreActionsContainerNode;
      // }
      //      
      // var displayedUserInfo = getDisplayedUserInfo();
      // var profileType = (displayedUserInfo &&
      // typeof(displayedUserInfo.profileType) == "string" &&
      // lang.trim(displayedUserInfo.profileType).length > 0 ?
      // displayedUserInfo.profileType : "default");
      // var exp1 = "/tns:widgets/tns:layout[@resourceSubType='" + profileType +
      // "']/tns:page[@pageId='" + WidgetPlacementConfig.defaultPageId +
      // "']/tns:widgetInstance";
      // var exp2 =
      // "/tns:widgets/tns:layout[@resourceSubType='default']/tns:page[@pageId='"
      // + WidgetPlacementConfig.defaultPageId + "']/tns:widgetInstance";
      // var data = WidgetPlacementConfig.widgetConfigXMLDocument;
      // var nodes = xpath.selectNodes(exp1, data);
      // if (nodes == null || !nodes.length) { // fall back to default layout
      // // when there is no layout for
      // // current profile type
      // nodes = xpath.selectNodes(exp2, data);
      // }
      //      
      //      
      // var canPersonalize = getUserProfileOverrideProperty("canPersonalize")
      // == "true";
      //      
      // var selectTab = function(node, opts) {
      //      
      // query("._iconHolder", node.parentNode).forEach(function(iconNode) {
      // domStyle.set(iconNode, "display", "none");
      // });
      // if (!moreActionsNode) {
      // query("._iconHolder", node).forEach(function(iconNode) {
      // domStyle.set(iconNode, "display", "inline");
      // });
      // }
      //      
      // // set the aria-label of the tabpanel to match the tab selected
      // try {
      // domAttr.set(dom.byId(WidgetPlacementConfig.TabContainerDomId +
      // "_panel"), "aria-label", query("a._linkHolder", node)[0].innerHTML);
      // } catch (ee) {}
      //      
      //      
      // var widgetDefId = opts.defNode.getAttribute("defId");
      // var widgetInstanceId = opts.instNode.getAttribute("instanceId")
      // widgetInstanceId = (widgetInstanceId == null ? widgetDefId :
      // widgetInstanceId);
      //      
      // // Show informational message that changes should be saved for
      // // each tab.
      // if (WidgetPlacementMM.infoMessage == null &&
      // dom.byId("editWarningMessage")) {
      // WidgetPlacementMM.infoMessage = new MessageBox({
      // canClose: true,
      // _strings: {
      // icon_alt: coreMessages["rs_messagebox_info_icon_alt"],
      // a11y_label: coreMessages["rs_messagebox_info_a11y_label"],
      // close_btn_title: coreMessages["rs_close"],
      // close_btn_alt: coreMessages["rs_close"]
      // },
      // type: MessageBox.TYPE.INFO,
      // msg: messages["switchTabWarning"]
      // }, domConstruct.create("div"));
      // domConstruct.place(WidgetPlacementMM.infoMessage.domNode,
      // dom.byId("editWarningMessage"), "only");
      // };
      //      
      // if (opts.destroyContainer) {
      // destroyWidgetContainer(WidgetPlacementConfig.TempWidgetContainerDomId,
      // false);
      // }
      //      
      // WidgetPlacementMM.destroyWidget(widgetInstanceId, null, false, true);
      //      
      // WidgetPlacementMM.getWidgetDocAndRenderWidget(
      // widgetDefId, opts.defNode, widgetInstanceId,
      // WidgetPlacementConfig.TempWidgetContainerDomId, opts.widgetMode,
      // "skinless", false, false, opts.attributesMap);
      //      
      // if (opts.initDispId != null) utilities.hide(opts.initDispId, false,
      // true);
      //      
      // if (opts.attributesMap && opts.attributesMap.length > 0) {
      // var key = opts.attributesMap[0].entryValue;
      // if (key) {
      // if (attributesMap[0].entryName == "searchKeywords") {
      // var hash = "query=";
      // } else if (attributesMap[0].entryName == "tagCloudItemValue") {
      // var hash = "tag=";
      // }
      // if (hash) {
      //      
      // selectTabId = attributesMap[0].selectTab;
      // selectTabInst = attributesMap[0].selectTabInst;
      //      
      // hash += key;
      // if (selectTabInst) {
      // hash += "&tabinst=" + widgetInstanceId;
      // } else if (selectTabId) {
      // hash += "&tab=" + widgetDefId;
      // } else {
      // hash += "&tabinst=" + widgetInstanceId;
      // }
      // changeHash(hash);
      // }
      // }
      // }
      //      
      // // we have an external node to hold the more actions, update that
      // // when we switch tabs
      // if (moreActionsNode) {
      //      
      // // destroy, disconnect, and remove old dijits and dom elements
      // var oldDijit = dijit.byId(opts.instId + 'moreActions');
      // if (oldDijit) oldDijit.destroy();
      // if (WidgetPlacementMM._moreActionsConnect)
      // WidgetPlacementMM._moreActionsConnect.remove();
      //      
      // var linkId = moreActionsNode.id + "_menuHolder"
      // query("." + linkId).forEach(function(node) {
      // node.parentNode.removeChild(node);
      // });
      //      
      // // create new dijits and dom elements
      // domConstruct.place('<div dojoType="dijit.Menu" id="' + opts.instId +
      // 'moreActions" class="' + linkId + '" style="display:none;"></div>',
      // moreActionsNode, "after");
      //      
      // // set the aria label and title to the correct text
      // var widgetName = window.getEscapedWidgetName(opts.defNode,
      // opts.instNode);
      // var actionsAlt = messages['actions_alt'] || "Actions for: ${0}";
      // actionsAlt = string.substitute(actionsAlt, [widgetName]);
      //      
      // query("a", moreActionsNode).forEach(function(node) {
      // domAttr.set(node, {
      // title: actionsAlt,
      // "aria-label": actionsAlt
      // });
      // });
      // query(".lotusAltText", moreActionsNode).forEach(function(node) {
      // domAttr.set(node, {
      // innerHTML: actionsAlt
      // });
      // });
      //      
      // // get a reference to the newly generated moreActions node
      // var linkNode = dom.byId(opts.instId + 'moreActions');
      //      
      // // add the refresh menu item
      // domConstruct.place(
      // domConstruct.create("div", {
      // dojoType: "dijit.MenuItem",
      // label: messages['refresh'],
      // "onclick": "WidgetPlacementMM.fetchAndRefresh('" + opts.instId + "');"
      // }), linkNode, "last");
      //      
      // // add the help menu item
      // var helpLink = opts.defNode.getAttribute("helpLink");
      //      
      // if (helpLink && helpLink.length != 0) {
      // helpLink = lconn.core.i18nOverrider.replaceParams(helpLink,
      // WidgetPlacementConfig.params);
      // var helpItem = domConstruct.create("div", {
      // dojoType: "dijit.MenuItem",
      // label: messages['help'],
      // title: messages['link.window.openNewWindow'],
      // "onclick": "lconn.core.utilities.hide('" + opts.instId + "', false,
      // true);" + "WidgetPlacementMM.openHelpWindow('" + helpLink + "');"
      // });
      // domConstruct.place(helpItem, linkNode, "last");
      // }
      //      
      // // parse the newly generated moreActions so the Menu will show
      // parser.parse(linkNode.parentNode);
      //      
      //      
      // // let's connect the click to open the newly generated menu
      // WidgetPlacementMM._moreActionsConnect = on(moreActionsNode, "click",
      // function(evt) {
      // WidgetPlacementMM.openMenu(evt, opts.instId);
      // evt.preventDefault(), evt.stopPropagation();
      // });
      //      
      //      
      // }
      // };
      //      
      // var addTab = function(opts) {
      // var maxTabLength = 50; // Maximum number of characters in tab's
      // // string.
      // var widgetDefId = opts.defNode.getAttribute("defId");
      //      
      // var widgetName = window.getEscapedWidgetName(opts.defNode,
      // opts.instNode);
      // if (widgetName.length > maxTabLength) {
      // widgetName = widgetName.substring(0, maxTabLength) + "...";
      // }
      //      
      //      
      // var li = dom.byId(opts.instId + "_TabItem");
      // if (li == null) {
      // li = domConstruct.create("li", {
      // id: opts.instId + "_TabItem",
      // role: "tab"
      // });
      // domConstruct.place(li, TabContainerDomId, "last");
      // }
      //      
      // domAttr.set(li, {
      // itemidx: opts.itemIdx,
      // innerHTML: '<a class="_linkHolder lotusLeft">' + widgetName + '</a>' +
      // '<a class="_iconHolder lotusIcon lotusLeft" style="padding: 0; display:
      // none;"></a>' + '<div class="_menuHolder" style="display: none;"><div>'
      // });
      //      
      // on(li, "click", function(evt) {
      // selectTab(li, opts);
      // evt.preventDefault(), evt.stopPropagation();
      // return false;
      // });
      //      
      // if (!opts.showMenu) {
      // query("._iconHolder", li).forEach(domConstruct.destroy);
      // query("div._menuHolder", li).forEach(domConstruct.destroy);
      //      
      // } else if (!moreActionsNode) {
      // var messages = i18nwidgets;
      //      
      // var pMenu = query("div._menuHolder", li)[0];
      //      
      // domAttr.set(pMenu, {
      // id: opts.instId + "moreActions",
      // dojoType: "dijit.Menu"
      // });
      //      
      // var refreshItem = domConstruct.create("div", {
      // dojoType: "dijit.MenuItem",
      // label: messages['refresh'],
      // "onclick": "WidgetPlacementMM.fetchAndRefresh('" + opts.instId + "');"
      // });
      // domConstruct.place(refreshItem, pMenu, "last");
      //      
      // var helpLink = opts.defNode.getAttribute("helpLink");
      //      
      // if (helpLink && helpLink.length != 0) {
      // helpLink = lconn.core.i18nOverrider.replaceParams(helpLink,
      // WidgetPlacementConfig.params);
      // var helpItem = domConstruct.create("div", {
      // dojoType: "dijit.MenuItem",
      // label: messages['help'],
      // title: messages['link.window.openNewWindow'],
      // "onclick": "lconn.core.utilities.hide('" + pMenu.id + "', true, true);"
      // + "WidgetPlacementMM.openHelpWindow('" + helpLink + "');"
      // });
      // domConstruct.place(helpItem, pMenu, "last");
      // }
      //      
      // var actionsAlt = messages['actions_alt'] || "Actions for: ${0}";
      // actionsAlt = string.substitute(actionsAlt, [widgetName]);
      //      
      // var pIcon = query("._iconHolder", li)[0];
      // domAttr.set(pIcon, {
      // id: opts.instId + "_MenuIcon",
      // role: "button",
      // "aria-haspopup": "true",
      // href: "javascript:void(0);",
      // innerHTML: '<img class="lotusArrow" alt="' + actionsAlt + '" title="' +
      // actionsAlt + '" src="' + _Widget.prototype._blankGif + '"/><span
      // class="lotusAltText">&#9660;</span>'
      // });
      // domClass.add(pIcon, "lotusIcon");
      // on(pIcon, "click", function(evt) {
      // WidgetPlacementMM.openMenu(evt, opts.instId);
      // evt.preventDefault(), evt.stopPropagation();
      // });
      //      
      //      
      // }
      //      
      // domConstruct.place(li, TabContainerDomId);
      // parser.parse(li);
      // return (li);
      // };
      //      
      // nodes = nodes || [];
      //      
      // array.forEach(nodes, lang.hitch(this, function(widgetInstanceNode, idx)
      // {
      // var defIdRef = widgetInstanceNode.getAttribute("defIdRef");
      //      
      // if (selectTabId == null) {
      // selectTabId = defIdRef;
      // }
      //      
      // var exp3 = "/tns:widgets/tns:definitions/tns:widgetDef[@defId = '" +
      // defIdRef + "']";
      // var widgetDefinitionNode = xpath.selectSingleNode(exp3, data);
      // if (widgetDefinitionNode == null) return; // the widget def is
      // // missing the config
      // // file.
      // var uiLocation = widgetInstanceNode.getAttribute("uiLocation");
      // var modes = widgetDefinitionNode.getAttribute("modes");
      // var instanceId = widgetInstanceNode.getAttribute("instanceId");
      // if (instanceId == null) instanceId = defIdRef;
      //      
      // if (instanceId == TempWidgetContainerDomId) return; // skip adding
      // // widget to
      // // widget's
      // // self
      // // location
      // if (!canAddWidget(widgetDefinitionNode, WidgetPlacementConfig,
      // canPersonalize, widgetInstanceNode, showHidden)) return;
      //      
      // var params = {
      // containerId: TabContainerDomId,
      // defNode: widgetDefinitionNode,
      // instNode: widgetInstanceNode,
      // instId: instanceId,
      // initDispId: intialDisplayDomId,
      // cancelCallBack: cancelCallBack,
      // widgetMode: widgetMode,
      // attributesMap: lang.clone(attributesMap),
      // itemIdx: idx,
      // showMenu: false,
      // destroyContainer: true
      // };
      //      
      // var addedNode = null;
      // if (modes != null && modes.indexOf(widgetMode) != -1) {
      // addedNode = addTab(params);
      // } else if (uiLocation == TempWidgetContainerDomId) {
      // params.showMenu = true;
      // addedNode = addTab(params);
      // }
      //      
      // if (instanceId == selectTabInst) {
      // selecedtNode = addedNode;
      // } else if (defIdRef == selectTabId) {
      // selecedtNode = addedNode;
      // }
      //      
      // }));
      //      
      //      
      // WidgetPlacementConfig.isTabbedFullPageWidgetRendering = true;
      // WidgetPlacementConfig.TempWidgetContainerDomId =
      // TempWidgetContainerDomId;
      // WidgetPlacementConfig.TabContainerDomId = TabContainerDomId;
      //      
      //      
      // if (WidgetPlacementMM.aria && typeof(WidgetPlacementMM.aria.TabPanel)
      // == "function") {
      // new WidgetPlacementMM.aria.TabPanel(TabContainerDomId);
      // if (selecedtNode != null) {
      // selecedtNode.click();
      // }
      // }
      //      
      // // code makes sure the height of the image in the tabs is equal to the
      // // height of the link text.
      // // For the case where the customer changes the appearance of the tabs.
      // query("a._iconHolder",
      // dom.byId(TabContainerDomId)).forEach(function(iconNode) {
      // var imgNode = query("img.lotusArrow", iconNode);
      // if (imgNode.length > 0) {
      // var linkNode = query("._linkHolder", iconNode.parentNode);
      // if (linkNode.length > 0) {
      // var h = dojo.coords(linkNode[0]).h - domStyle.get(linkNode[0],
      // "borderBottomWidth");
      // if (!has("ie")) h -= domStyle.get(linkNode[0], "borderTopWidth");
      // domStyle.set(imgNode[0], "height", h + "px");
      // }
      // }
      // });
      // }
      //      
      //      
      // // FIXME: this needs to be refactored to be in a package, or part of a
      // // container service
      // window.changeHash = function(hashValue) {
      // /*
      // * if(dojo.isIE && hashValue != "" && hashValue != "#" &&
      // * dojo.byId(hashValue)== null) { var aNode =
      // * document.createElement("a"); aNode.setAttribute("name",hashValue);
      // * aNode.setAttribute("id",hashValue); aNode.style.display = "none";
      // * document.body.insertBefore(aNode,document.body.firstChild); }
      // */
      // window.location.hash = hashValue;
      // }
      //      
      // WidgetPlacementMM.URLChange = function(URL) {
      // if (WidgetPlacementConfig.debug)
      // console.log("WidgetPlacementMM.URLChange: value: " + URL);
      // // var URL =
      // //
      // "http://localhost:9080/communities/service/html/communityview?communityUuid=2a7e365a-2371-4cd2-8024-6cade1e4cee7&debug=widget";
      // // var URL =
      // //
      // "http://localhost:9080/communities/service/html/communityview?communityUuid=2a7e365a-2371-4cd2-8024-6cade1e4cee7&debug=widget#";
      // // var URL =
      // //
      // "http://localhost:9080/communities/service/html/communityview?communityUuid=2a7e365a-2371-4cd2-8024-6cade1e4cee7&debug=widget#fullpageWidgetId=Members";
      // var index = URL.indexOf("#");
      //      
      // if (index == -1 || URL.substring(index).length == 1) {
      // WidgetPlacementMM.reloadOverviewPage();
      // return;
      // }
      //      
      // var fullpageWidgetId = utilities.getURLParam("fullpageWidgetId", true);
      // if (fullpageWidgetId && fullpageWidgetId !=
      // WidgetPlacementMM.currentFullpageWidgetInstanceId) {
      // WidgetPlacementMM.loadFullpageView(fullpageWidgetId, null, false, true,
      // true);
      // return;
      // }
      //      
      // // Check for query and tag hashes - indicating search url. Force
      // // browser to switch to it and send url to server.
      // var queryValue = utilities.getURLParam("query", true);
      // var tagValue = utilities.getURLParam("tag", true);
      // if (queryValue != null || tagValue != null) {
      // // If we're already displaying the search result form - don't do
      // // navigation to search again.
      // if (domStyle.get("searchCommunityForm", "display") == "none") {
      // // Duplicate what a search does...
      // var attributesMap = [];
      // selectTabInstValue = utilities.getURLParam("tabinst", true);
      // selectTabValue = utilities.getURLParam("tab", true);
      // if (typeof(selectTabInstValue) == "undefined") {
      // selectTabInstValue = null;
      // }
      // if (typeof(selectTabValue) == "undefined") {
      // selectTabValue = null;
      // }
      // if (queryValue != null) {
      // attributesMap.push({
      // entryName: "searchKeywords",
      // entryValue: queryValue,
      // component: "communities:content",
      // selectTabInst: selectTabInstValue,
      // selectTab: selectTabValue
      // });
      // } else {
      // attributesMap.push({
      // entryName: "tagCloudItemValue",
      // entryValue: tagValue,
      // component: "communities:content",
      // selectTabInst: selectTabInstValue,
      // selectTab: selectTabValue
      // });
      // }
      // lconn.comm.community.handleSearchRequestbyGeneral(attributesMap);
      // }
      // }
      // };
      //
      // WidgetPlacementMM.init = function() {
      //
      // if (WidgetPlacementMM.URLChangeCallBack == null) {
      // WidgetPlacementMM.URLChangeCallBack = [ WidgetPlacementMM.URLChange
      // ];
      // registerBackButtonSupport();
      // }
      //
      // var fullpageWidgetId = utilities.getURLParam("fullpageWidgetId", true);
      // if (fullpageWidgetId == null || fullpageWidgetId == "") {
      // WidgetPlacementMM.placeWidgetMetadata();
      // WidgetPlacementMM.renderWidgets();
      //
      // if (WidgetPlacementConfig.hideElements != null)
      // for (var i = 0; WidgetPlacementConfig.hideElements != null && i <
      // WidgetPlacementConfig.hideElements.length; i++)
      // utilities.show(WidgetPlacementConfig.hideElements[i], false, false,
      // true);
      // }
      // else {
      // WidgetPlacementMM.onlyFullPageWidgetLoaded = true;
      // var temp = function(response, ioArgs) {
      // var widgetData = response;
      // WidgetPlacementConfig.widgetConfigXMLDocument = widgetData;
      //
      // loadNavItemsOnly(true,
      // (getUserProfileOverrideProperty("canPersonalize") ==
      // "true"), getDisplayedUserInfo());
      //
      // var overrideOverViewLink = false;
      // var addState = "initial";
      // WidgetPlacementMM.loadFullpageView(fullpageWidgetId, null, addState,
      // overrideOverViewLink);
      //
      // };
      // request(WidgetPlacementConfig.layoutInfoUrl + "&lastMod=" +
      // WidgetPlacementConfig.lastMod, {
      // method : "GET",
      // handleAs : "xml",
      // sync : true
      // }).then(function() {}, errorhandling.DefaultXHRErrorHandler);
      // }
      // }
      //
      // // Initialize the widget framework to support edit mode
      // WidgetPlacementMM.initEdit = function() {
      // WidgetPlacementMM.placeWidgetMetadata(false);
      // WidgetPlacementMM.renderWidgets();
      // };
      //
      // WidgetPlacementMM.setFocus = function(widgetId, elemId) {
      // var section = document.getElementById(widgetId + "Section");
      // if (section) {
      // var elems = query("#" + elemId, section);
      // if (elems && elems.length > 0) {
      // try {
      // if (elems[0].focus)
      // elems[0].focus();
      // }
      // catch (e) {
      // console.log(e.message);
      // }
      // }
      // }
      // };

      return WidgetPlacementMM;
   });
