/* ***************************************************************** */
/*                                                                   */
/* IBM Confidential                                                  */
/*                                                                   */
/* OCO Source Materials                                              */
/*                                                                   */
/* Copyright IBM Corp. 2010, 2015                                    */
/*                                                                   */
/* The source code for this program is not published or otherwise    */
/* divested of its trade secrets, irrespective of what has been      */
/* deposited with the U.S. Copyright Office.                         */
/*                                                                   */
/* ***************************************************************** */

define([
      "dojo",
      "dojo/json",
      "dojo/dom-class",
      "dojo/_base/lang",
      "dojo/i18n",
      "dojo/dom-construct",
      "dojo/_base/array",
      "dojo/_base/config",
      "dojo/i18n!./config/nls/widgetbundles",
      "dojo/dom",
      "dojo/on",
      "ic-gadget/support/WidgetSite",
      "ic-ui/util/Url",
      "ic-core/Res",
      "ic-core/SearchBar",
      "ic-core/auth",
      "ic-core/config",
      "ic-core/config/services",
      "ic-core/help",
      "ic-core/url"
],
   function(dojo, JSON, domClass, lang, i18n, domConstruct, array, dojoConfig, i18nwidgetbundles, dom, on, WidgetSite, Url, Res, SearchBar, auth, config, services, help, urlModule) {

      // Generated by administrator configuration

      var WidgetLauncher = lang.getObject("lconn.core.WidgetLauncher", true);

      var _res = new Res();
      _res.loadDefaultBundle();
      var _strBundle = _res.resBundle;

      function _h(el) {
         domClass.add(el, "lotusHidden");
      }
      ;
      function _u(el) {
         domClass.remove(el, "lotusHidden");
      }
      ;

      /*
       * function _getHelpBookUrl(topic) { var url = null, svcUrl =
       * lconn.core.url.getServiceUrl(lconn.core.config.services.help); if
       * (svcUrl) url = svcUrl.toString() + "/topic/" + (topic ||
       * "com.ibm.lotus.connections.common.help/euframe.html"); return url; };
       */
      function _openHelpWindow(topic) {
         /*
          * var h = Math.max(window.screen.height / 4, 800); var w =
          * Math.max(window.screen.width / 4, 800) var options =
          * "height="+h+",width="+w+",status=yes,toolbar=yes,menubar=no,location=no,scrollbars=yes,resizable=yes";
          * var url = _getHelpBookUrl(topic); window.open(url, "helpWindow",
          * options).focus();
          */
         help.launchHelp(topic);
      }
      ;

      function _applyConnectionsLinks(a) {
         if (a.href) {
            if (/login_app_replace$/.test(a.href)) {
               a.href = "javascript:;";
               on(a, "click", lang.hitch(null, function() {
                  auth.login();
               }));
            }
            else if (/logout_app_replace$/.test(a.href)) {
               a.href = "javascript:;";
               on(a, "click", lang.hitch(null, function() {
                  var u = auth.getLogoutUrl(window.location.href);
                  auth.logout(u);
               }));
            }
            else if (/help_app_replace$/.test(a.href)) {
               a.href = "javascript:;";
               on(a, "click", lang.hitch(null, function() {
                  _openHelpWindow();
               }));
            }
         }
      }
      ;

      function _getWidgetResourcedString(bundleRefId, attribute) {
         var widgetMessages = i18nwidgetbundles;
         var prefix = bundleRefId || "lc_default";
         var resourceBundle = (prefix == "lc_default") ? widgetMessages : widgetMessages[prefix];
         if (!resourceBundle) {
            if (dojoConfig.isDebug) {
               console.log("unable to find resource bundle for '" + prefix + "'");
            }
            resourceBundle = {};
         }
         var value = resourceBundle[attribute];
         return (value === undefined) ? attribute : value;
      }
      ;

      function _getSearchRoot() {
         var isSecure = Url.secure;
         var svcUrl = urlModule.getServiceUrl(services.search, isSecure);
         return svcUrl.uri;
      }
      ;

      function _renderTitleBar(opt, el) {
         var title = document.title = _getWidgetResourcedString(opt.bundleRefId, opt.widgetDefId);

         var rightCorner = domConstruct.create("div", {
            className : "lotusRightCorner"
         }, el);
         var inner = domConstruct.create("div", {
            className : "lotusInner"
         }, rightCorner);

         var h2 = domConstruct.create("h2", {
            className : "lotusHeading"
         }, inner);
         var span = domConstruct.create("span", {
            className : "lotusText",
            innerHTML : title
         }, h2);

         var form = domConstruct.create("form", {}, inner);
         var searchBar = new SearchBar({
            lblAllConnections : _strBundle.rs_all_connections,
            lblAdvanced : _strBundle.rs_advanced,
            lblSearch : _strBundle.rs_search,
            lblSelectScope : _strBundle.rs_select_scope,
            searchContextPath : _getSearchRoot(),
            onSubmit : function() {
               return true;
            }
         }, form);
      }
      ;

      function _renderFrame(opt) {
         var banner = dom.byId("lotusBanner");
         array.forEach(banner.getElementsByTagName("A"), _applyConnectionsLinks);

         var titleBar = dom.byId("lotusTitleBar");
         _renderTitleBar(opt, titleBar);
      }
      ;

      function _initWidgetSpec(opt) {
         if (!opt || !opt.widgetDefUrl)
            return;

         var widgetSpec = null;
         var items = [];

         if (opt.widgetAttrs) {
            try {
               var widgetAttrsObj = opt.widgetAttrs;
               for (key in widgetAttrsObj) {
                  var o = {};
                  o["id"] = key;
                  o["value"] = widgetAttrsObj[key];
                  items.push(o);
               }
            }
            catch (e) {
               if (dojoConfig.isDebug) {
                  console.log("error on widget attributes parsing");
               }
               return null;
            }
         }

         var widgetSpec = {
            "definitionUrl" : opt.widgetDefUrl,
            "componentType" : "iWidget",
            "moduleId" : opt.widgetDefId,
            "instanceData" : {
               "itemSet" : [ {
                  "id" : "attributes",
                  "item" : items
               }
               ]
            }
         };
         return widgetSpec;
      }
      ;

      WidgetLauncher.start = function(opt, node) {
         if (!node)
            return;

         _renderFrame(opt);

         var widgetSpec = _initWidgetSpec(opt);

         if (!widgetSpec) {
            if (dojoConfig.isDebug) {
               console.log("bad widget spec!");
            }
            return;
         }

         if (dojoConfig.isDebug) {
            console.log("widget spec: " + JSON.stringify(widgetSpec));
         }

         iContainer2.getCommonContainer().then(function() {
            window.getServiceManager().getService(cre$.services.EVENTSERVICE).then(function(evtSrv) {
               evtSrv.subscribeEvent(cre$.constants.event.topic.WIDGET_LOADED + opt.widgetDefId, null, function() {
                  _h(dom.byId("lconnApplicationLoading"));
                  _u(dom.byId("lotusBanner"), "lotusHidden");
                  _u(dom.byId("lotusTitleBar"), "lotusHidden");
                  _u(dom.byId("lotusMain"), "lotusHidden");
                  _u(dom.byId("lotusFooter"), "lotusHidden");
               });
            })

            var widget = new WidgetSite({
               widgetSpec : widgetSpec
            }, node);
            widget.startup();
         });
      }

      return WidgetLauncher;
   });
