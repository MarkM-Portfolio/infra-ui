/* ***************************************************************** */
/*                                                                   */
/* Licensed Materials - Property of HCL                              */
/*                                                                   */
/* Copyright HCL Technologies Limited 2006, 2022                     */
/*                                                                   */
/* US Government Users Restricted Rights                             */
/*                                                                   */
/* ***************************************************************** */

define([
      "dojo",
      "dojo/_base/array",
      "dojo/_base/config",
      "dojo/_base/declare",
      "dojo/_base/json",
      "dojo/_base/kernel",
      "dojo/_base/lang",
      "dojo/_base/window",
      "dojo/cookie",
      "dojo/Deferred",
      "dojo/dnd/Manager",
      "dojo/dom",
      "dojo/dom-attr",
      "dojo/dom-class",
      "dojo/dom-construct",
      "dojo/dom-style",
      "dojo/fx",
      "dojo/has",
      "dojo/i18n",
      "dojo/i18n!./config/nls/widgetbundles",
      "dojo/i18n!./nls/insertimagedialog",
      "dojo/i18n!./nls/strings",
      "dojo/i18n!./nls/widgets",
      "dojo/io-query",
      "dojo/on",
      "dojo/parser",
      "dojo/query",
      "dojo/request",
      "dojo/string",
      "dojo/topic",
      "dijit/_Widget",
      "dijit/Dialog",
      "dijit/registry",
      "ic-gadget/container/iContainer2",
      "ic-gadget/util/trace",
      "ic-ui/DialogUtil",
      "ic-ui/MessageBox",
      "./aria/Toolbar",
      "./back",
      "./config/features",
      "./config/properties",
      "./config/services",
      "./errorhandling",
      "./help",
      "./HTMLUtil",
      "./paletteOneUI/dnd/avatar",
      "./paletteOneUI/dnd/Source",
      "./utilities",
      "./xpath",
      "./wp/events"
],
   function(dojo, array, dojoConfig, declare, jsonUtil, kernel, lang,
      windowModule, cookie, Deferred, Manager, dom, domAttr, domClass,
      domConstruct, domStyle, fx, has, i18n, i18nwidgetbundles,
      i18nInsertImageDialog, i18nstrings, i18nwidgets, ioQuery, on, parser,
      query, request, string, topic, _Widget, Dialog, registry, iContainer,
      logger, DialogUtil, MessageBox, Toolbar, back, hasFeature, properties,
      servicesConfig, errorhandling, help, HTMLUtil, Avatar, Source, utilities,
      xpath, events) {

      var win = windowModule.global;
      var wpCRE = {};

      var messages = i18nwidgets,
          widgetMessages = null,
          coreMessages = i18nstrings;

      // all requires are handled by WidgetPlacement
      // Has content from communities UI strings
      // Generated by administrator configuration
      if (!win.WidgetPlacementConfig)
         win.WidgetPlacementConfig = {
            debug : false,
            appStartupDate : ''
         };

      var _creInited = false;

      var _serviceName = ((win.ibmConfig) ? win.ibmConfig.serviceName : null),
          _isCommunitiesPage = ('communities' === _serviceName),
          _isProfilesPage = ('profiles' === _serviceName);

      var _useServerInjection = true;
      var useServerInjectionParam = utilities.getURLParam('useServerInjection', true);
      if ('false' === useServerInjectionParam) {
         _useServerInjection = false;
      } else if ('true' === useServerInjectionParam) {
         _useServerInjection = true;
      } else if (_isProfilesPage || _isCommunitiesPage) {
         _useServerInjection = !('false' === properties['lconn.core.WidgetPlacement.'+_serviceName+'.useServerInjection']);
      }

      var _limitedDND = false;
      var limitedDNDParam = utilities.getURLParam('limitedDND', true);
      if ('false' === limitedDNDParam) {
         _limitedDND = false;
      } else if ('true' === limitedDNDParam) {
         _limitedDND = true;
      }

      var _freeLayout = true;
      var freeLayoutParam = utilities.getURLParam('freeLayout', true);
      if ('false' === freeLayoutParam) {
         _freeLayout = false;
      } else if ('true' === freeLayoutParam) {
         _freeLayout = true;
      }

      //gatekeeper: communities-show-hidden-in-navigator
      var is_communities_show_hidden_in_navigator = false;
      if( typeof gatekeeperConfig != "undefined" && gatekeeperConfig['communities-show-hidden-in-navigator'] )
    	  is_communities_show_hidden_in_navigator=true;

      //gatekeeper: communities-new-widget-layouts
      var is_communities_new_widget_layouts = false;
      if( typeof gatekeeperConfig != "undefined" && gatekeeperConfig['communities-new-widget-layouts'] )
   	     is_communities_new_widget_layouts=true;

      // A temperal exposure, please do not rely on it
      wpCRE._freeLayout = _freeLayout;

      var _xmlManager = (function() {
         // TODO: refactor urlPath generator
         var _contextRoot = {
            addWidget : '/addWidget.do?',
            removeWidget : '/removeWidget.do?',
            moveWidget : '/moveWidget.do?',
            changeLayout : '/changeLayout.do?',
            savePreference : '/saveWidgetPreferences.do?'
         };

         var _isFormatJSON = (function() {
            if (has('json-widget-metadata')) {
               return true;
            } else {
               return false;
            }
         })();
         var _format = (_isFormatJSON ? 'json' : 'xml');

         var _getUrlPath = function(action, params) {
            params = params || {};
            params.resourceId = win.WidgetPlacementConfig.resourceId;
            params.format = _format;

            var path = win.WidgetPlacementConfig.applicationContext
                     + _contextRoot[action]
                     + ioQuery.objectToQuery(params);
            return path;
         };

         var _parseResponseData = (function() {
            if (_isFormatJSON) {
               return function(object) {
                  return object;
               };
            } else {
               return function(doc) {
                  if (!doc) {
                     return null;
                  }

                  var result = {};
                  try {
                     array.forEach(doc.childNodes[0].attributes, function(attr) {
                        result[attr.name] = attr.value;
                     });
                  } catch (e) {
                     logger.debug("Malformed response data.", e);
                     return null;
                  }
                  return result;
               };
            }
         })();

         var _addWidget = function(defId, uiLocation, unhide, instanceId) {
            // FIXME: remove the temporary solution
            if (lang.isArray(defId)) defId = defId[0];
            if (lang.isArray(uiLocation)) uiLocation = uiLocation[0];
            if (lang.isArray(unhide)) unhide = ('true' === unhide[0]);
            if (lang.isArray(instanceId)) instanceId = instanceId[0];

            var promise = new Deferred();

				var addedWidgetId = defId;
            var params = {
                  widgetDefId : defId,
                  uiLocation : uiLocation
                };
            if (unhide) {
               params.unhide = unhide;
               if (instanceId) {
                  params.instanceId = instanceId;
                  addedWidgetId = instanceId;
               }
            }
            var dataUrl = _getUrlPath('addWidget', params);

            request(dataUrl, {
               method : 'POST',
               handleAs : _format
            }).then(function(resp) {
               wpCRE.addWidgetInProgress = false;
               win.WidgetPlacementConfig.lastMod = new Date().getTime();

               var response = _parseResponseData(resp);
               var widgetInstanceId = response.widgetInstanceId;

               wpCRE.utils.withLayoutInfo(true).then(lang.hitch(this, function() {
                  var widgetInstance = wpCRE.utils.getWidgetInstance(widgetInstanceId);
                  if (!widgetInstance) {
                     widgetInstance = {
                           instanceId : widgetInstanceId,
                           defIdRef : defId,
                           uiLocation : uiLocation
                     };
                     wpCRE.utils.addWidgetInstance(widgetInstance, null, null, unhide);
                  }

 			      //EVT Publish the widget added event
                  promise.resolve(widgetInstanceId);
                  topic.publish(events.WIDGET_ADDED_EVENT, addedWidgetId);
               }));
            }, function(err) {
               var error = _parseResponseData(err.response.data);
               promise.reject(error);
               wpCRE.customAddWidgetErrorHandler(error);
            });

            return promise;
         };

         var _removeWidget = function(instanceId, removeWidgetData) {
            var promise = new Deferred();

            if (!wpCRE.removeWidgetInProgress) {
               wpCRE.removeWidgetInProgress = true;

               var params = {
                     widgetInstanceId : instanceId,
                     removeWidgetData : removeWidgetData
                   };
               var dataUrl = _getUrlPath('removeWidget', params);

               request(dataUrl, {
                  method : 'POST',
                  handleAs : _format,
                  headers : {
                     'X-Update-Nonce' : win.dangerousurlnonce
                  }
               }).then(function(resp) {
                  var hide = !removeWidgetData;
                  wpCRE.utils.removeWidgetInstance(instanceId, null, null, hide);
                  wpCRE.removeWidgetInProgress = false;
                  promise.resolve();

                  //EVT Publish the widget removed event
				  topic.publish(events.WIDGET_REMOVED_EVENT, instanceId);

               }, function(err) {
                  wpCRE.removeWidgetInProgress = false;
                  var error = _parseResponseData(err.response.data);
                  promise.reject(error);
                  wpCRE.customAddWidgetErrorHandler(error);
               });
            } else {
               wpCRE.removeWidgetInProgress = false;
               promise.reject();
            }

            return promise;
         };

         var _moveWidget = function(instanceId, newUILocation, previousWidgetId) {
            var promise = new Deferred();

            var params = {
                  widgetInstanceId : instanceId,
                  newUiLocation : newUILocation
                };
            if (previousWidgetId) {
               params.afterWidgetInstanceId = previousWidgetId;
            }
            var dataUrl = _getUrlPath('moveWidget', params);

            request(dataUrl, {
               method : 'POST',
               handleAs : _format
            }).then(function(resp) {
               win.WidgetPlacementConfig.lastMod = new Date().getTime();
               promise.resolve();
            }, errorhandling.DefaultXHRErrorHandler);
            return promise;
         };

         var _changeLayout = function(newLayoutId) {
            var promise = new Deferred();

            var params = {
                  layout : newLayoutId
                };
            var dataUrl = _getUrlPath('changeLayout', params);

            request(dataUrl, {
               method : 'POST',
               handleAs : _format
            }).then(function(resp) {
               win.WidgetPlacementConfig.lastMod = new Date().getTime();
               promise.resolve();
            }, errorhandling.DefaultXHRErrorHandler);
            return promise;
         };

         var _savePreference = function(instanceId, change, update) {
            var promise = new Deferred();
            if(win.getUserProfileOverrideProperty('canPersonalize') && win.getUserProfileOverrideProperty('canPersonalize') === 'false') {
    		   logger.error('User does not have personalize role to save.' );
    		   var validationError = new Error('User does not have personalize role to save.');
     		   promise.reject(validationError);
    		   errorhandling.DefaultErrorHandler('lconn.core.WidgetPlacementCRE._savePreference', validationError);
    		   return promise;
    	    }
            var params = {
                  widgetInstanceId : instanceId
                };
            if (update) {
               params.update = true;
            }
            var dataUrl = _getUrlPath('savePreference', params);

            var xmlContent = '';
            for (name in change) {
               xmlContent += (name + '=_=' + change[name] + ',_,');
            }

            request(dataUrl, {
               method : 'PUT',
               headers : {
                  'X-Update-Nonce' : win.dangerousurlnonce
               },
               data : xmlContent,
               sync : true
            }).then(
               function (resp) {
                  wpCRE.utils.resetLayoutInfo();
                  win.WidgetPlacementConfig.lastMod = new Date().getTime() + 'saveAttributes';
                  promise.resolve(change);
               },
               function (err) {
                  promise.reject(err);
               }
            );
            return promise;
         };

         var exports = {
            addWidget : _addWidget,
            removeWidget : _removeWidget,
            moveWidget : _moveWidget,
            changeLayout : _changeLayout,
            savePreference : _savePreference
         };
         return exports;
      })();

      // keeps a list of all the widget-containers avaiable.
      // format: [containerDOMId, (true | false)]
      wpCRE.uiLocations = {};
      wpCRE.dropZoneObjects = {};

      /** common private functions */
      var _withIRuntime = function() {
         if (!_creInited) {
            iContainer.init();
         }

         var promise = iContainer.getIRuntime();
         promise.then(function() {
            _creInited = true;
         });

         if (!promise || 'function' !== typeof promise.then) {
            promise = new Deferred();
            promise.reject('_withIRuntime: failed to get iRuntime.');
         }
         return promise;
      };

      var _getI18nString = function(/* String */template) {
         // IC 120789: if the string contains json, stop processing it
         if (/{[^}]+:[^}]+}/.test(template))
            return template;

         var params = win.WidgetPlacementConfig.params,
             newTemplate = template.replace(/{/g, '${');

         return string.substitute(newTemplate, params, function(v, k) {
            return (v ? v : '{' + k + '}');
         });
      };

      var _parseWidgetTitle = function(/* String */titleObjectStr) {
         if ('string' !== typeof titleObjectStr) {
            logger.debug('_parseWidgetTitle: unable to parse a non-string object, ' + titleObjectStr);
            return '';
         }

         var result = null, title, resourceBundle, prefix, obj;

         try {
            obj = jsonUtil.fromJson(titleObjectStr);
            if (!obj.title || 'string' !== typeof obj.title) {
               logger.debug('_parseWidgetTitle: title is missing, will return an empty string');
               return '';
            }

            title = obj.title;
            prefix = obj.prefix;

            if (prefix) { // e.g.: {'title':'Forums','prefix':'lc_default'}
               // FIXME: remove hack when a final solution for widgetbundles is found
               widgetMessages = widgetMessages || kernel.i18n.getLocalization('lconn.core.config', 'widgetbundles');

               resourceBundle = widgetMessages || {};
               result = resourceBundle[title];
               if ('string' !== typeof result && resourceBundle[prefix]) {
                  result = resourceBundle[prefix][title];
               }

               if ('string' !== typeof result) {
                  result = title;
               }
            } else { // e.g.: {'title':'Forums'}
               result = title;
            }
         }
         catch (e) { // plain text
            result = titleObjectStr;
         }

         logger.debug('_parseWidgetTitle: parsed title is ' + result);
         return HTMLUtil.escapeText(result);
      };

      var _modeSupported = function(/* String */mode, /* XMLNode */widgetDef, /* Boolean,optional */strict) {
         if (!widgetDef)
            return false;
         if ('undefined' === typeof strict)
            strict = true;
         var supportedModes = widgetDef.modes || 'view';
         return ((!mode && !strict) || (mode && supportedModes.indexOf(mode) !== -1));
      };

      var _themeSupported = function(/* String */theme, /* XMLNode */widgetDef) {
         if (!widgetDef)
            return false;
         var supportedThemes = widgetDef.themes;
         return (!supportedThemes || !theme || supportedThemes.indexOf(theme) !== -1);
      };

      var _columnSupported = function(/* String */column, /* XMLNode */widgetDef) {
         if (!column)
            return false;
         if (!wpCRE.uiLocations[column])
            return true;
         return _themeSupported(wpCRE.uiLocations[column].theme, widgetDef);
      };

      var _getWidgetTheme = function(/* String */instanceId) {
         var column = wpCRE.getUILocation(instanceId);
         if (column && wpCRE.uiLocations[column]) {
            return wpCRE.uiLocations[column].theme;
         }
         return null;
      };

      var getDisplayedUserInfo = function() {
         var displayedUserInfo = null;
         if (win.WidgetPlacementConfig.isProfilesEnv) {
            if (profilesData.displayedUser && !profilesData.displayedUser.profileType)
               profilesData.displayedUser.profileType = 'default';
            displayedUserInfo = profilesData.displayedUser;
         }
         return displayedUserInfo;
      };

      var getWidgetConfigAttrs = function(attributesMap, widgetDef, widgetInstance) {
         attributesMap = attributesMap || [];
         if (attributesMap.length > 1)
            return attributesMap;

         var attributes = {}, result = [], itemSets, items, configDatas, attrs, name, value, j;

         // Copy attributes that define search fields
         if (attributesMap.length) {
	         if (attributesMap[0].entryName)
	            attributes[attributesMap[0].entryName] = attributesMap[0].entryValue;

	         if (attributesMap[0].searchKeywords) {
	        	 attributes["searchKeywords"] = attributesMap[0].searchKeywords;
	         }

	         if (attributesMap[0].tagCloudItemValue) {
	        	 attributes["tagCloudItemValue"] = attributesMap[0].tagCloudItemValue;
	         }

	         if (attributesMap[0].person) {
	        	 attributes["person"] = attributesMap[0].person;
	         }
         }

         configData = widgetDef.configData;
         array.forEach(configData, function(config) {
            value = _getI18nString(config['value']);
            attributes[config['key']] = value;
         });

         itemSet = widgetDef.itemSet;
         array.forEach(itemSet, function(item) {
            value = _getI18nString(item['value']);
            attributes[item['name']] = value;
         });

         if (widgetInstance) {
            win.WidgetPlacementConfig.params['widgetInstanceId'] = widgetInstance.instanceId;
            itemSet = widgetInstance.itemSet;
            array.forEach(itemSet, function(item) {
               value = _getI18nString(item['value']);
               attributes[item['name']] = value;
            });
         }

         for (attr in attributes)
            result.push({
               entryName : attr,
               entryValue : attributes[attr]
            });

         return result;
      };

      var _showSidePanels = function() {
         if (wpCRE.loadOrder) {
            for (var i = 0; i < wpCRE.loadOrder.length; i++) {
               var NodeId = wpCRE.loadOrder[i];
               if (NodeId) {
                  // SPR#SUNN87HSRR - display the hidden widget containers when
                  // widgets are added to it
                  if (NodeId.uiLocation == 'col3' && dom.byId('profilePaneRight') != null && domClass.contains('profilePaneRight', 'lotusHidden'))
                     domClass.remove('profilePaneRight', 'lotusHidden');
                  else if (NodeId.uiLocation == 'col1' && dom.byId('profilePaneLeft') != null && domClass.contains('profilePaneLeft', 'lotusHidden'))
                     domClass.remove('profilePaneLeft', 'lotusHidden');
               }
            }
         }
      };

      var _blurOverviewHighlight = function() {
         if (win.WidgetPlacementConfig.navBarOverViewElementId) {
            var navBarItem = dom.byId(win.WidgetPlacementConfig.navBarOverViewElementId);
            if (navBarItem) {
               domClass.remove(navBarItem, 'lotusSelected');
            }
         }
      };

      var _isNavItemSelected = function(defId) {
         var selected = false;
         if (win.WidgetPlacementConfig.NavBarSelectedMenuItem != null) {
            var selectedWidget = win.WidgetPlacementConfig.NavBarSelectedMenuItem;
            var idx = selectedWidget.indexOf('_');
            if (idx > 0) {
               selectedWidget = selectedWidget.substring(0, idx);
            }
            if (selectedWidget === defId) {
               selected = true;
            }
         }
         return selected;
      };

      var _addToNavbar = function(widgetDef, widgetInstance, selected) {
         var navBarLinkText = widgetDef.navBarLinkText;
         var navBarLink = widgetDef.navBarLink;
         wpCRE.addToNavBar(widgetDef, widgetInstance, selected, navBarLink, navBarLinkText);
      };

      var _removeFromNavbar = function(instanceId) {
         var liElementNode = dom.byId(instanceId + '_navItem');
         if (liElementNode)
            liElementNode.parentNode.removeChild(liElementNode);
      };

      var _restoreNavbar = function() {
         var lotusNavBar = getNavBar();
         if (lotusNavBar) {
            try {
               new wpCRE.aria.Toolbar(lotusNavBar.id);
            }
            catch (ee) {
               new Toolbar(lotusNavBar.id);
            }
         }
      };

      // Returns node displaying the widget.
      wpCRE.getWidgetDocAndRenderWidget = function(widgetDefId, widgetDef, widgetInstance, uiLocation, widgetMode, skinType, addToNavBar, addDropZone, attributesMap) {
         var temp = function() {
            if (!loaded()) { // Unable to load widget
               wpCRE.showWidgetErrorInHeadline(messages['errorDefaultMsg'], false);
               // show the message area
               domStyle.set('contentArea', {
                  display : 'inline',
                  visibility : 'visible'
               });
            }
         };

         var loaded = function() {
            widgetDef = widgetDef || wpCRE.utils.getWidgetDef(widgetDefId);
            if (widgetDef == null) {
               logger.warn('Unable to find widget definition for: ' + widgetDefId);
               return null;
            }

            widgetDefId = widgetDefId || widgetDef.defId;
            if (widgetDefId != widgetDef.defId) {
               logger.warn('The widgetDefId and widgetDef refer to different widget definitions: widgetDefId=', widgetDefId, ', widgetDef=', widgetDef);
               return null;
            }

            var widgetInstanceId = null;
            if (widgetInstance == null) {
               widgetInstanceId = widgetDefId;
            } else {
               if (lang.isObject(widgetInstance)) {
                  if (widgetInstance.defIdRef != widgetDefId) {
                     logger.warn('The widget definition and instance fail to match: widgetDef=', widgetDef, ', widgetInstance=', widgetInstance);
                     return null;
                  }

                  widgetInstanceId = widgetInstance.instanceId || widgetDefId;
					} else {
						widgetInstanceId = widgetInstance;
						widgetInstance = wpCRE.utils.getWidgetInstance(widgetInstanceId);
					}
            }

            if (widgetInstance == null) {
               widgetInstance = {
                     uiLocation : uiLocation,
                     defIdRef : widgetDefId,
                     instanceId : widgetInstanceId
               };
            }

            skinType = skinType || widgetDef.skinType;

            var htmlcontent = null;
            var htmlParentNode = null;

            var draggable = ((wpCRE.uiLocations[uiLocation]) ? wpCRE.uiLocations[uiLocation].draggable : false),
                uiLocationElementId = 'widget-container-' + uiLocation,
                uiLocationElement = dom.byId(uiLocationElementId),
                dropZoneDOMId = uiLocation + 'DropZone',
                dropZone = dom.byId(dropZoneDOMId);

            // create drop-zone element if drop zones are supported and a drop
            // zone does not exist for this uiLocation SPR#NZSG8CN6AH
            if (draggable) {
               if (dropZone == null && uiLocationElement) {
                  dropZone = domConstruct.create('div',{
                     id : dropZoneDOMId
                  }, uiLocationElement);
               }
            } else {
               // if no drop zone support, mimic the current uiLocation as the
               // drop-zone. SPR#AVEI8DNT2Z
               dropZone = uiLocationElement;
            }

            htmlParentNode = dropZone;

            var url = widgetDef.url;
            var displayedUserInfo = getDisplayedUserInfo();
            attributesMap = getWidgetConfigAttrs(attributesMap, widgetDef, widgetInstance);
            var widgetName = wpCRE.utils.getEscapedWidgetName(widgetDef, widgetInstance, false, widgetMode || 'view');
            var widgetMetadata = createWidgetMetadata(widgetInstanceId, url, displayedUserInfo, attributesMap, widgetMode, widgetName);

            var widgetHandle = null;
            if (widgetMode === 'fullpage') {
               htmlParentNode.innerHTML += addiWidgetMicroformat(widgetInstanceId);
               widgetHandle = iContainer.loadWidget(widgetMetadata);
               widgetHandle.getWidgetInfo().then(function(widgetRef) {
                  // nothing to do
               }, function(error) {
                  _showWidgetLoadError(widgetInstanceId, error.message);
               });
            } else {
               if (false !== addToNavBar) {
                  var selected = _isNavItemSelected(widgetDefId);
                  if (selected) {
                     _blurOverviewHighlight();
                  }
                  _addToNavbar(widgetDef, widgetInstance, selected);
               }

               var newParentNode = domConstruct.create('div');
               var htmlContent = getCompleteWidgetHTMLContent(widgetDef,
                  widgetInstance,
                  displayedUserInfo,
                  null,
                  true,
                  draggable,
                  skinType,
                  widgetMode);

               newParentNode.innerHTML = htmlContent;
               if (htmlParentNode) {
                  htmlParentNode.appendChild(newParentNode.firstChild);
               }

               if (!dropZone) {
                  // cannot find the drop zone, skip rendering widget, return as
                  // if the widget is loaded
                  return widgetDef;
               }

               if (false !== addDropZone) {
                  if (wpCRE.dropZoneObjects[dropZoneDOMId] == null)
                     // create the dropzone object
                     utilities.processUntilElementIsFound(dropZoneDOMId, parseDojoWidgetsAndRegisterNewDNDDropZone, null, {
                        uiLocation : uiLocation,
                        dropZoneDOMId : dropZoneDOMId
                     });
                  else
                     // use exising dropzone object
                     utilities.processUntilElementIsFound(widgetInstanceId + 'Section', parseDojoWidgetsAndAddDNDItem, null, {
                        dropZoneDOMId : dropZoneDOMId,
                        widgetInstanceId : widgetInstanceId
                     });
               }
               var supported = _columnSupported(uiLocation, widgetDef);
               if (supported) {
                  widgetHandle = iContainer.loadWidget(widgetMetadata);
                  widgetHandle.getWidgetInfo().then(function(widgetRef) {
                     // nothing to do
                  }, function(error) {
                     _showWidgetLoadError(widgetInstanceId, error.message);
                  });
               } else {
                  _showMisplacedWarning(widgetInstanceId);
               }
               utilities.processUntilElementIsFound(widgetInstanceId + 'Section', function() {
                  parser.parse(dom.byId(widgetInstanceId + 'Section'));
               }, null, null, false);
            }

            return widgetDef;
         };

         wpCRE.utils.withLayoutInfo().then(temp);
      };

      var parseDojoWidgetsAndRegisterNewDNDDropZone = function(dropZoneDOMNode, parameters) {
         parser.parse(dropZoneDOMNode);
         var dropZoneObject = createDropZoneObject(parameters.uiLocation, dropZoneDOMNode);
         wpCRE.dropZoneObjects[parameters.dropZoneDOMId] = dropZoneObject;
      };

      var parseDojoWidgetsAndAddDNDItem = function(widgetSectionDOMNode, parameters) {
         parser.parse(widgetSectionDOMNode);
         var dropZoneObject = wpCRE.dropZoneObjects[parameters.dropZoneDOMId];
         dropZoneObject.setItem(widgetSectionDOMNode.id, {
            node : widgetSectionDOMNode,
            id : widgetSectionDOMNode.id,
            data : parameters.widgetInstanceId,
            type : [ 'widget'
            ]
         });
      };

      var WpSource = declare('lconn.core.WidgetPlacement.dnd.Source', Source, {

         _emptyIndicator : null,

         _showEmptyIndicator : function(/* Boolean */doShowAnyway, /* Boolean */isDragSource) {
            if (_limitedDND)
               return;
            if ('undefined' === typeof doShowAnyway)
               doShowAnyway = false;
            if ('undefined' === typeof isDragSource)
               isDragSource = false;

            if (!this._emptyIndicator) {
               var message = coreMessages['rs_empty_column_placeholder'];
               this._emptyIndicator = domConstruct.create('div', {
                  'class' : 'lotusWidget2 lotusEmptyColWarn',
                  innerHTML : message,
                  style : 'display: none;'
               }, this.node);
            }

            var nodes = this.getAllNodes(true);
            var isColumnEmpty = (0 === nodes.length) || (isDragSource && 1 === nodes.length);
            if (doShowAnyway || isColumnEmpty) {
               var isEmptyIndicatorHide = ('none' === domStyle.get(this._emptyIndicator, 'display'));
               if (isEmptyIndicatorHide) {
                  domStyle.set(this._emptyIndicator, 'display', 'block');
               }
            }
         },

         _hideEmptyIndicator : function(/* Boolean */doHideAnyway) {
            if (_limitedDND || !this._emptyIndicator)
               return;
            if ('undefined' === typeof doHideAnyway)
               doHideAnyway = true;

            var nodes = this.getAllNodes(true);
            var isColumnEmpty = (0 === nodes.length);
            if (doHideAnyway || !isColumnEmpty) {
               var isEmptyIndicatorShow = ('block' === domStyle.get(this._emptyIndicator, 'display'));
               if (isEmptyIndicatorShow) {
                  domStyle.set(this._emptyIndicator, 'display', 'none');
               }
            }
         },

         constructor : function() {
            this._showEmptyIndicator();
         },

         onDndStart : function(/* Source */source, /* DOM Node array */nodes, /* Boolean */copy) {
            if (!source.isInstanceOf(WpSource)) {
               return;
            }

            WpSource.superclass.onDndStart.apply(this, arguments);
            if (source == this) {
               this._showEmptyIndicator(false, true);
            } else {
               this._showEmptyIndicator();
            }
         },

         onDndCancel : function() {
            if (wpCRE.currentFullpageWidgetInstanceId) {
               return;
            }

            WpSource.superclass.onDndCancel.apply(this, arguments);
            var that = this;
            win.setTimeout(function() {
               that._hideEmptyIndicator(false);
            }, 0);
         },

         onDndDrop : function(/* Source */source, /* DOM Node array */nodes, /* Boolean */copy) {
            if (!source.isInstanceOf(WpSource)) {
               return;
            }

            WpSource.superclass.onDndDrop.apply(this, arguments);
            if (source == this) {
               var that = this;
               win.setTimeout(function() {
                  that._showEmptyIndicator();
               }, 0);
            }
         },

         onMouseOver : function(/* Event */e) {
            WpSource.superclass.onMouseOver.apply(this, arguments);
            if (this.isDragging) {
               this._hideEmptyIndicator();
            }
         },

         onMouseOut : function(/* Event */e) {
            WpSource.superclass.onMouseOut.apply(this, arguments);
            if (this.isDragging) {
               this._showEmptyIndicator(false, true);
            }
         },

         showEmptyIndicator : function(/* Boolean */doShowAnyway) {
            this._showEmptyIndicator(doShowAnyway);
         },

         hideEmptyIndicator : function(/* Boolean */doHideAnyway) {
            this._hideEmptyIndicator(doHideAnyway);
         },

         getAllNodes : function(/* Boolean */includeFixedNodes) {
            if (includeFixedNodes) {
               return wpCRE.getColumnWidgetNodes(this.parent, this.allowNested);
            } else {
               return WpSource.superclass.getAllNodes.apply(this, arguments);
            }
         }
      });

      var createDropZoneObject = function(uiLocation, dropZoneDOMNode) {
         var accept = ((_limitedDND) ? [] : ['widget']);
         var params = {
            jsId : uiLocation,
            accept : accept,
            withhandles : true,
            skipForm : true
         };
         var dropZoneObject = new WpSource(dropZoneDOMNode, params);
         return dropZoneObject;
      };

      var addiWidgetMicroformat = function(widgetInstanceId) {
         var htmlContent = '<div id="' + widgetInstanceId + '"></div>';
         return htmlContent;
      };

      var createWidgetMetadata = function(widgetInstanceId, url, displayedUserInfo, attributesMap, widgetMode, computedWidgetTitle) {
         var items = [], itemSet = [], thePlacement = widgetInstanceId;

         url = _getI18nString(url);

         if (widgetMode) {
            var modeItem = [];
            modeItem.push({
               'id' : 'mode',
               'value' : widgetMode
            });
            itemSet.push({
               'id' : 'idescriptor',
               'item' : modeItem
            });
         }

         if (win.WidgetPlacementConfig.isProfilesEnv) {
            if (displayedUserInfo.uid != null)
               items.push({
                  'id' : 'profileDisplayedUserUID',
                  'value' : displayedUserInfo.uid
               });
            if (displayedUserInfo.key != null)
               items.push({
                  'id' : 'profileDisplayedUserKey',
                  'value' : displayedUserInfo.key
               });
         }
         if (win.WidgetPlacementConfig.resourceId != null)
            items.push({
               'id' : 'resourceId',
               'value' : win.WidgetPlacementConfig.resourceId
            });
         if (win.WidgetPlacementConfig.parentResourceId != null)
            items.push({
               'id' : 'parentResourceId',
               'value' : win.WidgetPlacementConfig.parentResourceId
            });
         if (win.WidgetPlacementConfig.resourceType != null)
            items.push({
               'id' : 'resourceType',
               'value' : win.WidgetPlacementConfig.resourceType
            });
         if (win.WidgetPlacementConfig.resourceName != null)
             items.push({
                'id' : 'resourceName',
                'value' : win.WidgetPlacementConfig.resourceName
             });
         if (win.WidgetPlacementConfig.resourceOrgId != null)
             items.push({
                'id' : 'resourceOrgId',
                'value' : win.WidgetPlacementConfig.resourceOrgId
             });
         if (computedWidgetTitle)
            items.push({
               'id' : 'computedWidgetTitle',
               'value' : computedWidgetTitle
            });

         for (var i = 0; attributesMap && i < attributesMap.length; i++)
            items.push({
               'id' : attributesMap[i].entryName,
               'value' : attributesMap[i].entryValue
            });

         itemSet.push({
            'id' : 'attributes',
            'mode' : 'edit',
            // due to the persistentce service limitation, communities only
            // support edit mode settings
            'item' : items
         });

         var instanceData = {
            'itemSet' : itemSet,
            'renderType' : 'default'
         };

         var obj = {
            definitionUrl : url,
            componentType : 'iWidget',
            placement : thePlacement,
            instanceData : instanceData
         };

         if (widgetInstanceId) {
            obj.id = widgetInstanceId;
         }
         return obj;
      };

      var getNavBar = function() {
         var lotusNavBar = dom.byId('lotusProfileNavBar') || dom.byId('lotusNavBar');
         return lotusNavBar;
      };

      wpCRE.destroyWidget = function(widgetInstanceId, uiLocation, destroyDropDownMenu, destroySubArea, deleteDNDItem) {
         var temp333 = registry.byId(widgetInstanceId + 'moreActions');
         if (temp333 && destroyDropDownMenu)
            temp333.destroy();

         var temp3344 = registry.byId(widgetInstanceId + '_toggleAction');
         if (temp3344 && destroyDropDownMenu)
            temp3344.destroy();

         uiLocation = uiLocation || wpCRE.getUILocation(widgetInstanceId);
         if (deleteDNDItem !== false) {
            var dropZone = wpCRE.dropZoneObjects[uiLocation + 'DropZone'];
            if (dropZone) {
               dropZone.delItem(widgetInstanceId + 'Section');
            }
         }

         _withIRuntime().then(lang.hitch(this, function(iRuntime) {
            var widgetId = iRuntime.getWidgetIdByDomId(widgetInstanceId);
            if (widgetId) { // unload only if the widget is there
               var widgetIds = [widgetId];
               iContainer.unloadWidgets(widgetIds);
            }
         }));

         var widgetDomSubAreaElm = null;
         if (destroySubArea)
            widgetDomSubAreaElm = dom.byId(widgetInstanceId + 'SubArea');
         if (widgetDomSubAreaElm)
            widgetDomSubAreaElm.innerHTML = '';
      };

      wpCRE.closeFullPageWidgetIfOpen = function() {
         if (wpCRE.currentFullpageWidgetInstanceId) {
            wpCRE.destroyWidget(wpCRE.currentFullpageWidgetInstanceId, null, false, true, false);
            wpCRE.currentFullpageWidgetInstanceId = null;
         }
      };

      wpCRE.closeSwitchView = function() {
         if (wpCRE.currentFullpageWidgetInstanceId)
            wpCRE.destroyWidget(wpCRE.currentFullpageWidgetInstanceId, null, false, false, false);
         utilities.hide('widget-container-fullpage', false, true);
         wpCRE.destroyWidgetContainer('fullpage');
         wpCRE.isInWidgetFullpageMode = true;
      };

      // For a node being inserted into nav bar - find child node after which it
      // should be inserted.
      // This insertion node will be the last item in the nav bar with the same
      // column number.
      wpCRE.getInsertionPoint = function(lotusNavBar, li) {
         var liLocation = li.getAttribute('uiLocation');
         if (liLocation === 'col2') {
            // Get all col2 widgets, find last one to insert after.
            var navBarWidgets = query('li[uilocation="col2"]', lotusNavBar);
            if (navBarWidgets && navBarWidgets.length) {
               return navBarWidgets[navBarWidgets.length - 1];
            } else {
               return lotusNavBar.children[lotusNavBar.children.length - 1];
            }
         } else { // Not "col2". Add to end of nav bar.
            return lotusNavBar.children[lotusNavBar.children.length - 1];
         }
      };

      var _getMinimizedWidgets = function() {
         var cookieStr = cookie('minimized-widgets');
         if (cookieStr) {
            return cookieStr.split(';');
         } else {
            return [];
         }
      };

      var _setMinimizedWidgets = function(widgetIds) {
         if (widgetIds && lang.isArray(widgetIds)) {
            var cookieStr = widgetIds.join(';');
            cookie('minimized-widgets', cookieStr);
         }
      };

      var _isMinimized = function(widgetInstance) {
         var widgetId = widgetInstance;
         if (widgetInstance && lang.isObject(widgetInstance)) {
            widgetId = widgetInstance.instanceId || widgetInstance.defIdRef;
         }

         var minWidgets = _getMinimizedWidgets();
         if (minWidgets && widgetId) {
            return (minWidgets.indexOf(widgetId) >= 0);
         } else {
            return false;
         }
      };

      var _setMinimized = function(widgetInstance, minimized) {
         var widgetId = widgetInstance;
         if (widgetInstance && lang.isObject(widgetInstance)) {
            widgetId = widgetInstance.instanceId || widgetInstance.defIdRef;
         }

         var minWidgets = _getMinimizedWidgets();
         if (minWidgets && widgetId) {
            var index = minWidgets.indexOf(widgetId);
            if (index >= 0 && !minimized) {
               minWidgets.splice(index, 1);
            } else if (index < 0 && minimized) {
               minWidgets.push(widgetId);
            }
            _setMinimizedWidgets(minWidgets);
         }
      };

      var getCompleteWidgetHTMLContent = function(widgetDef, widgetInstance, displayedUserInfo, widgetData, canPersonalize, draggable, skinType, widgetMode) {
         if (typeof widgetDef === 'undefined')
            return '';

         // get attributes from definition node
         var url = widgetDef.url;
         var widgetInstanceId = widgetInstance.instanceId;
         var widgetInstanceHide = widgetInstance.hidden;
         var widgetDefId = widgetDef.defId;
         var helpLink = widgetDef.helpLink;
         var fixedPosition = widgetDef.fixedPosition;
         var isDisplayLoginRequired = widgetDef.displayLoginRequired;
         var isShowFullWidgetDeleteConfirmation = widgetDef.showFullWidgetDeleteConfirmation;
         var removeOrDeleteLabel = (isShowFullWidgetDeleteConfirmation === 'false'
             || widgetDefId == "FeaturedSurvey" || widgetDefId == "LinkedQuickrCommunityLib")
             ? messages['link.remove'] : messages['delete'];
         var substitutedHelpLink = ((helpLink) ? _getI18nString(helpLink) : null);
         var isOptionalWidget = false;
         var additionalHTML = '';

         if (widgetInstanceId)
            isOptionalWidget = true;

         if (widgetInstanceId == null)
            widgetInstanceId = widgetDefId;
         var webInstanceId = widgetInstanceId;
         if (widgetMode === 'edit') {
            webInstanceId += 'edit';
         }

         var isWidgetNeedRefresh = win.WidgetPlacementConfig.userLoggedIn || isDisplayLoginRequired !== 'true';
         var widgetName = wpCRE.utils.getEscapedWidgetName(widgetDef, widgetInstance, true, widgetMode || 'view');
         var isMinimized = _isMinimized(widgetInstance);

         if (!skinType) {
            skinType = 'use25OneUISkin';
         }

         var htmlContent = null;
         if (skinType === 'use25OneUISkin') {
            var widgetStateString = ((!isMinimized) ? 'Close' : 'Open');

            var dndContent = '';
            var cursor = '';
            if (canPersonalize && draggable && isOptionalWidget) {
               dndContent = ' dojoDndItem" dndType="widget" skipForm="true" dndData="' + widgetInstanceId;
               cursor = 'style="cursor: move" ';
            }

            var hiddenClass = ((widgetInstanceHide == 'true') ? ' lotusHidden ' : '');

            htmlContent = '<div id="' + webInstanceId + 'Section" class="lotusWidget2' + hiddenClass + dndContent + '" widgetId="' + widgetInstanceId
                  + '" role="region" aria-labelledby="' + widgetInstanceId + 'Id" >';

            var actionsAlt = messages['actions_alt'] || 'Actions for: ${0}';
            actionsAlt = string.substitute(actionsAlt, [ widgetName ]);

            htmlContent += '<h2 style="cursor: default" class="widgetTitle">';

            if ((typeof window.ICS_UI_ISCNX8UXENABLED !== 'undefined') && window.ICS_UI_ISCNX8UXENABLED && widgetDef.defId === 'sand_DYK') {
                    var imageSrc = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' focusable='false' viewBox='0 0 32 32' aria-hidden='true' role='presentation' data-mui-test='overflow-menu--verticalIcon' height='21' width='21' fill='%233D5466'%3E%3Ccircle cx='16' cy='6' r='2'%3E%3C/circle%3E%3Ccircle cx='16' cy='16' r='2'%3E%3C/circle%3E%3Ccircle cx='16' cy='26' r='2'%3E%3C/circle%3E%3C/svg%3E";
                    htmlContent += '<a id="widgetActionsMenu' + widgetInstanceId +
                        '" class="lotusIcon" href="javascript:void(0);" onclick="lconn.core.WidgetPlacement.openMenu(event, \'' +
                        widgetInstanceId + '\',\'widgetActionsMenu' + widgetInstanceId +
                        '\');" onkeydown="if(event.keyCode==40) lconn.core.WidgetPlacement.openMenu(event, \'' + widgetInstanceId + '\',\'widgetActionsMenu' +
                        widgetInstanceId + '\');" title="' + actionsAlt + '" role="button" aria-haspopup="true" aria-label="' + actionsAlt + '">' + '<img src="' +
                        imageSrc + '" alt=""/>' + '<span class="lotusAltText">&#9660;</span>' + '</a>';
            } else {
                    htmlContent += '<a id="widgetActionsMenu' + widgetInstanceId +
                        '" class="lotusIcon lotusActionMenu" href="javascript:void(0);" onclick="lconn.core.WidgetPlacement.openMenu(event, \'' +
                        widgetInstanceId + '\',\'widgetActionsMenu' + widgetInstanceId +
                        '\');" onkeydown="if(event.keyCode==40) lconn.core.WidgetPlacement.openMenu(event, \'' + widgetInstanceId + '\',\'widgetActionsMenu' +
                        widgetInstanceId + '\');" title="' + actionsAlt + '" role="button" aria-haspopup="true" aria-label="' + actionsAlt + '">' + '<img src="' +
                        _Widget.prototype._blankGif + '" alt=""/>' + '<span class="lotusAltText">&#9660;</span>' + '</a>';
                }

            htmlContent +='<span class="ibmDndDragHandle" ' + cursor + 'id="' + widgetInstanceId + 'Id">' + widgetName + '</span>' + '</h2>';

            htmlContent += '<div dojoType="dijit.Menu" id="' + webInstanceId + 'moreActions" style="display: none;" aria-label="More Action Menu">';
            if (!isMinimized) {
               htmlContent += '<div id="' + webInstanceId + '_toggleAction" dojoType="dijit.MenuItem" label="' + messages['widgets_Min']
                     + '" onclick="lconn.core.WidgetPlacement.minimizeWidget(this,\'' + widgetInstanceId + '\', \'' + widgetDefId + '\');"></div>';
            } else {
               htmlContent += '<div id="' + webInstanceId + '_toggleAction" dojoType="dijit.MenuItem" label="' + messages['widgets_Max']
                     + '" onclick="lconn.core.WidgetPlacement.minimizeWidget(this,\'' + widgetInstanceId + '\', \'' + widgetDefId + '\');"></div>';
            }

            if (isWidgetNeedRefresh) {
               htmlContent += '<div dojoType="dijit.MenuItem" label="' + messages['refresh'] + '" onclick="lconn.core.WidgetPlacement.fetchAndRefresh(\''
                     + widgetInstanceId + '\');"></div>';
            }

            if (_modeSupported('edit', widgetDef) && canPersonalize)
               htmlContent += '<div class="edit_button" dojoType="dijit.MenuItem" label="' + messages['edit'] + '" onclick="lconn.core.utilities.hide(\''
                     + widgetInstanceId + 'moreActions' + '\', true, true);cre$.iRuntime.getWidgetById(\'' + widgetInstanceId
                     + '\').widgetObject.getIContext().iEvents.fireEvent(\'onModeChanged\', \'\', {\'newMode\':\'edit\'});"></div>';

            if (canPersonalize && 'undefined' !== typeof communityActionData) {
               if (communityActionData.showWidgetTitleEdit && !(widgetDefId == 'RecentUpdates' || widgetDefId == 'StatusUpdates')) {
                  // Add action to edit title
                  var editTitle = '<div dojoType="dijit.MenuItem" label="' + messages['changeTitleAction']
                        + '" onclick="lconn.core.WidgetPlacement.changeTitle(\'' + widgetInstanceId + '\');"></div>';
                  htmlContent += editTitle;
               }
            }

            if (_modeSupported('view', widgetDef) && canPersonalize)
               htmlContent += '<div style="display:none;" class="view_button" dojoType="dijit.MenuItem" label="' + messages['view']
                     + '" onclick="lconn.core.utilities.hide(\'' + widgetInstanceId + 'moreActions' + '\', true, true);cre$.iRuntime.getWidgetById(\''
                     + widgetInstanceId + '\').widgetObject.getIContext().iEvents.fireEvent(\'onModeChanged\', \'\', {\'newMode\':\'view\'});"></div>';

            if (substitutedHelpLink)
               htmlContent += '<div dojoType="dijit.MenuItem" label="' + messages['help'] + '" onclick="lconn.core.utilities.hide(\'' + widgetInstanceId
                     + 'moreActions' + '\', true, true);lconn.core.WidgetPlacement.openHelpWindow(\'' + substitutedHelpLink + '\');"></div>';
            if (isOptionalWidget && canPersonalize) {
               var uiLocation = widgetInstance.uiLocation;
               if (!fixedPosition) {
                  htmlContent += '<div class="moveup_button" dojoType="dijit.MenuItem" label="' + messages['widgets_MoveUp']
                        + '" onclick="lconn.core.WidgetPlacement.moveUp(\'' + widgetInstanceId + '\',\'' + uiLocation + '\');"></div>';
                  htmlContent += '<div class="movedown_button" dojoType="dijit.MenuItem" label="' + messages['widgets_MoveDown']
                        + '" onclick="lconn.core.WidgetPlacement.moveDown(\'' + widgetInstanceId + '\',\'' + uiLocation + '\');"></div>';
                  htmlContent += '<div class="moveprev_button" dojoType="dijit.MenuItem" label="' + messages['widgets_MovePrev']
                        + '" onclick="lconn.core.WidgetPlacement.moveToPreviousColumn(\'' + widgetInstanceId + '\',\'' + uiLocation + '\');"></div>';
                  htmlContent += '<div class="movenext_button" dojoType="dijit.MenuItem" label="' + messages['widgets_MoveNext']
                        + '" onclick="lconn.core.WidgetPlacement.moveToNextColumn(\'' + widgetInstanceId + '\',\'' + uiLocation + '\');"></div>';
               }
               if(widgetDefId !== 'StatusUpdates'){
            	   htmlContent += '<div dojoType="dijit.MenuItem" label="' + messages['hide'] + '" onclick="lconn.core.WidgetPlacement.removeWidget(\''
                   + widgetInstanceId + '\', false);"></div>';
               }

               htmlContent += '<div dojoType="dijit.MenuItem" label="' + removeOrDeleteLabel + '" onclick="lconn.core.WidgetPlacement.removeWidget(\''
                       + widgetInstanceId + '\', true);"></div>';
            }
            htmlContent += '</div>';

            if (!isMinimized) {
               if (!win.WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired === 'true') {
                  htmlContent += '<div id="' + webInstanceId + 'SubArea" style="-webkit-user-select: text;" widgetloaded="false" widgetneedrefresh="false">' + messages['msg.loginRequired'];
               } else {
                  // style='padding: 5px; margin-top: 15px'
                  htmlContent += '<div id="' + webInstanceId + 'SubArea" style="-webkit-user-select: text;" widgetloaded="true" widgetneedrefresh="false">';
                  htmlContent += addiWidgetMicroformat(widgetInstanceId);
               }
            } else {
               // padding: 5px; margin-top: 15px;
               htmlContent += '<div id="' + webInstanceId + 'SubArea" style="display: none; -webkit-user-select: text;" widgetloaded="false"';
               if (!win.WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired === 'true') {
                  htmlContent += ' widgetneedrefresh="false" >' + messages['msg.loginRequired'];
               } else {
                  htmlContent += ' widgetneedrefresh="true" >';
               }
            }

            htmlContent += '</div>'; // end subArea
            htmlContent += '</div>'; // end section;
         } else if (skinType === 'skinless') {
            // style='min-width: 160px;'
            htmlContent = '<div id="' + webInstanceId + 'Section">';

            if (!win.WidgetPlacementConfig.userLoggedIn && isDisplayLoginRequired == 'true') {
               htmlContent += '<div id="' + webInstanceId + 'SubArea" widgetloaded="false" >';
               htmlContent += messages['msg.loginRequired'];
            } else {
               htmlContent += '<div id="' + webInstanceId + 'SubArea" widgetloaded="true" >';
               htmlContent += addiWidgetMicroformat(widgetInstanceId);
            }

            htmlContent += '</div>'; // end subArea
            htmlContent += '</div>'; // end section;
         }
         return htmlContent;
      };

      var destroyWidgetWrapper = function(instanceId) {
         var htmlElement = dom.byId(instanceId + 'Section');
         if (htmlElement)
            htmlElement.parentNode.removeChild(htmlElement);
      };

      wpCRE.openHelpWindow = function(url) {
         // Strip off lang parameter as launchHelp will add one
         var langPos = url.indexOf('&lang');
         if (langPos > 0) {
            url = url.substr(0, langPos);
         }
         help.launchHelp(url);
      };

      wpCRE.checkWidgetLocation = function(widgetInstanceId, uiLocation) {
         var dropZoneNode = dom.byId(uiLocation + 'DropZone'), childNodes, currentIndex, currentWidgetId;

         if (dropZoneNode) {
            childNodes = dropZoneNode.childNodes;
            childNodes = array.filter(childNodes, function(node) {
               // filter out the empty column placeholder
               return node && !!node.getAttribute('widgetid');
            });

            if (childNodes.length === 1)
               return 'alone';
            for (currentIndex = 0; currentIndex < childNodes.length; currentIndex++) {
               currentWidgetId = childNodes[currentIndex].getAttribute('widgetid');
               if (currentWidgetId === widgetInstanceId) {
                  if (currentIndex === 0)
                     return 'top';
                  else if (currentIndex >= childNodes.length - 1)
                     return 'bottom';
                  else
                     return 'middle';
               }
            }
         }
      };

      wpCRE.getUILocation = function(widgetInstanceId) {
         var loadOrders = wpCRE.loadOrder, i;
         for (i = 0; loadOrders && i < loadOrders.length; i++) {
            if (loadOrders[i] && loadOrders[i].instanceId === widgetInstanceId) {
               return loadOrders[i].uiLocation;
            }
         }
         return '';
      };

      wpCRE.updateMoreActions = function(widgetInstanceId) {

         var widgetsMoreActionID = widgetInstanceId + 'moreActions';
         var uiLocation = wpCRE.getUILocation(widgetInstanceId);
         if (uiLocation) {
            var widgetLocation = wpCRE.checkWidgetLocation(widgetInstanceId, uiLocation);
            if (widgetLocation) {

               // update move up and move down button
               var moveup = query('#' + widgetsMoreActionID + '>tbody>tr.moveup_button'),
                   movedown = query('#' + widgetsMoreActionID + '>tbody>tr.movedown_button');

               if (moveup && moveup.length && movedown && movedown.length) {

                  // IC 141118: Update move up/down according to current
                  // UILocation
                  var dijitMoveup = registry.byNode(moveup[0]),
                      dijitMovedown = registry.byNode(movedown[0]);

                  dijitMoveup.onClick = function() {
                     wpCRE.moveUp(widgetInstanceId, uiLocation);
                  };
                  dijitMovedown.onClick = function() {
                     wpCRE.moveDown(widgetInstanceId, uiLocation);
                  };

                  switch (widgetLocation) {
                     case 'alone':
                        moveup.style('display', 'none');
                        movedown.style('display', 'none');
                        break;
                     case 'top':
                        moveup.style('display', 'none');
                        movedown.removeAttr('style');
                        movedown.style('-moz-user-select', 'none');
                        break;
                     case 'bottom':
                        moveup.removeAttr('style');
                        moveup.style('-moz-user-select', 'none');
                        movedown.style('display', 'none');
                        break;
                     case 'middle':
                        movedown.removeAttr('style');
                        movedown.style('-moz-user-select', 'none');
                        moveup.removeAttr('style');
                        moveup.style('-moz-user-select', 'none');
                        break;
                     default:
                        break;
                  }
               }

               // update move up and move down button
               var moveprev = query('#' + widgetsMoreActionID + '>tbody>tr.moveprev_button'),
                   movenext = query('#' + widgetsMoreActionID + '>tbody>tr.movenext_button');

               var nowhereToMove = (!_getSiblingColumn(uiLocation, 0));

               if (moveprev && moveprev.length && movenext && movenext.length) {
                  if (_limitedDND || nowhereToMove) {
                     moveprev.style('display', 'none');
                     movenext.style('display', 'none');
                  } else {
                     var dijitMoveprev = registry.byNode(moveprev[0]),
                         dijitMovenext = registry.byNode(movenext[0]);

                     dijitMoveprev.onClick = function() {
                        wpCRE.moveToPreviousColumn(widgetInstanceId, uiLocation);
                     };
                     dijitMovenext.onClick = function() {
                        wpCRE.moveToNextColumn(widgetInstanceId, uiLocation);
                     };
                  }
               }
            }

            _withIRuntime().then(lang.hitch(this, function(iRuntime) {
               var cre_widget = iRuntime.getWidgetById(widgetInstanceId);
               var edit = query('#' + widgetsMoreActionID + '>tbody>tr.edit_button');
               var view = query('#' + widgetsMoreActionID + '>tbody>tr.view_button');
               if (edit && view && cre_widget) {
                  var mode = cre_widget.widgetObject.getIContext().getiDescriptor().getItemValue('mode');
                  switch (mode) {
                     case 'edit':
                        view.removeAttr('style');
                        edit.style('display', 'none');
                        break;
                     case 'view':
                        edit.removeAttr('style');
                        view.style('display', 'none');
                        break;
                  }
               }
            }));
         }
      };

      wpCRE.openMenu = function(event, widgetId, id) {
         var dojoWidgetId = widgetId + 'moreActions';
         var dojoWidget = registry.byId(dojoWidgetId);
         wpCRE.updateMoreActions(widgetId);
         if (dojoWidget == null) {
            logger.debug('lconn.core.WidgetPlacement.openMenu: dojoWidgetId "' + dojoWidgetId + '" do not have a dojoWidget instance, creating one');
            var dojoWidgetEle = dom.byId(dojoWidgetId);
            parser.parse(dojoWidgetEle.parentNode || dojoWidgetEle);
            dojoWidget = registry.byId(dojoWidgetId);
         }

         if (dojoWidget) {
            if (id) {
               var elem = dom.byId(id);
               if (elem) {
                  domAttr.set(elem, 'aria-expanded', 'true');
                  domAttr.set(elem, 'aria-owns', id + '_dropdown');
                  var onCloseHandler = on(dojoWidget, 'Close', function() {
                     domAttr.set(elem, 'aria-expanded', 'false');
                     domAttr.remove(elem, 'aria-owns');
                     onCloseHandler.remove();
                  });
               }
            }
            menuUtility.openMenu(event, dojoWidgetId);
         } else {
            logger.debug('lconn.core.WidgetPlacement.openMenu: skipping open menu, can not find widget with id "' + dojoWidgetId + '"');
         }
      };

      var loadNavItemsOnly = function(canPersonalize) {
         _restoreNavbar();

         var nodes = wpCRE.utils.getPageWidgetInstances(win.WidgetPlacementConfig.defaultPageId);
         nodes = wpCRE.sortWidgetNodes(nodes);
         if (nodes && nodes.length) {
            for (var i = 0; i < nodes.length; i++) {
               var widgetInstance = nodes[i];
               var enabled = widgetInstance.enabled;
               //updated for 183378
               //to show hidden widget link in community navigation.
               if (enabled == null || enabled != 'false' || is_communities_show_hidden_in_navigator) {
                  var defIdRef = widgetInstance.defIdRef;
                  var widgetDef = wpCRE.utils.getWidgetDef(defIdRef);
                  if (widgetDef == null) {
                     logger.warn('Unable to find widget definition for: ' + defIdRef + ', it will be skipped.');
                     continue;
                  }
               // updated for 183378
               //to show hidden widget link in community navigation.
               var isHiddenWidget = ('false' === enabled);
               var showHidden = false;
               if(isHiddenWidget && is_communities_show_hidden_in_navigator)
               	  showHidden=true;
               if (wpCRE.canAddWidget(widgetDef, win.WidgetPlacementConfig, canPersonalize, widgetInstance, showHidden) ) {
                     var selected = false;
                     if (win.WidgetPlacementConfig.NavBarSelectedMenuItem && win.WidgetPlacementConfig.NavBarSelectedMenuItem === defIdRef) {
                        selected = true;
                     }
                     _addToNavbar(widgetDef, widgetInstance, selected);
                  }
               }
            }
         }
      };

      // ** end of common private functions */
      // Returns widget nodes sorted by column number so that col2 widgets
      // appear first in the node array.
      // Needed because XMl nodes have 'col2' and 'col3' widgets listed in
      // sorted order, it may have 'col2' and 'col3' widgets intermixed.
      wpCRE.sortWidgetNodes = function(nodes) {
         var col2Widgets = [], col3Widgets = [], result = [];

         for (var i = 0; i < nodes.length; i++) {
            var n = nodes[i];
            var uiLoc = n.uiLocation;
            if (uiLoc === 'col2') {
               col2Widgets.push(n);
            }
            else if (uiLoc === 'col3' && n.defIdRef !== 'Members') {
               // Member widget is in column3, but is fixed so put it at the
               // start of the result array.
               col3Widgets.push(n);
            } else {
               result.push(n);
            }
         }

         result = result.concat(col2Widgets, col3Widgets);
         return result;
      };

      wpCRE.placeWidgetMetadata = function(addToNavBarBoolean, baseWidgetMode) {
         wpCRE.initialLoad = true;
         var promise = new Deferred();
         var widgetsMetadata = [];

         /* internal functions */
         var addAllWidgets = function(pageId, displayedUserInfo, data, canPersonalize, addToNavBarBoolean) {
            var htmlContentArray = {};

            try {
               var widgetInstances;
               if (win.WidgetPlacementConfig.isProfilesEnv) {
                  var profileType = (displayedUserInfo && typeof (displayedUserInfo.profileType) == 'string'
                        && lang.trim(displayedUserInfo.profileType).length > 0 ? displayedUserInfo.profileType : 'default');
                  widgetInstances = wpCRE.utils.getPageWidgetInstances(pageId, data, profileType);
                  if (widgetInstances == null || !widgetInstances.length) {
                     // fall back to default layout when there is no layout for
                     // current profile type
                     widgetInstances = wpCRE.utils.getPageWidgetInstances(pageId, data, 'default');
                     logger.debug('No widget layout for profile type [' + profileType + '] defined.  Falling back to default layout.');
                  }
               } else {
                  widgetInstances = wpCRE.utils.getPageWidgetInstances(pageId, data);
                  widgetInstances = wpCRE.sortWidgetNodes(widgetInstances);
               }

               if (widgetInstances && widgetInstances.length) {
                  for (var i = 0; i < widgetInstances.length; i++) {
                     var widgetInstance = widgetInstances[i];
                     var defIdRef = widgetInstance.defIdRef;
                     var widgetDef = wpCRE.utils.getWidgetDef(defIdRef, data);

                     if (widgetDef == null) {
                        logger.warn('Unable to find widget definition for: ' + defIdRef + ', it will be skipped.');
                        continue;
                     }

                     var wCanPersonalize = canPersonalize;
                     if (_isUpdatesPage() && defIdRef !== 'StatusUpdates') {
                        wCanPersonalize = false;
                     }

                     //updated for 183378
                     //to display hidden widget on community edit page
                     var showHidden = false;
                     var isEditPage = false;
                     if('edit' === widgetMode)
                    	 isEditPage=true;
                     if(isEditPage && is_communities_show_hidden_in_navigator)
                    	 showHidden=true;

                     var widgetMode = (defIdRef === "description") ? 'view' : baseWidgetMode;
                     var strict = wpCRE.isCommunitiesPage;
                     var haveMode = _modeSupported(widgetMode, widgetDef, strict),
                         canAddWidget = wpCRE.canAddWidget(widgetDef, win.WidgetPlacementConfig,
                        canPersonalize,
                        widgetInstance,showHidden);

                     if (haveMode && canAddWidget) {
                        var url = widgetDef.url;
                        var skinType = widgetDef.skinType;
                        var uiLocation = widgetInstance.uiLocation;
                        var draggable = ((wpCRE.uiLocations[uiLocation]) ? wpCRE.uiLocations[uiLocation].draggable : false);
                        if (htmlContentArray[uiLocation] == null)
                           htmlContentArray[uiLocation] = '';

                        var instanceId = widgetInstance.instanceId || defIdRef;

                        wpCRE.loadOrder = wpCRE.loadOrder || [];
                        wpCRE.loadOrder.push({
                           instanceId : instanceId,
                           uiLocation : uiLocation
                        });
                        htmlContentArray[uiLocation] += getCompleteWidgetHTMLContent(widgetDef,
                           widgetInstance,
                           displayedUserInfo,
                           data,
                           wCanPersonalize,
                           draggable,
                           skinType);

                        // create widget object
                        var attributesMap = getWidgetConfigAttrs(null, widgetDef, widgetInstance);
                        var widgetName = wpCRE.utils.getEscapedWidgetName(widgetDef, widgetInstance, widgetMode);
                        var widgetMetadata = createWidgetMetadata(instanceId, url, displayedUserInfo, attributesMap, widgetMode, widgetName);
                        widgetsMetadata.push(widgetMetadata);
                     }
                  }
               }

               for (uiLocation in htmlContentArray) {
                  var tempWidgContElem = dom.byId(uiLocation + 'DropZone') || dom.byId('widget-container-' + uiLocation);
                  if (tempWidgContElem) {
                     tempWidgContElem.innerHTML = htmlContentArray[uiLocation];
                  }
               }

               if (widgetInstances && widgetInstances.length) {
                  for (var i = 0; i < widgetInstances.length; i++) {
                     var menuId = 'widgetActionsMenu' + widgetInstances[i].instanceId;
                     var widgetMenu = dom.byId(menuId);
                     if (widgetMenu) {
                        domAttr.set(widgetMenu, 'aria-expanded', 'false');
                     }
                  }
               }

               promise.resolve(widgetsMetadata);
            } catch (exception) {
               promise.reject(exception);
               errorhandling.DefaultErrorHandler('lconn.core.WidgetPlacement.addAllWidgets', exception);
            }
         };

         var loadContentFunction = function() {
            if (win.WidgetPlacementConfig.pageId === 'fullPageWidgetView') {
               try {
                  var widgetContainer = dom.byId('widgetContainer') || dom.byId('widget-container-fullpage');
                  var widgetId = common_getParam('widgetId');
                  var widgetDef = wpCRE.utils.getWidgetDef(widgetId);
                  var url = widgetDef.url;
                  wpCRE.addToNavBar(widgetDef, null, displayedUserInfo, null, null, true, null);

                  var attributesMap = [ {
                     entryName : 'state',
                     entryValue : 'maximize'
                  }];
                  attributesMap = getWidgetConfigAttrs(attributesMap, widgetDef);
                  widgetContainer.innerHTML = addiWidgetMicroformat(widgetId);

                  wpCRE.loadOrder = wpCRE.loadOrder || [];
                  wpCRE.loadOrder.push({
                     instanceId : widgetId,
                     uiLocation : 'fullpage'
                  });

               }
               catch (exception) {
                  errorhandling.DefaultErrorHandler('WidgetMgmt.loadWidgets', exception, 'widgetContainer');
               }
            } else {
               addAllWidgets(win.WidgetPlacementConfig.pageId, displayedUserInfo, null, canPersonalize, addToNavBarBoolean);
            }
         };
         /** end of internal functions */

         var displayedUserInfo = displayedUserInfo || getDisplayedUserInfo(),
             canPersonalize = (win.getUserProfileOverrideProperty('canPersonalize') === 'true');

         var layoutInfoPromise = wpCRE.utils.withLayoutInfo();
         if (addToNavBarBoolean != false) {
            layoutInfoPromise.then(lang.hitch(this, function() {
               loadNavItemsOnly(canPersonalize);
            }));
         }

         if (!win.WidgetPlacementConfig.pageId) {
            promise.resolve(widgetsMetadata);
            return promise;
         }

         // fix for SPR DJOS7UNT5B and SPR JMGE7XESJJ
         if (Source)
            Source.prototype.onSelectStart = function() {};

         _initUiLocations();

         for (uiLocation in wpCRE.uiLocations) {
            var widgetContainer = dom.byId('widget-container-' + uiLocation);
            if (widgetContainer) {
               var params = wpCRE.uiLocations[uiLocation];
               if (canPersonalize && params && params.draggable) {
                  domConstruct.create('div', {
                     id : uiLocation + 'DropZone',
                     'class' : 'target',
                     role : 'presentation'
                  }, widgetContainer);
               } else {
                  domAttr.set(widgetContainer, 'role', 'presentation');
               }
            }
         }

         layoutInfoPromise.then(lang.hitch(this, loadContentFunction));

         var manager = Manager.manager();
         manager.makeAvatar = function() {
            return new Avatar(this);
         };

         topic.subscribe('/dnd/drop', wpCRE.onDropHandler);
         topic.subscribe('/dnd/start', function(source, nodes, iscopy) {
         	if (!source.isInstanceOf(WpSource)) {
         		return;
         	}

         	for (var i = 0; i < nodes.length; i++) {
               utilities.hide(nodes[i], false, true);
               wpCRE.currentNode = nodes[i];
            }
         });
         topic.subscribe('/dnd/cancel', function() {
            if (wpCRE.currentNode) {
               utilities.show(wpCRE.currentNode, false, false, true);
               wpCRE.currentNode = null;
            }
         });

         promise.then(lang.hitch(this, function(widgetsMetadata) {
            var parseArea = dom.byId('lotusFrame');
            if (parseArea == null) {
               var frameDivs = query('.lotusFrame');
               if (frameDivs != null && frameDivs.length > 0) {
                  parseArea = frameDivs[0];
               } else {
                  parseArea = win.document;
               }
            }

            if(ibmConfig.serviceName == "profiles" && !ibmConfig.parsed)
            {
            	ibmConfig.parsed = true;
            	return;
            }

            parser.parse(parseArea);

            for (uiLocation in wpCRE.uiLocations) {
               var dropZoneDOMId = uiLocation + 'DropZone';
               var dropZone = dom.byId(dropZoneDOMId);
               if (dropZone) {
                  var dropZoneObject = createDropZoneObject(uiLocation, dropZone);
                  wpCRE.dropZoneObjects[dropZoneDOMId] = dropZoneObject;
               }
            }

            wpCRE.initialLoad = false;
         }));

         return promise;
      };

      var _getColumnTheme = function(/* DOMNode/String */column) {
         var node = (lang.isString(column)) ? dom.byId('widget-container-' + column) : column;
         if (!node || 1 !== node.nodeType)
            return null;

         while ('lotusMain' !== node.id) {
            var classes = node.getAttribute('class') || '';
            var start = classes.indexOf('wptheme');
            if (-1 === start) {
               node = node.parentNode;
               continue;
            }

            classes = classes.substring(start);
            var end = classes.indexOf(' ');
            if (-1 === end) {
               return classes;
            } else {
               return classes.substring(0, end);
            }
         }

         return null;
      };

      var _initUiLocations = function() {
         wpCRE.uiLocations = {};

         // TODO: use class "widgetContainer" instead to manage all widget
         // containers
         var uiLocations = [
               'banner',
               'col1',
               'col2',
               'col3',
               'col2recentposts',
               'col2statusposts',
               'palette'
         ];
         array.forEach(uiLocations, function(location) {
            var column = dom.byId('widget-container-' + location);
            if (!column)
               return false;

            var theme = _getColumnTheme(column);
            var draggable = !('col2recentposts' === location || 'col2statusposts' === location || 'palette' === location);
            var hidden = false;
            wpCRE.uiLocations[location] = {
               hidden : hidden,
               draggable : draggable,
               theme : theme
            };
         });
      };

      // IC 138419: the only approach to tell status/recent updates in
      // communities from overview page is the pathname of the location.
      var _isUpdatesPage = function() {
         var suffix = '/community/updates',
             path = win.document.location.pathname;

         return (path.indexOf(suffix, path.length - suffix.length) !== -1);
      };

      // To find if path has communityoverview and URL does not have contextAction
	  var _communityoverview = function() {
         var suffix = '/communityoverview',
            path =  win.location.href,
			contextAction= 'contextAction=';
			
		return ((path.indexOf(suffix, 0) !== -1) && (path.indexOf(contextAction, 0) == -1) );
      };
      // Check if "Highlights" is selected as Landing Page
      var _isHighlightsStartPage= function() {
	   	var isHighlightsLandingPage =false;
  		var urlHighlights ="";

     	var layouts= community.links;
	    for (var i = 0; i < layouts.length; i++) {
	    	var widgetlink = layouts[i];
	    	if (widgetlink.id == "Highlights") {
	    		urlHighlights = widgetlink.url;
	    		break;
	    	}
		}
	    if(urlHighlights.indexOf(communityActionData.startPage) > 0 ){
	    	isHighlightsLandingPage =true;
	    }
		return  isHighlightsLandingPage;
  	};
  	
      var _updateLoadOrder = function(instanceId, uiLocation) {
         array.some(wpCRE.loadOrder, function(node) {
            if (node && instanceId === node.instanceId && uiLocation !== node.uiLocation) {
               node.uiLocation = uiLocation;
               return false;
            }
         });
      };

      wpCRE.onDropHandler = function(source, nodes, iscopy) {
         if (!wpCRE.currentNode)
            return;

         var target = Manager.manager().target,
             newUiLocation = target.jsId,
             currentNode = wpCRE.currentNode,
             currentNodeId = currentNode.getAttribute('widgetId');

         if (target && source && target !== source) {
            utilities.hide(currentNodeId + 'SubArea', true, true);
         }
         utilities.show(currentNode, false, false, true);
         wpCRE.currentNode = null;

         _updateLoadOrder(currentNodeId, newUiLocation);

         var saveMove = function() {
            var childNodes = target.getAllNodes();
            for (var i = 0; i < childNodes.length; i++) {
               if (childNodes[i].getAttribute('widgetId') === currentNodeId) {
                  var previousId = (i === 0) ? null : childNodes[i - 1].getAttribute('widgetId');
                  moveWidgetTemp(currentNodeId, newUiLocation, previousId, target, source);
                  break;
               }
            }

            //EVT Publish the widget moved event (drag and drop case)
            topic.publish(events.WIDGET_MOVED_EVENT, currentNodeId);
         };
         win.setTimeout(saveMove, 300);
      };

      // Returns widget instance id to use as previous id for widgets moved to
      // top of column 3
      wpCRE.getColumn3Anchor = function() {
         return ('top');
      };

      // Returns widget instance id to use as previous id for widgets moved to
      // top of column 2
      wpCRE.getColumn2Anchor = function() {
         return ('top');
      };

      var moveWidgetTemp = function(widgetId, newUILocation, previousWidgetId, target, source) {
         // Adjusts the id of the previous widget to use to place a widget.
         // Accounts for moving to beginning of column3, and useing last widget
         // in column 2 as previous for that case
         // so navigator keeps column 3 widgets after column 2 widgets.
         previousWidgetId = previousWidgetId || (newUILocation === 'col3' ? wpCRE.getColumn3Anchor() : wpCRE.getColumn2Anchor());

         _xmlManager.moveWidget(widgetId, newUILocation, previousWidgetId).then(function() {
            if (target && source && target !== source)
               wpCRE.utils.withLayoutInfo(true).then(function(){
                  wpCRE.refresh(widgetId);
               });
         }, function() {});
      };

      wpCRE.unhideWidget = function(widgetId) {
         query('[widgetid="' + widgetId + '"]').forEach(function(node) {
            if (domClass.contains(node, 'lotusHidden')) {
               domClass.remove(node, 'lotusHidden');
            }
         });
      };

      wpCRE.renderWidgets = function(widgetSpecs) {
         if (widgetSpecs.length == 0) {
            return;
         }
         var filtered = [];

         for (var i = 0; i < widgetSpecs.length; i++) {
            var domNode = dom.byId(widgetSpecs[i].placement);
            if (domNode) {
               filtered.push(widgetSpecs[i]);
            }
         }

         _showSidePanels();

         var lw = function() {
            iContainer.loadWidgets(filtered);
         };
         iContainer.preloadWidgets(widgetSpecs).then(lw);
      };

      wpCRE.loadWidgetFullPage = function(widgetId, additionalParameters) {
         wpCRE.loadFullpageView(widgetId, additionalParameters, true, true);
      };

      wpCRE.loadFullpageView = function(instanceId, additionalParameters, addState, overrideOverViewLink, dontRegisterCloseView) {
         var pageId = WidgetPlacementConfig.defaultPageId;
         var widgetInstance = wpCRE.utils.getWidgetInstance(instanceId, null, pageId);
         var defIdRef = (widgetInstance ? widgetInstance.defIdRef : instanceId);
         var widgetDef = wpCRE.utils.getWidgetDef(defIdRef);
         additionalParameters = additionalParameters || [];
         additionalParameters.push({
            name : 'resourceId',
            value : win.WidgetPlacementConfig.resourceId
         });

         wpCRE.switchView(widgetDef, widgetInstance, additionalParameters, overrideOverViewLink, addState);

         //fix 205875: [Copied from IC 181452] Should go to community files section after click help in community Files
         var helpLink = widgetDef.helpLink;
         if (helpLink && helpLink.length)
            helpLink = _getI18nString(helpLink);

         // Strip off lang parameter
         var langPos = helpLink.indexOf('&lang');
         if (langPos > 0) {
        	 helpLink = helpLink.substr(0, langPos);
         }

         if (typeof lconn.core.config.properties.DeploymentModel !== "undefined" && lconn.core.config.properties.DeploymentModel && lconn.core.config.properties.DeploymentModel === "SmartCloud"){
        	 navigation_banner_updateHelpMenu(null, helpLink);
         }
      };

      wpCRE.reloadOverviewPage = function() {
      	 logger.entering('ic-core/WidgetPlacement', 'reloadOverviewPage');

         topic.publish(events.OVERVIEW_PAGE_RELOADED_EVENT);

         wpCRE.closeOtherViews();
         if (wpCRE.currentFullpageWidgetInstanceId) {
            // remove references to fullpage widget
            wpCRE.destroyWidget(wpCRE.currentFullpageWidgetInstanceId, null, false, true, false);
            wpCRE.currentFullpageWidgetInstanceId = null;
         }

         if (wpCRE.onlyFullPageWidgetLoaded) {
            var widgetSpecsPromise = wpCRE.placeWidgetMetadata(false, 'view');
            widgetSpecsPromise.then(lang.hitch(this, function(widgetSpecs) {
               wpCRE.renderWidgets(widgetSpecs);
               wpCRE.onlyFullPageWidgetLoaded = false;
            }));
         }

         if (win.WidgetPlacementConfig.hideElements)
            for (var i = 0; i < win.WidgetPlacementConfig.hideElements.length; i++) {
               utilities.show(win.WidgetPlacementConfig.hideElements[i], false, false, true);

               try {
                  registry.byId(win.WidgetPlacementConfig.hideElements[i]).show();
               }
               catch (exception1) { /* do nothing */
               }
            }
         ;

         wpCRE.destroyWidgetContainer('fullpage');

         for (uiLocation in wpCRE.uiLocations) {
            wpCRE.showColumn(uiLocation);
         }

         wpCRE.highlightOverviewLink();

         array.forEach(wpCRE.loadOrder, function(node) {
            if (node && dom.byId('widget-container-' + node.uiLocation))
               wpCRE.refresh(node.instanceId);
         });
         return false;
      };

      wpCRE.getWidgetDefId = function(instanceId, widgetDataDoc) {
         var widgetInstance = wpCRE.utils.getWidgetInstance(instanceId, widgetDataDoc),
             defIdRef = ((widgetInstance) ? widgetInstance.defIdRef : instanceId);

         return defIdRef;
      };

      var _showMisplacedWarning = function(instanceId) {
         _showMessageInWidget(instanceId, 'warning', coreMessages['rs_widget_misplacement_warning'], null);
      };

      var _showWidgetLoadError = function(instanceId, errToLog) {
      	if (errToLog) {
				logger.error(
				   'Failed to load widget ' + instanceId + ', error:\n', errToLog);
			}
      	_showMessageInWidget(instanceId, 'error',
      	   coreMessages['rs_widget_loading_error_title'],
      	   coreMessages['rs_widget_loading_error_message'], false, true);
      };

      wpCRE.refresh = function(instanceId, widgetDataDoc, grabFocus) {
         var widgetInstance = wpCRE.utils.getWidgetInstance(instanceId, widgetDataDoc),
             defId = ((widgetInstance) ? widgetInstance.defIdRef : instanceId),
             widgetDef = wpCRE.utils.getWidgetDef(defId, widgetDataDoc);

         utilities.hide(instanceId + 'moreActions', true, true);
         if (!widgetInstance || !widgetDef)
            return; // skip the refresh if no widgetInstance or definitionNode

         wpCRE.destroyWidget(instanceId, null, false, false, false);
         utilities.show(instanceId + 'SubArea', true, true, true);

         var overviewWidgetName = wpCRE.utils.getWidgetName(widgetDef, widgetInstance, 'view'),
             navbarWidgetName = wpCRE.utils.getWidgetName(widgetDef, widgetInstance),
             attributesMap = getWidgetConfigAttrs(null, widgetDef, widgetInstance),
             widgetSubArea = dom.byId(instanceId + 'SubArea');

         if (widgetSubArea) {
            widgetSubArea.innerHTML = addiWidgetMicroformat(instanceId);
            widgetSubArea.setAttribute('widgetloaded', 'true');
         }

         if (win.refreshInfoHolder == null)
            win.refreshInfoHolder = {};
         win.refreshInfoHolder[instanceId] = true;

         if (overviewWidgetName) {
            var dndSpan = dom.byId(instanceId + 'Id');
            if (dndSpan) {
               if (dndSpan.textContent) {
                  dndSpan.textContent = overviewWidgetName;
               } else {
                  dndSpan.innerText = overviewWidgetName;
               }
            }
         }

         if (navbarWidgetName) {
            var navItem = dom.byId(instanceId + '_navItem');
            if (navItem) {
               var navLink = navItem.children[0];
               if (navLink.textContent) {
                  navLink.textContent = navbarWidgetName;
               } else {
                  navLink.innerText = navbarWidgetName;
               }
            }
         }

         var uiLocation = wpCRE.getUILocation(instanceId);
         if (_columnSupported(uiLocation, widgetDef)) {
            var widgetMetadata = createWidgetMetadata(instanceId, widgetDef.url, getDisplayedUserInfo(), attributesMap, 'view', overviewWidgetName);
            iContainer.loadWidget(widgetMetadata);
         } else {
            _showMisplacedWarning(instanceId);
         }

         win.setTimeout(function() {
            win.refreshInfoHolder[instanceId] = null;
         }, 2000);

         if (grabFocus) {
            win.setTimeout(function(){
               wpCRE.setFocus(instanceId, 'widgetActionsMenu' + instanceId);
            }, 0);
         }
      };

      wpCRE.refreshTitleAndMicroformat = function(instanceId, widgetData) {
         var widgetInstance = wpCRE.utils.getWidgetInstance(instanceId, widgetData),
             defIdRef = ((widgetInstance) ? widgetInstance.defIdRef : instanceId),
             widgetDef = wpCRE.utils.getWidgetDef(defIdRef),
             overviewWidgetName = wpCRE.utils.getWidgetName(widgetDef, widgetInstance, 'view'),
             navbarWidgetName = wpCRE.utils.getWidgetName(widgetDef, widgetInstance);

         _refreshTitle(instanceId, overviewWidgetName, navbarWidgetName);
      };

      var _refreshTitle = function(instanceId, overviewWidgetName, navbarWidgetName) {
         query('div#' + instanceId + ' > span[title="attributes"]').orphan();
         if (overviewWidgetName) {
            var dndSpan = dom.byId(instanceId + 'Id');
            if (dndSpan) {
               if (dndSpan.textContent) {
                  dndSpan.textContent = overviewWidgetName;
               } else {
                  dndSpan.innerText = overviewWidgetName;
               }
            }
         }

         if (navbarWidgetName) {
            var navItem = dom.byId(instanceId + '_navItem');
            if (navItem) {
               var navLink = navItem.children[0];
               if (navLink.textContent) {
                  navLink.textContent = navbarWidgetName;
               } else {
                  navLink.innerText = navbarWidgetName;
               }
            }
         }
      };

      wpCRE.fetchAndRefresh = function(instanceId) {
         win.staleXMLConfig = true;
         wpCRE.utils.withLayoutInfo(true).then(function() {
            wpCRE.refresh(instanceId);
         });
      };

      var changeTitle = function(instanceId, title, okCallback, errCallback) {
         var object = {
               'widgetTitle' : title
         };

         _xmlManager.savePreference(instanceId, object, true).then(okCallback, errCallback);
      };

      // IC 144158: calculate the bytes length for size
      var getUTF8BytesLength = function (str) {
         var length = 0;
         for (var i = 0; i < str.length; i++) {
            var charcode = str.charCodeAt(i);
            if (charcode < 0x80) length += 1;
            else if (charcode < 0x800) length += 2;
            else length += 3;
         }
         return length;
      };

      wpCRE.changeTitle = function(instanceId) {
         var widgetInstance = wpCRE.utils.getWidgetInstance(instanceId),
             defId = ((widgetInstance) ? widgetInstance.defIdRef : null),
             widgetDef = ((defId) ? wpCRE.utils.getWidgetDef(defId) : null);

         var oldTitle = wpCRE.utils.getWidgetName(widgetDef, widgetInstance, 'view'),
             defaultTitle = wpCRE.utils.getDefaultWidgetName(widgetDef);

         var input = domConstruct.create('input', {
            type : 'text',
            value : oldTitle,
            'aria-required' : 'true',
            'class' : 'lotusText bidiAware',
            style : 'width:300px',
            'aria-labelledby' : 'newTitleLabel'
         });
         var messageArea = domConstruct.create('div');

         var dlgContent = domConstruct.create('span', {
       	  innerHTML : string.substitute(coreMessages['rs_widget_title_change_direction'], [defaultTitle]) +
             '<br/><br/><label id=\'newTitleLabel\'>*' + coreMessages['rs_widget_title_change_label'] + '</label>'
         });
         domConstruct.place(messageArea, dlgContent, 'first');
         domConstruct.place(input, dlgContent, 'last');

         domConstruct.create('br', {}, dlgContent, 'last');
         domConstruct.create('br', {}, dlgContent, 'last');
         domConstruct.create('span', {
            innerHTML : '* ' + i18nInsertImageDialog['required']
         }, dlgContent, 'last');

         var ifSuccess = function () {
            dialog.hide();
            dialog = null;

            wpCRE.utils.withLayoutInfo(true).then(function() {
               wpCRE.refreshTitleAndMicroformat(instanceId);
            });

   			//EVT Publish the widget renamed event
            topic.publish(events.WIDGET_RENAMED_EVENT, instanceId);
         };

         var ifFailure = function (error) {
            var errorTitle = string.substitute(coreMessages['rs_widget_title_change_fail_message']['default_message'], [defaultTitle]);
            _showMessage('error', 'dlgChangeTitle', errorTitle, null, messageArea, false, false);
         };

         var okCallback = function() {
            var title = input.value;
            if (title) {
               title = title.trim();
            }

            if (title && oldTitle) {
               if (title === oldTitle) {
                  dialog.hide();
                  dialog = null;
               } else if (getUTF8BytesLength(title) > 256) {
                  var errorTitle = coreMessages['rs_widget_title_change_fail_message']['title_too_long'];
                  _showMessage('error', 'dlgChangeTitle', errorTitle, null, messageArea, false, false);
               } else {
                  changeTitle(instanceId, title, ifSuccess, ifFailure);
               }
            } else {
               var errorTitle = coreMessages['rs_widget_title_change_fail_message']['empty_new_title'];
               _showMessage('error', 'dlgChangeTitle', errorTitle, null, messageArea, false, false);
            }
         };

         var dialog = DialogUtil.popupForm(coreMessages['rs_widget_title_change_title'], dlgContent, messages['save'], messages['cancel'], okCallback, null);
      };

      wpCRE.moveDown = function(widgetInstanceId, uiLocation) {
         var dropZoneNode = dom.byId(uiLocation + 'DropZone');
         var childNodes = wpCRE.getColumnWidgetNodes(uiLocation);
         for (var currentIndex = 0; childNodes && currentIndex < childNodes.length - 1; currentIndex++) {
            var currentWidgetId = childNodes[currentIndex].getAttribute('widgetid');
            if (currentWidgetId === widgetInstanceId) {
               // TODO: clean this part, a little bit verbose
               var calculatedIndex = currentIndex + 1;
               var previousId = childNodes[calculatedIndex].getAttribute('widgetid');

               moveWidgetTemp(widgetInstanceId, uiLocation, previousId);
               try {
                  dropZoneNode.insertBefore(childNodes[currentIndex], childNodes[calculatedIndex + 1]);
               }
               catch (exception) {
                  // IE issue
                  dropZoneNode.appendChild(childNodes[currentIndex]);
               }

               //EVT Publish the widget moved event (move down case)
               topic.publish(events.WIDGET_MOVED_EVENT, widgetInstanceId);
               break;
            }
         }
         utilities.hide(widgetInstanceId + 'moreActions', true, true);
         var actionBar = dom.byId('widgetActionsMenu' + widgetInstanceId);
         if (actionBar)
            actionBar.focus();
      };

      wpCRE.moveUp = function(widgetInstanceId, uiLocation) {
         var dropZoneNode = dom.byId(uiLocation + 'DropZone');
         var childNodes = wpCRE.getColumnWidgetNodes(uiLocation);
         // we cannot move the first of the list, start from 1
         for (var currentIndex = 1; childNodes && currentIndex < childNodes.length; currentIndex++) {
            var currentWidgetId = childNodes[currentIndex].getAttribute('widgetid');
            if (currentWidgetId == widgetInstanceId) {
               var calculatedIndex = currentIndex - 1;
               var previousId = ((calculatedIndex !== 0) ? childNodes[calculatedIndex - 1].getAttribute('widgetid') : null);

               moveWidgetTemp(widgetInstanceId, uiLocation, previousId);
               dropZoneNode.insertBefore(childNodes[currentIndex], childNodes[calculatedIndex]);

			   //EVT Publish the widget moved event (move up case)
               topic.publish(events.WIDGET_MOVED_EVENT, widgetInstanceId);
               break;
            }
         }
         utilities.hide(widgetInstanceId + 'moreActions', true, true);
         var actionBar = dom.byId('widgetActionsMenu' + widgetInstanceId);
         if (actionBar)
            actionBar.focus();
      };

      var _getSiblingColumn = function(uiLocation, direction) {
         var columns = query('div.widgetContainer').map(function(c) {
            return c.id.replace('widget-container-', '');
         }).filter(function(c) {
            var params = wpCRE.uiLocations[c];
            return params && !params.hidden && params.draggable;
         });

         if (columns.length <= 1 || -1 === columns.indexOf(uiLocation)) {
            return null;
         }

         var newIndex = (columns.length + columns.indexOf(uiLocation) + direction) % columns.length;
         return columns[newIndex];
      };

      var _moveToSiblingColumn = function(instanceId, uiLocation, direction) {
         uiLocation = uiLocation || wpCRE.getUILocation(instanceId);
         var nodes = wpCRE.getColumnWidgetNodes(uiLocation);
         if (!nodes)
            return;

         nodes = nodes.filter(function(w) {
            return (instanceId === w.getAttribute('widgetid'))
         });
         if (1 !== nodes.length)
            return;

         var newUiLocation = _getSiblingColumn(uiLocation, direction);
         if (newUiLocation) {
            var dropZoneNode = dom.byId(newUiLocation + 'DropZone');
            domConstruct.place(nodes[0], dropZoneNode, 'last');
            _updateLoadOrder(instanceId, newUiLocation);

            wpCRE.moveWidgetToEnd(instanceId, newUiLocation);
            wpCRE.refresh(instanceId);

 			//EVT Publish the widget moved event (left and right case)
            topic.publish(events.WIDGET_MOVED_EVENT, instanceId);
            var oldDropZone = wpCRE.dropZoneObjects[uiLocation + 'DropZone'],
                newDropZone = wpCRE.dropZoneObjects[newUiLocation + 'DropZone'];

            if (oldDropZone && newDropZone) {
               oldDropZone.delItem(instanceId + 'Section');
               oldDropZone.showEmptyIndicator();
               newDropZone.setItem(instanceId + 'Section', {
                  node : dom.byId(instanceId + 'Section'),
                  id : instanceId + 'Section',
                  data : instanceId,
                  type : ['widget']
               });
               newDropZone.hideEmptyIndicator();
            }
         }

         utilities.hide(instanceId + 'moreActions', true, true);
         var actionBar = dom.byId('widgetActionsMenu' + instanceId);
         if (actionBar)
            actionBar.focus();
      };

      wpCRE.moveToNextColumn = function(instanceId, uiLocation) {
         _moveToSiblingColumn(instanceId, uiLocation, 1);
      };

      wpCRE.moveToPreviousColumn = function(instanceId, uiLocation) {
         _moveToSiblingColumn(instanceId, uiLocation, -1);
      };

      var getDialog = function() {
         if (!win.dialog1) {
            var dialog1Container = dom.byId('dialog1Container');
            if (!dialog1Container) {
               dialog1Container = domConstruct.create('div');
               dialog1Container.id = 'dialog1Container';
               dom.byId('lotusContent').appendChild(dialog1Container);
            }
            win.dialog1 = new Dialog({
               id : 'dialog1',
               style : 'width: 500px'
            }, dialog1Container);
         }
         return win.dialog1;
      };

      // @deprecated This method will be removed in 4.0 with a different dialog
      // method
      wpCRE.displayDialog = function(dialogContent) {
         var dialog1 = getDialog();
         dialog1.setContent(dialogContent);

         try {
            dialog1.titleBar.style.display = 'none';
         }
         catch (error1) {
            logger.error(error1);
         }

         dialog1.show();
         var dialog1Button = dom.byId('dialog1.button');
         if (dialog1Button)
            dialog1Button.focus();
      }

      // Returns NodeList - one for each widget in column, in the order of their
      // display.
      // column = "col2" or "col3"
      wpCRE.getColumnWidgetNodes = function(column, allowNested) {
         var widgetContainer = dom.byId(column + 'DropZone') || dom.byId('widget-container-' + column);
         if (!widgetContainer) {
            if (lang.isString(column)) {
               return null;
            } else {
               widgetContainer = dom.byId(column);
            }
         }

         var widgetQuery = (allowNested ? '' : '> ') + 'div.lotusWidget2';
         return query(widgetQuery, widgetContainer).filter(function(w) {
            return !!w.getAttribute('widgetid');
         });
      };

      // Move widget to end of widget list in column 2
      wpCRE.moveWidgetToEnd = function(widgetInstanceId, column) {
         var widgetNodes = wpCRE.getColumnWidgetNodes(column);
         if (widgetNodes) {
            var previousId = domAttr.get(widgetNodes[widgetNodes.length - 1], 'widgetid');
            if (previousId === widgetInstanceId) {
               // Widget is last one in UI, but we need to ensure the DB is
               // updated to reflect that
               if (widgetNodes.length > 1) {
                  previousId = domAttr.get(widgetNodes[widgetNodes.length - 2], 'widgetid');
               } else {
                  previousId = null;
               }
            }
            moveWidgetTemp(widgetInstanceId, column, previousId, null, null);
         }
      };

      // Returns true iff the widget should show the full delete confirmation
      // dialogue.
      wpCRE.showFullWidgetDeleteConfirmation = function(defId) {
         var result = true;
         var widgetDef = wpCRE.utils.getWidgetDef(defId);
         if (widgetDef) {
            var showFullWidgetDeleteConfirmation = widgetDef.showFullWidgetDeleteConfirmation;
            if (showFullWidgetDeleteConfirmation === 'false') {
               result = false;
            }
         }

         return result;
      };

      wpCRE.removeWidget = function(widgetInstanceId, removeWidgetData, prompt) {
         logger.entering('ic-core/WidgetPlacement', 'removeWidget', arguments);

         // internal functions
         var ifConfirmed = function() {
            var widgetInstance = wpCRE.utils.getWidgetInstance(widgetInstanceId),
                uiLocation = wpCRE.getUILocation(widgetInstanceId);

            if (!wpCRE.removeWidgetInProgress) {
               if (removeWidgetData)
                  showRemoveWidgetDialog();
            }

            _xmlManager.removeWidget(widgetInstanceId, removeWidgetData).then(function() {
               var nextFocusWidgetId = _findNextFocusWidgetId(widgetInstanceId);

               var iContext = win['_' + widgetInstanceId + '_iContext'];
               if (iContext && iContext.iScope().onRemoveWidgetUIContent) {
                  iContext.iScope().onRemoveWidgetUIContent();
               }

               // updated for 183378
               // Action of remove widget to remove navigation link
               // Action of hide widget to not remove navigation link
               if (removeWidgetData || !is_communities_show_hidden_in_navigator){
                 _removeFromNavbar(widgetInstanceId);
               }

               wpCRE.destroyWidget(widgetInstanceId, null, true);

               wpCRE.loadOrder = array.filter(wpCRE.loadOrder, function(NodeId) {
                  return (NodeId && NodeId.instanceId !== widgetInstanceId);
               });

               win.setTimeout(lang.hitch(this, function() {
                  wpCRE.setFocus(nextFocusWidgetId, 'widgetActionsMenu' + nextFocusWidgetId);
               }), 0);

               var htmlId = widgetInstanceId + 'Section';
               var cleanStage = function() {
                  var htmlElement = dom.byId(htmlId);
                  if (htmlElement)
                     htmlElement.parentNode.removeChild(htmlElement);

                  var dropZone = wpCRE.dropZoneObjects[uiLocation + 'DropZone'];
                  if (dropZone) {
                     dropZone.showEmptyIndicator();
                  }

                  hideDialog();
               };
               var wipeOutAnim = fx.wipeOut({
                  node : htmlId,
                  duration : 300,
                  onEnd : cleanStage
               });
               wipeOutAnim.play();

               win.WidgetPlacementConfig.lastMod = new Date().getTime();
               // step 4: run assigned callback for removal
               if (wpCRE.utils.getCallbacks('removeWidget')) {
                  array.forEach(wpCRE.utils.getCallbacks('removeWidget'), function(callback) {
                     callback(widgetInstance);
                  });
               }
               
               // step 5: display a confirmation message with link to Undo for Hide only
               if (!removeWidgetData) {
                 var widgetDef = wpCRE.utils.getWidgetDef(widgetInstance.defIdRef);
                 var widgetName = wpCRE.utils.getEscapedWidgetName(widgetDef, widgetInstance, 'view');
                 var doUndo = function (event) {
                   var updatedWidgetInstance = wpCRE.utils.getWidgetInstance(widgetInstanceId);
                   // If the widget has already been unhidden via Add Apps, 
                   // then just close the confirmation
                   if(updatedWidgetInstance.enabled === 'false') {
                     wpCRE.addWidgetToServerAndRender(widgetDef.defId, 
                         updatedWidgetInstance.uiLocation, ['true'], [updatedWidgetInstance.instanceId]);
                   }
                   lconn.communities.bizCard.core.clearMessage();
                 };
                 // The Hide confirmation message and link to Undo the hide 
                 var createUndo = function (document) {
                   var div = document.createElement('div');
                   div.innerHTML = string.substitute(messages['widget_HideConfirmation'], 
                       [widgetName]);
                   var link = document.createElement('a');
                   dojo.attr(link, 'href', 'javascript:;');
                   dojo.connect(link, 'onclick', doUndo);
                   link.innerHTML = messages['widget_HideConfirmationUndo'];
                   div.appendChild(link);
                   return div;
                 };
                 // Display the Hide confirmation message
                 lconn.communities.bizCard.core.showFollowConfirmation(createUndo);
               }
            }, function() {});
         };

         var ifDeclined = function() { /* do nothing */};
         // internal functions end

         // step 1: check whether the widget is removable
         var canRemoveWidget = wpCRE.canRemoveWidget(widgetInstanceId);
         if (!canRemoveWidget)
            return;

         // step 2: request user grant of removal
         var userConfirmation = wpCRE.requestRemovalConfirmation(prompt, widgetInstanceId, removeWidgetData);

         // step 3: react with user confirmation
         userConfirmation.then(ifConfirmed, ifDeclined);
      };

      var _findNextFocusWidgetId = function(instanceId) {
         var orderedWidgetIds = query('div.lotusWidget2').map(function(widget) {
            return widget.getAttribute('widgetid')
         }).filter(function(v) {
            return !!v
         });

         var index = array.indexOf(orderedWidgetIds, instanceId);
         if (-1 === index) {
            logger.warn('The widget is not on the page: ' + instanceId);
            return null;
         }

         return orderedWidgetIds[(index + 1) % (orderedWidgetIds.length)];
      };

      var showAddWidgetDialog = function() {
         var dialogContent = '<div class="lotusDialogBorder"><form class="lotusDialog lotusForm">' + '<h1><img src="'
               + win.WidgetPlacementConfig.applicationContext + '/nav/common/styles/images/loading.gif" title="' + messages['widget_AddingWidget'] + '"> '
               + messages['widget_AddingWidget'] + '</h1>' + '</form></div>';
         wpCRE.displayDialog(dialogContent);
      }

      var showRemoveWidgetDialog = function() {
         var dialogContent = '<div class="lotusDialogBorder" role="alert" aria-live="assertive"><form class="lotusDialog lotusForm">' + '<h1><img src="'
               + win.WidgetPlacementConfig.applicationContext + '/nav/common/styles/images/loading.gif"> ' + messages['widget_RemovingWidget'] + '</h1>'
               + '</form></div>';
         wpCRE.displayDialog(dialogContent);
      }

      var hideDialog = function() {
         var temp = registry.byId('dialog1');
         if (temp)
            temp.hide();
      }

      wpCRE.addWidgetToServerAndRender = function(widgetDefId, uiLocation, unhide, instanceId) {
         var promise = new Deferred('addWidgetToServerAndRender');

         widgetDefIdString = widgetDefId[0];
         if (widgetDefIdString === 'StatusUpdates') {
            uiLocation = 'col2statusposts';
         } else if (widgetDefIdString == 'Tags') {
            uiLocation = 'col1';
         }

         // Set to true iff we're unhiding the widget.
         var unhidingWidget = false;
         if (unhide == false || unhide == 'false') {
            showAddWidgetDialog();
         } else {
            var widgetInstance = wpCRE.utils.getWidgetInstance(instanceId);
            if (widgetInstance && 'false' === widgetInstance.enabled) {
               uiLocation = widgetInstance.uiLocation;
            }
            unhidingWidget = true;
         }

         _xmlManager.addWidget(widgetDefId, uiLocation, unhide, instanceId).then(function(widgetInstanceId) {
            wpCRE.loadOrder.push({
               instanceId : widgetInstanceId,
               uiLocation : uiLocation
            });

            //updated for 183378
            //don't add link in community navigation when unhide a widget
            isAddToNavBar = true;
            if(unhidingWidget && is_communities_show_hidden_in_navigator)
            	isAddToNavBar = false;

            wpCRE.getWidgetDocAndRenderWidget(widgetDefId, null, widgetInstanceId, uiLocation,null,null,isAddToNavBar);
            var dropZone = wpCRE.dropZoneObjects[uiLocation + 'DropZone'];
            if (dropZone) {
               dropZone.hideEmptyIndicator();
            }
            hideDialog();

            // If we're unhiding, since we're inserting the widget at the end of
            // column, update the database to reflect that so a page refresh
            // won't show the widget as moved.
            if (unhidingWidget) {
               wpCRE.moveWidgetToEnd(widgetInstanceId, uiLocation);
            }

            // Refresh the left navigator
            _restoreNavbar();

            // finally run through all registered callbacks
            if (wpCRE.utils.getCallbacks('addWidget')) {
               array.forEach(wpCRE.utils.getCallbacks('addWidget'), function(callback) {
                  callback(widgetDefId, widgetInstanceId, uiLocation, unhide);
               });
            }

            promise.resolve();
         }, function() {
            promise.reject();
         });

         return promise;
      };

      var _showMessage = function (level, scope, title, detail, container, hideDetail, prepend) {
         if (lang.isString(container)) {
            container = dom.byId(container);
         }

         if (container) {
         	var isError = ('error' === level);
            title = title || (isError ? messages['error.title.generic'] : null);
            if (!title) {
            	return;
            }

            if (true !== prepend) {
               container.innerHTML = '';
            }

            var cLEVEL = (isError ? 'ERROR' : 'WARNING');
            var messageNode = domConstruct.create('div', null, container, 'first');
            var messageBox = new MessageBox({
               _strings: {
                  icon_alt: coreMessages['rs_messagebox_' + level + '_a11y_label'],
                  a11y_label: coreMessages['rs_messagebox_' + level + '_a11y_label']
               },
               type: MessageBox.TYPE[cLEVEL],
               msg: title,
               msgMore: detail
            }, messageNode);

            if (false !== hideDetail && detail) {
               messageBox.showMoreNode.click();
            }
         } else {
            logger.warn('Unable to show message in the container', container);
         }
      };

      var _showMessageInHeadline = function (level, title, detail, hideDetail, prepend) {
         _showMessage(level, 'global', title, detail, 'headline', hideDetail, prepend);
      };

      var _showMessageInWidget = function (instanceId, level, title, detail, hideDetail, prepend) {
         _showMessage(level, 'widget'+instanceId, title, detail, instanceId, hideDetail, prepend);
      };

      // Shows widget error on page in headline div.
      // set prepend = true iff you want the message pre-pended to he headline.
      // false to replace the headline content.
      wpCRE.showWidgetErrorInHeadline = function(error, prepend) {
         hideDialog();

         wpCRE.removeWidgetInProgress = false;
         wpCRE.addWidgetInProgress = false;

         var errorText = ((error) ? (error.message || error.responseText) : error);
         _showMessageInHeadline('error', null, errorText, true, prepend);
      };

      wpCRE.customAddWidgetErrorHandler = function(error) {
         return wpCRE.showWidgetErrorInHeadline(error, true);
      };

      wpCRE.minimizeWidget = function(htmlElement, widgetInstanceId, widgetDefId, hideWidget) {
         utilities.hide(widgetInstanceId + 'moreActions', true, true);

         var element = dom.byId(widgetInstanceId + 'SubArea');
         var minimized = (domStyle.get(element, 'display') === 'none');

         var widgetId = widgetInstanceId || widgetDefId;
         _setMinimized(widgetId, !minimized);

         var menuItem = registry.byId(widgetInstanceId + '_toggleAction');
         var menuWidget = dom.byId('widgetActionsMenu' + widgetInstanceId);
         if (minimized) {
            var widgetloaded = element.getAttribute('widgetloaded');
            var widgetneedrefresh = element.getAttribute('widgetneedrefresh');
            if (widgetneedrefresh == null) {
               widgetneedrefresh = 'true';
            }

            if (widgetloaded === 'false' && widgetneedrefresh === 'true') {
               var temp = function() {
                  wpCRE.refresh(widgetInstanceId);
                  if (hideWidget) {
                     domStyle.set(element, 'display', 'none');
                     menuItem.setLabel(messages['widgets_Max']);
                  } else {
                     domStyle.set(element, 'display', '');
                     menuItem.setLabel(messages['widgets_Min']);
                  }
               };

               wpCRE.utils.withLayoutInfo().then(temp);
            } else {
               domStyle.set(element, 'display', '');
               menuItem.setLabel(messages['widgets_Min']);
            }
         } else {
            domStyle.set(element, 'display', 'none');
            menuItem.setLabel(messages['widgets_Max']);
         }

         win.setTimeout(function(){
            wpCRE.setFocus(widgetInstanceId, 'widgetActionsMenu' + widgetInstanceId);
         }, 0);
      };

      wpCRE.addEditTabsWithOnclickCalls = function(TabContainerDomId, editModeContainerDomId, intialDisplayDomId, cancelCallBack, editPageTabFirstItemDomId) {
         return wpCRE.addTabsWithOnclickCalls(TabContainerDomId, editModeContainerDomId, intialDisplayDomId, cancelCallBack, editPageTabFirstItemDomId, 'edit');
      };

      wpCRE.showFirstTab = function(intialDisplayDomId, FirstTabItemDomId, callback) {
         if (win.WidgetPlacementConfig.TabContainerDomId) {
            var parentHTMLNode = dom.byId(win.WidgetPlacementConfig.TabContainerDomId);
            if (parentHTMLNode) {
               query('li[id$="_TabItem"]', parentHTMLNode).forEach(function(node) {
                  domClass.remove(node, 'lotusSelected');
                  domAttr.set(node, {
                     'tabindex' : '-1',
                     'aria-selected' : 'false',
                     'role' : 'tab'
                  });
               });
            }

            // set the aria-label of the tabpanel to match the tab selected
            try {
               domAttr.set(dom.byId(win.WidgetPlacementConfig.TabContainerDomId + '_panel'),
                  'aria-label',
                  query('a._linkHolder', dom.byId(FirstTabItemDomId))[0].innerHTML);
            } catch (ee) {
            }
         }

         if (win.WidgetPlacementConfig.TempWidgetContainerDomId)
            wpCRE.destroyWidgetContainer(win.WidgetPlacementConfig.TempWidgetContainerDomId);

         if (intialDisplayDomId)
            utilities.show(intialDisplayDomId);

         if (FirstTabItemDomId) {
            query('#' + FirstTabItemDomId).forEach(function(liItem) {
               domAttr.set(liItem, {
                  'tabindex' : '0',
                  'aria-selected' : 'true'
               });
               domClass.add(liItem, 'lotusSelected');
            });
         }
         var hash = win.location.hash;
         if (hash) {
            // CCM
            var searchTabPos = hash.indexOf('&tab');
            if (searchTabPos > 0) {
               wpCRE.changeHash(hash.substr(0, searchTabPos));
            }
         }

         if (callback)
            callback();

         return false;
      };

      wpCRE.addTabsWithOnclickCalls = function(TabContainerDomId, TempWidgetContainerDomId, intialDisplayDomId, cancelCallBack, FirstTabItemDomId, widgetMode, attributesMap) {
         var selectedNode = null;
         array.forEach(wpCRE.uiLocations, function(loc) {
            utilities.show('widget-container-' + loc, false, true);
         });

         array.forEach((win.WidgetPlacementConfig.hideElements || []), function(elem) {
            utilities.hide(elem, false, true);
         });

         if (cancelCallBack) {
            win.WidgetPlacementConfig.cancelCallBack = cancelCallBack;
         }

         var selectTabId = null;
         var selectTabInst = null;
         var showHidden = false;
         var moreActionsNode = null;

         //update for 183378
         // to show hidden widget on edit community page
         var isEditPage = false;
         if('edit'=== widgetMode)
        	 isEditPage = true;
         if(isEditPage && is_communities_show_hidden_in_navigator)
        	 showHidden=true;

         if (attributesMap && attributesMap.length) {
            var component = attributesMap[0].component;
            if (component && component === 'communities:content') {
               showHidden = true;
            }
            selectTabId = attributesMap[0].selectTab;
            selectTabInst = attributesMap[0].selectTabInst;
            var hash ='';
            var key = attributesMap[0].entryValue;
            if (key) {
               if (attributesMap[0].entryName === 'searchKeywords') {
                  hash = 'query=' + key;
               } else if (attributesMap[0].entryName === 'tagCloudItemValue') {
                  hash = 'tag=' + key;
               }
            }
            if (attributesMap[0].searchKeywords) {
            	if(hash)hash+='&';
            	hash+='query=' + attributesMap[0].searchKeywords;
            }
            if (attributesMap[0].tagCloudItemValue) {
            	if(hash)hash+='&';
            	hash+='tag=' +attributesMap[0].tagCloudItemValue;
            }
            if (attributesMap[0].person) {
            	if(hash)hash+='&';
            	hash+='person=' +attributesMap[0].person;
            }

            if (hash) {
               // CCM
               if (selectTabInst) {
                  hash += '&tabinst=' + selectTabInst;
               } else if (selectTabId) {
                  hash += '&tab=' + selectTabId;
               }
               wpCRE.changeHash(hash);
            }

            if (win.searchPanel) {
               win.searchPanel.setSearchBarMode(true);
            }

            moreActionsNode = attributesMap[0].moreActionsContainerNode;
         }

         var displayedUserInfo = getDisplayedUserInfo();
         var profileType = (displayedUserInfo && typeof (displayedUserInfo.profileType) === 'string' && lang.trim(displayedUserInfo.profileType).length > 0
               ? displayedUserInfo.profileType : 'default');
         var nodes = wpCRE.utils.getPageWidgetInstances(win.WidgetPlacementConfig.defaultPageId, null, profileType);
         if (!nodes || !nodes.length) {
            // fall back to default layout when there is no layout for current
            // profile type
            nodes = wpCRE.utils.getPageWidgetInstances(win.WidgetPlacementConfig.defaultPageId, null, 'default');
         }

         var canPersonalize = (wpCRE.getUserProfileOverrideProperty('canPersonalize') === 'true');

         var selectTab = function(node, opts) {
            var widgetDefId = opts.defNode.defId;
            var widgetInstanceId = opts.instNode.instanceId || widgetDefId;
            var selectTabInstValue = utilities.getURLParam('tabinst', true);

            query('._iconHolder', node.parentNode).forEach(function(iconNode) {
               domStyle.set(iconNode, 'display', 'none');
            });
            if (!moreActionsNode) {
               query('._iconHolder', node).forEach(function(iconNode) {
                  domStyle.set(iconNode, 'display', 'inline');
               });
            }

            // set the aria-label of the tabpanel to match the tab selected
            try {
               domAttr.set(dom.byId(win.WidgetPlacementConfig.TabContainerDomId + '_panel'), 'aria-label', query('a._linkHolder', node)[0].innerHTML);
            } catch (ee) {
            }

            // Show informational message that changes should be saved for each
            // tab.
            if (wpCRE.infoMessage == null && dom.byId('editWarningMessage')) {
               wpCRE.infoMessage = new MessageBox({
                  canClose : true,
                  _strings : {
                     icon_alt : coreMessages['rs_messagebox_info_icon_alt'],
                     a11y_label : coreMessages['rs_messagebox_info_a11y_label'],
                     close_btn_title : coreMessages['rs_close'],
                     close_btn_alt : coreMessages['rs_close']
                  },
                  type : MessageBox.TYPE.INFO,
                  msg : messages['switchTabWarning']
               }, domConstruct.create('div'));
               domConstruct.place(wpCRE.infoMessage.domNode, dom.byId('editWarningMessage'), 'only');
            }
            ;

            if (opts.destroyContainer) {
               wpCRE.destroyWidgetContainer(win.WidgetPlacementConfig.TempWidgetContainerDomId, false);
            }

            wpCRE.destroyWidget(widgetInstanceId, null, false, true, false);
            wpCRE.getWidgetDocAndRenderWidget(widgetDefId,
               opts.defNode,
               widgetInstanceId,
               win.WidgetPlacementConfig.TempWidgetContainerDomId,
               opts.widgetMode,
               'skinless',
               false,
               false,
               opts.attributesMap);

            if (opts.initDispId)
               utilities.hide(opts.initDispId, false, true);

            if (opts.attributesMap && opts.attributesMap.length) {
                  // copy query and tag hash values from current url - tag may have changed
                  var hash = '';

                  var queryParam = utilities.getURLParam('query', true);
                  if (queryParam) {
                     hash += 'query=' + queryParam;
                  }

                  var tagParam = utilities.getURLParam('tag', true);
                  if (tagParam) {
                     if (hash) {
                        hash+= '&';
                     }
                     hash += 'tag=' + tagParam;
                  }

                  var personParam = utilities.getURLParam('person', true);
                  if (personParam) {
                     if (hash) {
                        hash+= '&';
                     }
                     hash += 'person=' + personParam;
                  }

                  selectTabId = attributesMap[0].selectTab;
                  selectTabInst = attributesMap[0].selectTabInst;
                  if (selectTabInst) {
                     hash += '&tabinst=' + widgetInstanceId;
                  } else if (selectTabId) {
                     hash += '&tab=' + widgetDefId;
                  } else {
                     hash += '&tabinst=' + widgetInstanceId;
                  }

                  wpCRE.replaceHash(hash);

                  if (win.searchPanel) {
                     win.searchPanel.setSearchBarMode(true);
                  }
            }

            // we have an external node to hold the more actions, update that
            // when we switch tabs
            if (moreActionsNode) {

               // destroy, disconnect, and remove old dijits and dom elements
               var oldDijit = registry.byId(opts.instId + 'moreActions');
               if (oldDijit)
                  oldDijit.destroy();

               if (!lang.isObject(wpCRE._moreActionsConnect))
                  wpCRE._moreActionsConnect = {};

               if (wpCRE._moreActionsConnect[opts.instId]) {
                  wpCRE._moreActionsConnect[opts.instId].remove();
                  delete wpCRE._moreActionsConnect[opts.instId];
               }

               var linkId = moreActionsNode.id + '_menuHolder';
               query('.' + linkId).forEach(function(node) {
                  node.parentNode.removeChild(node);
               });

               // create new dijits and dom elements
               domConstruct.place('<div dojoType="dijit.Menu" id="' + opts.instId + 'moreActions"  class="' + linkId + '" style="display:none;"></div>',
                  moreActionsNode,
                  'after');

               // set the aria label and title to the correct text
               var widgetName = wpCRE.utils.getEscapedWidgetName(opts.defNode, opts.instNode, true, widgetMode || 'view');
               var actionsAlt = messages['actions_alt'] || 'Actions for: ${0}';
               actionsAlt = string.substitute(actionsAlt, [ widgetName
               ]);

               query('a', moreActionsNode).forEach(function(node) {
                  domAttr.set(node, {
                     title : actionsAlt,
                     'aria-label' : actionsAlt
                  });
               });
               query('.lotusAltText', moreActionsNode).forEach(function(node) {
                  domAttr.set(node, {
                     innerHTML : '&#9660;'
                  });
               });

               // get a reference to the newly generated moreActions node
               var linkNode = dom.byId(opts.instId + 'moreActions');

               // add the refresh menu item
               domConstruct.place(domConstruct.create('div', {
                  dojoType : 'dijit.MenuItem',
                  label : messages['refresh'],
                  'onclick' : 'lconn.core.WidgetPlacement.fetchAndRefresh("' + opts.instId + '");'
               }), linkNode, 'last');

               // add the help menu item
               var helpLink = opts.defNode.helpLink;
               if (helpLink && helpLink.length) {
                  helpLink = _getI18nString(helpLink);
                  var helpItem = domConstruct.create('div', {
                     dojoType : 'dijit.MenuItem',
                     label : messages['help'],
                     title : messages['link.window.openNewWindow'],
                     'onclick' : 'lconn.core.utilities.hide("' + opts.instId + 'moreActions", true, true);'
                               + 'lconn.core.WidgetPlacement.openHelpWindow("' + helpLink + '");'
                  });
                  domConstruct.place(helpItem, linkNode, 'last');
               }

               // parse the newly generated moreActions so the Menu will show
               parser.parse(linkNode.parentNode);

               // let's connect the click to open the newly generated menu
               wpCRE._moreActionsConnect[opts.instId] = on(moreActionsNode, 'click', function(evt) {
                  wpCRE.openMenu(evt, opts.instId);
                  evt.preventDefault();
                  evt.stopPropagation();
               });
            }
         };

         var addTab = function(opts) {
            // Maximum number of characters in tab's string.
            var maxTabLength = 50;
            var widgetDefId = opts.defNode.defId;

            var widgetName = wpCRE.utils.getEscapedWidgetName(opts.defNode, opts.instNode, true, widgetMode || 'view');
				var widgetNameAlt = wpCRE.utils.getWidgetName(opts.defNode, opts.instNode, widgetMode || 'view');
            if (widgetName.length > maxTabLength) {
               widgetName = widgetName.substring(0, maxTabLength) + '...';
            }

            var li = dom.byId(opts.instId + '_TabItem');
            if (li == null) {
               li = domConstruct.create('li', {
                  id : opts.instId + '_TabItem',
                  role : 'tab',
                  title : widgetNameAlt
               });
               domConstruct.place(li, TabContainerDomId, 'last');
            }

            domAttr.set(li, {
               itemidx : opts.itemIdx,
               innerHTML : '<a tabindex="-1" class="_linkHolder lotusLeft">' + widgetName + '</a>'
                     + '<a class="_iconHolder lotusIcon lotusLeft" style="padding: 0; display: none;"></a>'
                     + '<div class="_menuHolder" style="display: none;"><div>'
            });

            on(li, 'click', function(evt) {
               selectTab(li, opts);
               evt.preventDefault(), evt.stopPropagation();
               return false;
            });

            if (!opts.showMenu) {
               query('._iconHolder', li).forEach(domConstruct.destroy);
               query('div._menuHolder', li).forEach(domConstruct.destroy);
            }
            else if (!moreActionsNode) {
               var pMenu = query('div._menuHolder', li)[0];

               domAttr.set(pMenu, {
                  id : opts.instId + 'moreActions',
                  dojoType : 'dijit.Menu'
               });

               var refreshItem = domConstruct.create('div', {
                  dojoType : 'dijit.MenuItem',
                  label : messages['refresh'],
                  'onclick' : 'lconn.core.WidgetPlacement.fetchAndRefresh("' + opts.instId + '");'
               });
               domConstruct.place(refreshItem, pMenu, 'last');

               var helpLink = opts.defNode.helpLink;
               if (helpLink && helpLink.length) {
                  helpLink = _getI18nString(helpLink);
                  var helpItem = domConstruct.create('div', {
                     dojoType : 'dijit.MenuItem',
                     label : messages['help'],
                     title : messages['link.window.openNewWindow'],
                     'onclick' : 'lconn.core.utilities.hide("' + pMenu.id + '", true, true);'
                               + 'lconn.core.WidgetPlacement.openHelpWindow("' + helpLink + '");'
                  });
                  domConstruct.place(helpItem, pMenu, 'last');
               }

               var actionsAlt = messages['actions_alt'] || 'Actions for: ${0}';
               actionsAlt = string.substitute(actionsAlt, [widgetName]);

               var pIcon = query('._iconHolder', li)[0];
               domAttr.set(pIcon, {
                  id : opts.instId + '_MenuIcon',
                  role : 'button',
                  'aria-haspopup' : 'true',
                  href : 'javascript:void(0);',
                  innerHTML : '<img class="lotusArrow" alt="' + actionsAlt + '" title="' + actionsAlt + '" src="' + _Widget.prototype._blankGif
                        + '"/><span class="lotusAltText">&#9660;</span>'
               });
               domClass.add(pIcon, 'lotusIcon');
               on(pIcon, 'click', function(evt) {
                  wpCRE.openMenu(evt, opts.instId);
                  evt.preventDefault();
                  evt.stopPropagation();
               });
            }

            domConstruct.place(li, TabContainerDomId);
            parser.parse(li);
            return li;
         };

         nodes = nodes || [];
         array.forEach(nodes, lang.hitch(this, function(widgetInstance, idx) {
            var defIdRef = widgetInstance.defIdRef;

            if (selectTabId == null) {
               selectTabId = defIdRef;
            }

            var widgetDef = wpCRE.utils.getWidgetDef(defIdRef);
            if (widgetDef == null) {
               logger.warn('Unable to find widget definition for: ' + defIdRef + ', it will be skipped.');
               return; // the widget def is missing the config file.
            }

            var uiLocation = widgetInstance.uiLocation,
                instanceId = widgetInstance.instanceId || defIdRef;

            if (instanceId === TempWidgetContainerDomId)
               return; // skip adding widget to widget's self location
            if (!wpCRE.canAddWidget(widgetDef, win.WidgetPlacementConfig, canPersonalize, widgetInstance, showHidden))
               return;

            var params = {
               containerId : TabContainerDomId,
               tempContainerId : TempWidgetContainerDomId,
               defNode : widgetDef,
               instNode : widgetInstance,
               instId : instanceId,
               initDispId : intialDisplayDomId,
               cancelCallBack : cancelCallBack,
               widgetMode : widgetMode,
               attributesMap : lang.clone(attributesMap),
               itemIdx : idx,
               showMenu : false,
               destroyContainer : true
            };

            var addedNode = null;
            if (_modeSupported(widgetMode, widgetDef)) {
               // Don't show edit tab for description widget
               if (!((defIdRef === 'description') && (widgetMode === 'edit'))) {
                  addedNode = addTab(params);
               }
            }
            else if (uiLocation === TempWidgetContainerDomId) {
               params.showMenu = true;
               addedNode = addTab(params);
            }

            if (instanceId === selectTabInst || defIdRef === selectTabId) {
               selectedNode = addedNode;
            }
         }));

         win.WidgetPlacementConfig.isTabbedFullPageWidgetRendering = true;
         win.WidgetPlacementConfig.TempWidgetContainerDomId = TempWidgetContainerDomId;
         win.WidgetPlacementConfig.TabContainerDomId = TabContainerDomId;

         if (wpCRE.aria && typeof wpCRE.aria.TabPanel === 'function') {
            new wpCRE.aria.TabPanel(TabContainerDomId);
            if (selectedNode != null) {
               selectedNode.click();
            }
         }

         // code makes sure the height of the image in the tabs is equal to the
         // height of the link text.
         // For the case where the customer changes the appearance of the tabs.
         query('a._iconHolder', dom.byId(TabContainerDomId)).forEach(function(iconNode) {
            var imgNode = query('img.lotusArrow', iconNode);
            if (imgNode.length) {
               var linkNode = query('._linkHolder', iconNode.parentNode);
               if (linkNode.length) {
                  var h = dojo.coords(linkNode[0]).h - domStyle.get(linkNode[0], 'borderBottomWidth');
                  if (!has('ie'))
                     h -= domStyle.get(linkNode[0], 'borderTopWidth');
                  domStyle.set(imgNode[0], 'height', h + 'px');
               }
            }
         });
      };

      wpCRE.URLChange = function(/* String */URL) {
         logger.entering('lconn.core.WidgetPlacement', 'URLChange', arguments);

         var index = URL.indexOf('#');
         if (index === -1 || URL.substring(index).length === 1 || URL.substring(index) === '#overview') {
            wpCRE.reloadOverviewPage();
            return;
         }

         var fullpageWidgetId = utilities.getURLParam('fullpageWidgetId', true);
         if (fullpageWidgetId && fullpageWidgetId !== wpCRE.currentFullpageWidgetInstanceId) {
            wpCRE.loadFullpageView(fullpageWidgetId, null, false, true, true);
            return;
         }

         // Check for query hash - indicating search url. Force browser to
         // switch to it and send url to server.
         var queryValue = utilities.getURLParam('query', true);
         if (queryValue && domStyle.get('searchCommunityForm', 'display') === 'none') {
            // If we're already displaying the search result form - don't do
            // navigation to search again.
            // Otherwise duplicate what a search does...
            if (wpCRE.utils.getHandlers('handleSearchRequest')) {
               var selectTabInstValue = utilities.getURLParam('tabinst', true) || null,
                   selectTabValue = utilities.getURLParam('tab', true) || null;

               var opts = {
                  tab : selectTabValue,
                  tabinst : selectTabInstValue,
                  query : queryValue
               };
               array.forEach(wpCRE.utils.getHandlers('handleSearchRequest'), function(handler) {
                  handler(opts);
               });
            }
         }
      };

      wpCRE.init = function(/* String */mode) {
         var fullpageWidgetId = utilities.getURLParam('fullpageWidgetId', true),
             queryValue = utilities.getURLParam('query', true),
             tagValue = utilities.getURLParam('tag', true);
	 //COMMUNITY-188 TE - Overview Page is still accessible after removing "#fullpageWidgetId=" from the URL
	 // fullpageWidgetId will be appended only if the community has "Highlights" as landing page and "communityoverview" in URL, else skip the condition
	 
	 if( fullpageWidgetId == undefined && 'edit' != mode && 'undefined' !== typeof communityActionData && communityActionData.startPage!=""){
	    var isHighlightsLandingPage= _isHighlightsStartPage();      
		if(isHighlightsLandingPage){
			var iscommunityoverview =_communityoverview();
			if(iscommunityoverview ){
				// If fullpageWidgetId is removed , set it to default start page	 
				fullpageWidgetId=communityActionData.startPage;
			}
		}
	 } 
     	var isEditMode = ('edit' === mode),
             isFullpageMode = !!fullpageWidgetId,
             isSearchMode = !isFullpageMode && (!!queryValue || !!tagValue),
             isOverviewPage = !isFullpageMode && !isSearchMode && !isEditMode;

         var addToNavBar = !isEditMode;

         if (isFullpageMode) {
            mode = 'fullpage';
         } else if (isSearchMode) {
            mode = 'search';
         } else if (wpCRE.isCommunitiesPage && isOverviewPage) {
            mode = 'view';
         }

         var widgetSpecsPromise = wpCRE.placeWidgetMetadata(addToNavBar, mode);

         // show widgets for pages not in fullpage mode and having no query
         if (isOverviewPage) {
            array.forEach(win.WidgetPlacementConfig.hideElements, function(hideElement){
               utilities.show(hideElement, false, false, true);
            });
         }

         if (isFullpageMode || _isUpdatesPage()) {
            wpCRE.hideColumn('col1'); // Hide left column widgets
         }

         _showSidePanels();

         if (typeof win.widgetUserInfo !== 'undefined' && typeof win.userid === 'undefined') {
            win.userid = win.widgetUserInfo.userid;
         }

         // initialize iContainer
         _withIRuntime()
               .then(lang
                     .hitch(this,
                        function(iRuntime) {
                           // overwrite cre handle event function.
                           cre$.WidgetRefInternal.prototype.handleEvent = function(/* String */eventName, /* String */payloadType, /* Object */payload) {
                              if (typeof eventName === 'undefined' || eventName === null) {
                                 return false;
                              }
                              if (eventName === this._iContext.constants.predefinedEvents.onModeChanged) {
                                 if (win.WidgetPlacementConfig.isTabbedFullPageWidgetRendering) {
                                    wpCRE.handleModeExit();
                                 } else {
                                    if (payload && payload.newMode === 'fullpage') {
                                       widgetId = this._iContext._iEvents._widgetId;
                                       if (widgetId) {
                                          wpCRE.changeHash('fullpageWidgetId=' + widgetId);
                                       }
                                    }
                                    return this.handleModeChange(payload.newMode);
                                 }
                              } else if (payload && payload.newMode && this._isOnModeEvent(eventName, payloadType, payload)) {
                                 this.invokeOnModeMethod(payload.newMode);
                                 return true;
                              }
                              return this._handleEventInternal(eventName, payloadType, payload);
                           };

                           if (_useServerInjection && isOverviewPage) {
                              var params = {};
                              if (win.WidgetPlacementConfig.resourceType) {
                                 params.resourceType = win.WidgetPlacementConfig.resourceType;
                              }
                              if (win.WidgetPlacementConfig.resourceId) {
                                 params.resourceId = win.WidgetPlacementConfig.resourceId;
                              }
                              if (win.WidgetPlacementConfig.pageId) {
                                 params.page = win.WidgetPlacementConfig.pageId;
                              }
                              var queryString = ioQuery.objectToQuery(params);
                              if (queryString) {
                                 queryString = '?' + queryString;
                              }
                              var url = win.WidgetPlacementConfig.applicationContext + '/widgetProcess.do' + queryString;

                              var st = cre$.internalutil.getCREContainerToken();
                              st = (st && st.token) ? st.token : '';

                              request(url, {
                                 method : 'GET',
                                 handleAs : 'json',
                                 headers : {
                                    'X-Shindig-ST' : st
                                 },
                                 sync : true,
                              }).then(function(jsonData) {
                                 if (jsonData.sc) {
                                    _showMessageInHeadline('error', coreMessages['rs_widgets_loading_error_title'], coreMessages['rs_widget_loading_error_message'], false, true);
                                    logger.error('Failed to get data from ' + url + ', error: \n' + jsonData.message);
                                    return;
                                 }

                                 var pageData = _processPageData(jsonData.pageData);

                                 widgetSpecsPromise.then(lang.hitch(this, function(widgetSpecs) {
                                    //Move to iContainer2.init() ??
                                    var initPromise = iRuntime.init(pageData, true);
                                    var ifInitSuceed = function (widgetRefArray) {
                                       logger.debug(widgetRefArray);
                                    };
                                    var ifInitFail = function (widgetRefArray) {
                                       array.forEach(widgetRefArray, function (widgetRef) {
                                          if (!widgetRef) {
                                             return false;
                                          }

                                          if (lang.isString(widgetRef)) {
                                             logger.error('Failed to load widget(s), error: \n' + widgetRef);
                                          } else if (lang.isObject(widgetRef)) {
                                             if (lang.isFunction(widgetRef.getWidgetRef)) {
                                                widgetRef = widgetRef.getWidgetRef();
                                             }

                                             if (lang.isFunction(widgetRef.isError) && widgetRef.isError()) {
                                                var error = widgetRef.getError().message;
                                                var instanceId = widgetRef.getWidgetId();
                                                _showWidgetLoadError(instanceId, error);
                                             }
                                          }
                                       });
                                    };

                                    initPromise.then(ifInitSuceed, ifInitFail);
                                 }));
                              },
                              function(error) {
                                 _showMessageInHeadline('error', coreMessages['rs_widgets_loading_error_title'], coreMessages['rs_widget_loading_error_message'], false, true);
                                 logger.error('Failed to get data from ' + url + ', error: \n' + error);
                              });
                           } else {
                              // Set user profile info
                              var pageData = {};
                              _setUserProfile(pageData);

                              // Move to iContainer2.init()??
                              iRuntime.init(pageData, true);
                           }
                           ;

                           // don't support canNavigateAway
                           cre$.iwidget.iContext.prototype.canNavigateAway = null;
                           cre$.iwidget.iContext.prototype.getUserProfile = function() {
                              if (!this._userProfile) {
                                 var ss = this._iRuntime.getStateSet(this._instanceData.moduleId, this.constants.USERPROFILE, {});
                                 this._userProfile = new cre$.iwidget.UserProfile(this._instanceData.moduleId, ss);
                                 this._userProfile._iContext = this;
                                 // for activity stream
                                 this._userProfile.widgetUserInfo = this._userProfile.user;
                              }
                              return this._userProfile;
                           };
                           // workaround to remove cookies not needed.
                           declare('com.ibm.cre.iwidget.iContext', com.ibm.cre.iwidget.iContext, {
                              constructor : function(widgetObject, rootElement) {
                                 var proxyUrl = cre$.iRuntime.getProxyUrl();
                                 var _proxyCookieDomain = null;
                                 var _proxyCookiePath = null;
                                 var uri = proxyUrl.replace('%host%', document.location.host);
                                 var uriObj = shindig.uri(uri);
                                 var oldpath = uriObj.getPath();
                                 var newpath = oldpath + '/';
                                 if (widgetObject.instanceMetaData) {
                                    newpath += widgetObject.instanceMetaData.moduleId;
                                 } else {
                                    newpath += widgetObject.getModuleId();
                                 }
                                 uriObj.setPath(newpath);
                                 uri = uriObj.toString();
                                 var urlWithoutPrefix = shindig.uri().removePrefix(uri);
                                 if (urlWithoutPrefix.indexOf('/') > 0) {
                                    _proxyCookieDomain = urlWithoutPrefix.substring(0, urlWithoutPrefix.indexOf('/'));
                                    _proxyCookiePath = urlWithoutPrefix.substring(urlWithoutPrefix.indexOf('/'), urlWithoutPrefix.indexOf('?'));
                                 } else {
                                    _proxyCookieDomain = urlWithoutPrefix;
                                    _proxyCookiePath = '/';
                                 }
                                 if (_proxyCookieDomain.indexOf(':') > 0) {
                                    _proxyCookieDomain = this._proxyCookieDomain.substring(0, this._proxyCookieDomain.indexOf(':'));
                                 }
                                 cookie('widgetid', null, {
                                    path : _proxyCookiePath,
                                    domain : _proxyCookieDomain,
                                    expires : -1
                                 });
                                 cookie('st', null, {
                                    path : _proxyCookiePath,
                                    domain : _proxyCookieDomain,
                                    expires : -1
                                 });
                              },

                              getTheme : function() {
                                 return _getWidgetTheme(this.getWidgetId());
                              }
                           });

                           _registerItemSetPersistence(iRuntime);

                           if (wpCRE.URLChangeCallBack == null) {
                              wpCRE.URLChangeCallBack = [wpCRE.URLChange];
                              win.registerBackButtonSupport();
                           }

                           if (isOverviewPage && !_useServerInjection || isEditMode) {
                              widgetSpecsPromise.then(lang.hitch(this, function(widgetSpecs) {
                                 wpCRE.renderWidgets(widgetSpecs);
                              }));
                           } else if (isFullpageMode) {
                              wpCRE.onlyFullPageWidgetLoaded = true;
                              wpCRE.loadFullpageView(fullpageWidgetId, null, 'initial', false);
                           }
                        }));
      };

      var _setUserProfile = function(pageData, userProfile) {
      	if (!userProfile) {
      		userProfile = {
               'id' : 'userProfile',
               'item' : [{
                  'id' : 'viewer',
                  'value' : win.widgetUserInfo
               }]
         	};
      	}

      	pageData.userProfile = userProfile;
      	return pageData;
      };

      var _processPageData = function(pageData) {
         var instanceData = pageData.instanceData,
             metaData = pageData.widgetMetadata,
             displayedUserInfo = getDisplayedUserInfo();

         _setUserProfile(pageData);

         // temp solution for IC126053, remove the
         // instanceData and metaData if placement
         // of the widget instance doesn't exist.

         // step 1: filter broken definitions
         var brokenMetaDataMap = {};
         var validMetaData = array.filter(metaData, function(mData) {
            if (!!mData.error) {
               brokenMetaDataMap[mData.definitionUrl] = mData;
               return false;
            }

            return true;
         });

         // step 2: filter instances with broken definition and no container
         var metaDataUsed = {};
         var filteredInstData = array.filter(instanceData, function(iData) {
            var domNode = dom.byId(iData.domId);
            if (!domNode) {
            	return false;
            }

            if (brokenMetaDataMap[iData.definition]) {
            	_showWidgetLoadError(iData.domId,
            	   brokenMetaDataMap[iData.definition].error.message);
               return false;
            }

            var uiLocation = wpCRE.getUILocation(iData.domId);
            var widgetDef = wpCRE.utils.getWidgetDefByInstance(iData.domId);
            var supported = _columnSupported(uiLocation, widgetDef);
            if (!supported) {
               _showMisplacedWarning(iData.domId);
               return false;
            }

            metaDataUsed[iData.definition] = true;
            return true;
         });

			// step 3: filter all unused widget definitions
         var filteredMetaData = array.filter(validMetaData, function(mData) {
            return (metaDataUsed[mData.definitionUrl] === true);
         });
         // end of temp solution

         // i18nalize instanceData, and append
         // some more params
         array.forEach(filteredInstData, function(data) {
            var itemSet = data.instanceMetaData.itemSet;
            array.forEach(itemSet, function(v) {
               if ('attributes' !== v.id)
                  return;

               var item = v.item;
               array.forEach(item, function(it) {
                  var _newValue = it.value;
                  if ('computedWidgetTitle' === it.id) {
                     _newValue = _parseWidgetTitle(_newValue);
                  }
                  _newValue = _getI18nString(_newValue);
                  it.value = _newValue;
               });

               if (win.WidgetPlacementConfig.isProfilesEnv) {
                  if (displayedUserInfo.uid != null)
                     item.push({
                        'id' : 'profileDisplayedUserUID',
                        'value' : displayedUserInfo.uid
                     });
                  if (displayedUserInfo.key != null)
                     item.push({
                        'id' : 'profileDisplayedUserKey',
                        'value' : displayedUserInfo.key
                     });
               }
               if (win.WidgetPlacementConfig.resourceId != null)
                  item.push({
                     'id' : 'resourceId',
                     'value' : win.WidgetPlacementConfig.resourceId
                  });
               if (win.WidgetPlacementConfig.parentResourceId != null)
                  item.push({
                     'id' : 'parentResourceId',
                     'value' : win.WidgetPlacementConfig.parentResourceId
                  });
               if (win.WidgetPlacementConfig.resourceType != null)
                  item.push({
                     'id' : 'resourceType',
                     'value' : win.WidgetPlacementConfig.resourceType
                  });
               if (win.WidgetPlacementConfig.resourceName != null)
                  item.push({
                     'id' : 'resourceName',
                     'value' : win.WidgetPlacementConfig.resourceName
                  });
               if (win.WidgetPlacementConfig.resourceOrgId != null)
                   item.push({
                      'id' : 'resourceOrgId',
                      'value' : win.WidgetPlacementConfig.resourceOrgId
                   });
            });
         });

         pageData.instanceData = filteredInstData;
         pageData.widgetMetadata = filteredMetaData;

         return pageData;
      };

      var _extractChange = function(itemSet) {
         var result = {};
         var allNames = itemSet.getAllNames();
         for (var i = 0, name, value; i < allNames.length; i++) {
            name = allNames[i];
            value = itemSet.getItemValue(name);
            result[name] = value;
         }
         return result;
      };

      var _registerItemSetPersistence = function(iRuntime) {
         var itemSetPersistence = {};
         itemSetPersistence.update = function(widgetId, itemSet, sync) {
            var retVal = new cre$.promise.Promise();
            var change = _extractChange(itemSet);
            
            if(typeof wpCRE.utils.getWidgetInstance(widgetId).title !== "undefined")
            {
                change.computedWidgetTitle 	= wpCRE.utils.getWidgetInstance(widgetId).title;
                change.widgetTitle 			= wpCRE.utils.getWidgetInstance(widgetId).title;
            }
            
            _xmlManager.savePreference(widgetId, change).then(
               function (change) {
                  var refresh = function() {
                     retVal.resolve(itemSet);
                     wpCRE.refreshTitleAndMicroformat(widgetId);
                  };
                  var errorHandler = function(response, ioArgs) {
                     retVal.reject();
                  };
                  wpCRE.utils.withLayoutInfo(true, errorHandler).then(refresh);
               },
               function (error){
                  retVal.reject(error);
               }
            );

            return retVal;
         };
         itemSetPersistence.getItemSets = function(widgetId, id, mode) {
            var context = iRuntime.getWidgetById(widgetId).widgetObject.getIContext();
            return cre$.promise.resolved(context.getItemSet(id, mode));
         };
         cre$.services.getServiceManager().setService(cre$.services.ITEMSETPERSISTENCE, itemSetPersistence, '');
      };

      // Initialize the widget framework to support edit mode
      wpCRE.initEdit = function() {
         wpCRE.init('edit');
      };

      wpCRE.setFocus = function(widgetId, elemId) {
         var section = dom.byId(widgetId + 'Section');
         if (section) {
            var elems = query('#' + elemId, section);
            if (elems && elems.length) {
               try {
                  if (elems[0].focus)
                     elems[0].focus();
               } catch (e) {
                  logger.error(e.message);
               }
            }
         }
      };

      wpCRE.changeLayout = function(/* String */newLayout, /* Function */callback) {
         if (!lang.isString(newLayout) || '' === newLayout) {
            logger.warn('new layout is invalid: ' + newLayout);
            return;
         }

         _xmlManager.changeLayout(newLayout).then(function() {
            if (lang.isFunction(callback)) {
               callback();
            }
         });
      };

      return wpCRE;
   });
